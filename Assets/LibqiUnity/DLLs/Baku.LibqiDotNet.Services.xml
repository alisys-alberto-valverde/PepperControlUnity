<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Baku.LibqiDotNet.Services</name>
    </assembly>
    <members>
        <member name="T:Baku.LibqiDotNet.Service.ALFrameManager">
            <summary>Frame manager is used to play choregraphe projects in naoqi. It needs Choregraphe projects in input and will return an ID for each project. It can also only read a given box/timeline in a complex behavior.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFrameManager.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFrameManager.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFrameManager.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALFrameManager.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.NewBehaviorFromFile(System.String,System.String)">
            <summary>Creates a new behavior, from a box found in an xml file stored in the robot. DEPRECATED since 2.3</summary>
            <param name="arg0_xmlFilePath">Path to Xml file, ex : &quot;/home/youhou/mybehavior.xar&quot;.</param>
            <param name="arg1_behName"></param>
            <returns>return a unique identifier for the created box (the box URI), that can be used by playBehavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.NewBehaviorFromFileAsync(System.String,System.String)">
            <summary>Creates a new behavior, from a box found in an xml file stored in the robot. DEPRECATED since 2.3</summary>
            <param name="arg0_xmlFilePath">Path to Xml file, ex : &quot;/home/youhou/mybehavior.xar&quot;.</param>
            <param name="arg1_behName"></param>
            <returns>return a unique identifier for the created box (the box URI), that can be used by playBehavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CreateBehavior(System.String,System.String,System.String)">
            <summary>Creates a new behavior, from a box found in an xml file stored in the robot.</summary>
            <param name="arg0_packageDir"> the base directory of the behavior's package, eg: &quot;/home/myApp&quot;.</param>
            <param name="arg1_behaviorPath">the relative path of the behavior inside the package, eg: &quot;/behavior_1/behavior.xar&quot;.</param>
            <param name="arg2_behName"></param>
            <returns>return a unique identifier for the created box, that can be used by playBehavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CreateBehaviorAsync(System.String,System.String,System.String)">
            <summary>Creates a new behavior, from a box found in an xml file stored in the robot.</summary>
            <param name="arg0_packageDir"> the base directory of the behavior's package, eg: &quot;/home/myApp&quot;.</param>
            <param name="arg1_behaviorPath">the relative path of the behavior inside the package, eg: &quot;/behavior_1/behavior.xar&quot;.</param>
            <param name="arg2_behName"></param>
            <returns>return a unique identifier for the created box, that can be used by playBehavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.NewBehaviorFromChoregraphe">
            <summary>Creates a new behavior, from the current Choregraphe behavior 0(uploaded to /tmp/currentChoregrapheBehavior/behavior.xar). DEPRECATED since 1.14</summary>
            <returns>return a unique identifier for the created behavior (the box URI)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.NewBehaviorFromChoregrapheAsync">
            <summary>Creates a new behavior, from the current Choregraphe behavior 0(uploaded to /tmp/currentChoregrapheBehavior/behavior.xar). DEPRECATED since 1.14</summary>
            <returns>return a unique identifier for the created behavior (the box URI)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CompleteBehavior(System.String)">
            <summary>It will play a behavior and block until the behavior is finished. Note that it can block forever if the behavior output is never called.</summary>
            <param name="arg0_id">The id of the box (the box URI).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CompleteBehaviorAsync(System.String)">
            <summary>It will play a behavior and block until the behavior is finished. Note that it can block forever if the behavior output is never called.</summary>
            <param name="arg0_id">The id of the box (the box URI).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.DeleteBehavior(System.String)">
            <summary>Deletes a behavior (meaning a box). Stop the whole behavior contained in this box first.</summary>
            <param name="arg0_id">The id of the box to delete (the box URI).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.DeleteBehaviorAsync(System.String)">
            <summary>Deletes a behavior (meaning a box). Stop the whole behavior contained in this box first.</summary>
            <param name="arg0_id">The id of the box to delete (the box URI).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PlayBehavior(System.String)">
            <summary>Starts a behavior</summary>
            <param name="arg0_id">The id of the box (the box URI).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PlayBehaviorAsync(System.String)">
            <summary>Starts a behavior</summary>
            <param name="arg0_id">The id of the box (the box URI).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.ExitBehavior(System.String)">
            <summary>Exit the reading of a timeline contained in a given box</summary>
            <param name="arg0_id">The id of the box (the box URI).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.ExitBehaviorAsync(System.String)">
            <summary>Exit the reading of a timeline contained in a given box</summary>
            <param name="arg0_id">The id of the box (the box URI).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.IsBehaviorRunning(System.String)">
            <summary>Tells whether the behavior is running</summary>
            <param name="arg0_id">The id of the behavior to check (The URI of the root box).</param>
            <returns>True if the behavior is running, false otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.IsBehaviorRunningAsync(System.String)">
            <summary>Tells whether the behavior is running</summary>
            <param name="arg0_id">The id of the behavior to check (The URI of the root box).</param>
            <returns>True if the behavior is running, false otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CleanBehaviors">
            <summary>Stop playing any behavior in FrameManager, and delete all of them.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CleanBehaviorsAsync">
            <summary>Stop playing any behavior in FrameManager, and delete all of them.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetBehaviorPath(System.String)">
            <summary>Returns a playing behavior absolute path.</summary>
            <param name="arg0_id">The id of the behavior (The URI of the root box).</param>
            <returns>Returns the absolute path of given behavior.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetBehaviorPathAsync(System.String)">
            <summary>Returns a playing behavior absolute path.</summary>
            <param name="arg0_id">The id of the behavior (The URI of the root box).</param>
            <returns>Returns the absolute path of given behavior.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CreateTimeline(System.String)">
            <summary>Creates a timeline.</summary>
            <param name="arg0_timelineContent">The timeline content (in XML format).</param>
            <returns>return a unique identifier for the created box that contains the timeline. You must call deleteBehavior on it at some point. DEPRECATED since 1.14</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CreateTimelineAsync(System.String)">
            <summary>Creates a timeline.</summary>
            <param name="arg0_timelineContent">The timeline content (in XML format).</param>
            <returns>return a unique identifier for the created box that contains the timeline. You must call deleteBehavior on it at some point. DEPRECATED since 1.14</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PlayTimeline(System.String)">
            <summary>Starts playing a timeline contained in a given box. If the box is a flow diagram, it will look for the first onStart input of type Bang, and stimulate it ! DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box (the URI of the box).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.PlayTimelineAsync(System.String)">
            <summary>Starts playing a timeline contained in a given box. If the box is a flow diagram, it will look for the first onStart input of type Bang, and stimulate it ! DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box (the URI of the box).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.StopTimeline(System.String)">
            <summary>Stops playing a timeline contained in a given box, at the current frame. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box (the URI of the box).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.StopTimelineAsync(System.String)">
            <summary>Stops playing a timeline contained in a given box, at the current frame. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box (the URI of the box).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.SetTimelineFps(System.String,System.Int32)">
            <summary>Sets the FPS of a given timeline. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the timeline (the URI of the box).</param>
            <param name="arg1_fps">The FPS to set.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.SetTimelineFpsAsync(System.String,System.Int32)">
            <summary>Sets the FPS of a given timeline. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the timeline (the URI of the box).</param>
            <param name="arg1_fps">The FPS to set.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetTimelineFps(System.String)">
            <summary>Gets the FPS of a given timeline. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the timeline (the URI of the box).</param>
            <returns>Returns the timeline's FPS.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetTimelineFpsAsync(System.String)">
            <summary>Gets the FPS of a given timeline. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the timeline (the URI of the box).</param>
            <returns>Returns the timeline's FPS.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetMotionLength(System.String)">
            <summary>Returns in seconds, the duration of a given movement stored in a box. Returns 0 if the behavior has no motion layers.  DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box (the URI of the box).</param>
            <returns>Returns the time in seconds.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetMotionLengthAsync(System.String)">
            <summary>Returns in seconds, the duration of a given movement stored in a box. Returns 0 if the behavior has no motion layers.  DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box (the URI of the box).</param>
            <returns>Returns the time in seconds.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.Behaviors">
            <summary>List all behaviors currently handled by the frame manager.</summary>
            <returns>a set listing all behavior ids</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.BehaviorsAsync">
            <summary>List all behaviors currently handled by the frame manager.</summary>
            <returns>a set listing all behavior ids</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GotoAndStop(System.String,System.String)">
            <summary>Goes to a certain frame and pause. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box containing the box (the URI of the box).</param>
            <param name="arg1_frame">The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GotoAndStopAsync(System.String,System.String)">
            <summary>Goes to a certain frame and pause. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box containing the box (the URI of the box).</param>
            <param name="arg1_frame">The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GotoAndStop(System.String,System.Int32)">
            <summary>Goes to a certain frame and pause. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box containing the box (the URI of the box).</param>
            <param name="arg1_frame">The frame we want the timeline to go to.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GotoAndStopAsync(System.String,System.Int32)">
            <summary>Goes to a certain frame and pause. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box containing the box (the URI of the box).</param>
            <param name="arg1_frame">The frame we want the timeline to go to.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GotoAndPlay(System.String,System.String)">
            <summary>Goes to a certain frame and continue playing. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box containing the box (the URI of the box).</param>
            <param name="arg1_frame">The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GotoAndPlayAsync(System.String,System.String)">
            <summary>Goes to a certain frame and continue playing. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box containing the box (the URI of the box).</param>
            <param name="arg1_frame">The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GotoAndPlay(System.String,System.Int32)">
            <summary>Goes to a certain frame and continue playing. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box containing the box (the URI of the box).</param>
            <param name="arg1_frame">The frame we want the timeline to go to.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GotoAndPlayAsync(System.String,System.Int32)">
            <summary>Goes to a certain frame and continue playing. DEPRECATED since 1.14</summary>
            <param name="arg0_id">The id of the box containing the box (the URI of the box).</param>
            <param name="arg1_frame">The frame we want the timeline to go to.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._dataChanged(System.String,System.Object,System.String)">
            <summary>Called by ALMemory when subcription data is updated. INTERNAL</summary>
            <param name="arg0_dataName">Name of the subscribed data.</param>
            <param name="arg1_data">Value of the the subscribed data</param>
            <param name="arg2_message">The message give when subscribing.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._dataChangedAsync(System.String,System.Object,System.String)">
            <summary>Called by ALMemory when subcription data is updated. INTERNAL</summary>
            <param name="arg0_dataName">Name of the subscribed data.</param>
            <param name="arg1_data">Value of the the subscribed data</param>
            <param name="arg2_message">The message give when subscribing.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._subscribeBoxToEvent(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>method called by almemory to inform framemanager that a box is subscribing to an event</summary>
            <param name="arg0_eventName">the name of the event</param>
            <param name="arg1_boxName">the name of the box requesting it (the URI of the box).</param>
            <param name="arg2_message">the associated message</param>
            <param name="arg3_callback">the name of the box's callback to call</param>
            <param name="arg4_micro">true if the subscription is to a micro event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._subscribeBoxToEventAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>method called by almemory to inform framemanager that a box is subscribing to an event</summary>
            <param name="arg0_eventName">the name of the event</param>
            <param name="arg1_boxName">the name of the box requesting it (the URI of the box).</param>
            <param name="arg2_message">the associated message</param>
            <param name="arg3_callback">the name of the box's callback to call</param>
            <param name="arg4_micro">true if the subscription is to a micro event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._unsubscribeBoxToEvent(System.String,System.String,System.Boolean)">
            <summary>method called by almemory to inform framemanager that a box is unsubscribing from an event</summary>
            <param name="arg0_eventName">the name of the event</param>
            <param name="arg1_boxName">the name of the box requesting it (the URI of the box).</param>
            <param name="arg2_micro">true if the subscription is to a micro event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._unsubscribeBoxToEventAsync(System.String,System.String,System.Boolean)">
            <summary>method called by almemory to inform framemanager that a box is unsubscribing from an event</summary>
            <param name="arg0_eventName">the name of the event</param>
            <param name="arg1_boxName">the name of the box requesting it (the URI of the box).</param>
            <param name="arg2_micro">true if the subscription is to a micro event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._boxDataChanged(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0_eventName"></param>
            <param name="arg1_value"></param>
            <param name="arg2_message"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._boxDataChangedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0_eventName"></param>
            <param name="arg1_value"></param>
            <param name="arg2_message"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._startBenchmark">
            <summary>Start recording some performance data.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._startBenchmarkAsync">
            <summary>Start recording some performance data.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._stopBenchmark">
            <summary>Stop performance data recording, and return a summary.</summary>
            <returns>Returns a textual report of the recorded performance data.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._stopBenchmarkAsync">
            <summary>Stop performance data recording, and return a summary.</summary>
            <returns>Returns a textual report of the recorded performance data.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._newBoxFromFile(System.String,System.String)">
            <summary>Creates a new box found in an xml file stored in the robot, without loading it, and without auto-delete on stop. (used by link box)</summary>
            <param name="arg0_xmlFilePath">Path to Xml file, ex : &quot;/home/youhou/mybehavior.xar&quot;.</param>
            <param name="arg1_path">The path to reach the box to instantiate in the project (&quot;&quot; if root).</param>
            <returns>return a unique identifier for the created box (the URI of the box), that can be used by playBehavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._newBoxFromFileAsync(System.String,System.String)">
            <summary>Creates a new box found in an xml file stored in the robot, without loading it, and without auto-delete on stop. (used by link box)</summary>
            <param name="arg0_xmlFilePath">Path to Xml file, ex : &quot;/home/youhou/mybehavior.xar&quot;.</param>
            <param name="arg1_path">The path to reach the box to instantiate in the project (&quot;&quot; if root).</param>
            <returns>return a unique identifier for the created box (the URI of the box), that can be used by playBehavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._waitForStopped(System.String)">
            <summary>wait for a previously started behavior is stopped</summary>
            <param name="arg0_fmid">the unique identifier of the behavior to wait for (the URI of the root box)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._waitForStoppedAsync(System.String)">
            <summary>wait for a previously started behavior is stopped</summary>
            <param name="arg0_fmid">the unique identifier of the behavior to wait for (the URI of the root box)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._onPreferenceUpdated(System.String,System.Object,System.String)">
            <summary>callback for changes in the preference manager</summary>
            <param name="arg0_key">ignored, used by ALMemory</param>
            <param name="arg1_value">the domain and the key of the preference that changed</param>
            <param name="arg2_message">ignored, used by ALMemory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._onPreferenceUpdatedAsync(System.String,System.Object,System.String)">
            <summary>callback for changes in the preference manager</summary>
            <param name="arg0_key">ignored, used by ALMemory</param>
            <param name="arg1_value">the domain and the key of the preference that changed</param>
            <param name="arg2_message">ignored, used by ALMemory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._onPreferencesSynchronized(System.String,System.Object,System.String)">
            <summary>callback for changes in the preference manager</summary>
            <param name="arg0_key">ignored, used by ALMemory</param>
            <param name="arg1_value">the domain and the key of the preference that changed</param>
            <param name="arg2_message">ignored, used by ALMemory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._onPreferencesSynchronizedAsync(System.String,System.Object,System.String)">
            <summary>callback for changes in the preference manager</summary>
            <param name="arg0_key">ignored, used by ALMemory</param>
            <param name="arg1_value">the domain and the key of the preference that changed</param>
            <param name="arg2_message">ignored, used by ALMemory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._reportError(System.String,System.String,System.String)">
            <summary>called by behaviors when an error occured</summary>
            <param name="arg0_fmid">the unique identifier of the behavior that failed (the URI of the root box)</param>
            <param name="arg1_boxid">the identifier of the box that failed (the URI of the box).</param>
            <param name="arg2_error">the error message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager._reportErrorAsync(System.String,System.String,System.String)">
            <summary>called by behaviors when an error occured</summary>
            <param name="arg0_fmid">the unique identifier of the behavior that failed (the URI of the root box)</param>
            <param name="arg1_boxid">the identifier of the box that failed (the URI of the box).</param>
            <param name="arg2_error">the error message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetBehaviorDebuggerFor(System.String)">
            <summary>get an object tracking transitions in a behavior</summary>
            <param name="arg0_behavior">name of the behavior (the URI of the root box)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetBehaviorDebuggerForAsync(System.String)">
            <summary>get an object tracking transitions in a behavior</summary>
            <param name="arg0_behavior">name of the behavior (the URI of the root box)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetBox(System.String)">
            <summary>get a box as an object</summary>
            <param name="arg0_box">name of the box (the URI of the box).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.GetBoxAsync(System.String)">
            <summary>get a box as an object</summary>
            <param name="arg0_box">name of the box (the URI of the box).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CallBoxInput(System.String,System.String,System.Object)">
            <summary>call an input on a box</summary>
            <param name="arg0_box">name of the box (the URI of the box).</param>
            <param name="arg1_method">name of the method</param>
            <param name="arg2_arg">input argument</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CallBoxInputAsync(System.String,System.String,System.Object)">
            <summary>call an input on a box</summary>
            <param name="arg0_box">name of the box (the URI of the box).</param>
            <param name="arg1_method">name of the method</param>
            <param name="arg2_arg">input argument</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CallBoxInput(System.String,System.String,System.Object,System.Object)">
            <summary>call an input on a box</summary>
            <param name="arg0_box">name of the box (the URI of the box). A box URI is of the format 'behavior_name:/diagram_1/box_2'</param>
            <param name="arg1_method">name of the method</param>
            <param name="arg2_arg1">input argument</param>
            <param name="arg3_arg2">input argument</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFrameManager.CallBoxInputAsync(System.String,System.String,System.Object,System.Object)">
            <summary>call an input on a box</summary>
            <param name="arg0_box">name of the box (the URI of the box). A box URI is of the format 'behavior_name:/diagram_1/box_2'</param>
            <param name="arg1_method">name of the method</param>
            <param name="arg2_arg1">input argument</param>
            <param name="arg3_arg2">input argument</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALPythonBridge">
            <summary>This module evaluates python commands on the fly.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPythonBridge.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPythonBridge.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPythonBridge.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALPythonBridge.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.Eval(System.String)">
            <summary>eval script</summary>
            <param name="arg0_stringToEvaluate">string to eval</param>
            <returns>if the evaluation has gone wrong</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EvalAsync(System.String)">
            <summary>eval script</summary>
            <param name="arg0_stringToEvaluate">string to eval</param>
            <returns>if the evaluation has gone wrong</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EvalReturn(System.String)">
            <summary>eval script and return result. evalReturn(2+2) will return 4</summary>
            <param name="arg0_stringToEvaluate">string to eval</param>
            <returns>the result of the evaluation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EvalReturnAsync(System.String)">
            <summary>eval script and return result. evalReturn(2+2) will return 4</summary>
            <param name="arg0_stringToEvaluate">string to eval</param>
            <returns>the result of the evaluation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EvalFull(System.String)">
            <summary>evaluates script and returns an informative array.</summary>
            <param name="arg0_stringToEvaluate">string to eval</param>
            <returns>an array containing [return value, exceptions, stdout, stderr]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPythonBridge.EvalFullAsync(System.String)">
            <summary>evaluates script and returns an informative array.</summary>
            <param name="arg0_stringToEvaluate">string to eval</param>
            <returns>an array containing [return value, exceptions, stdout, stderr]</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALAnimatedSpeech">
            <summary>The Animated Speech module makes NAO interpret a text annotated with behaviors.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Say(System.String)">
            <summary>Say the annotated text given in parameter and animate it with animations inserted in the text.</summary>
            <param name="arg0_text">An annotated text (for example: &quot;Hello. ^start(Hey_1) My name is NAO&quot;).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SayAsync(System.String)">
            <summary>Say the annotated text given in parameter and animate it with animations inserted in the text.</summary>
            <param name="arg0_text">An annotated text (for example: &quot;Hello. ^start(Hey_1) My name is NAO&quot;).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.Say(System.String,System.Object)">
            <summary>Say the annotated text given in parameter and animate it with animations inserted in the text.</summary>
            <param name="arg0_text">An annotated text (for example: &quot;Hello. ^start(Hey_1) My name is NAO&quot;).</param>
            <param name="arg1_configuration">The animated speech configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SayAsync(System.String,System.Object)">
            <summary>Say the annotated text given in parameter and animate it with animations inserted in the text.</summary>
            <param name="arg0_text">An annotated text (for example: &quot;Hello. ^start(Hey_1) My name is NAO&quot;).</param>
            <param name="arg1_configuration">The animated speech configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._reset">
            <summary>Reset the Animated Speech configuration.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._resetAsync">
            <summary>Reset the Animated Speech configuration.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._stopAll(System.Boolean)">
            <summary>Stop all the speeches.</summary>
            <param name="arg0_blocking">If this method wait for the end of the speeches.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._stopAllAsync(System.Boolean)">
            <summary>Stop all the speeches.</summary>
            <param name="arg0_blocking">If this method wait for the end of the speeches.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._isRunning">
            <summary>Know if animated speech is running.</summary>
            <returns>True, if animated speech is running, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._isRunningAsync">
            <summary>Know if animated speech is running.</summary>
            <returns>True, if animated speech is running, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetBodyTalkEnabled(System.Boolean)">
            <summary>DEPRECATED since 1.18: use setBodyLanguageMode instead.Enable or disable the automatic body talk on the speech.If it is enabled, anywhere you have not annotate your text with animation,the robot will fill the gap with automatically calculated gestures.If it is disabled, the robot will move only where you annotate it withanimations.</summary>
            <param name="arg0_enable">The boolean value: true to enable, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetBodyTalkEnabledAsync(System.Boolean)">
            <summary>DEPRECATED since 1.18: use setBodyLanguageMode instead.Enable or disable the automatic body talk on the speech.If it is enabled, anywhere you have not annotate your text with animation,the robot will fill the gap with automatically calculated gestures.If it is disabled, the robot will move only where you annotate it withanimations.</summary>
            <param name="arg0_enable">The boolean value: true to enable, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetBodyLanguageEnabled(System.Boolean)">
            <summary>DEPRECATED since 1.22: use setBodyLanguageMode instead.Enable or disable the automatic body language on the speech.If it is enabled, anywhere you have not annotate your text with animation,the robot will fill the gap with automatically calculated gestures.If it is disabled, the robot will move only where you annotate it withanimations.</summary>
            <param name="arg0_enable">The boolean value: true to enable, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetBodyLanguageEnabledAsync(System.Boolean)">
            <summary>DEPRECATED since 1.22: use setBodyLanguageMode instead.Enable or disable the automatic body language on the speech.If it is enabled, anywhere you have not annotate your text with animation,the robot will fill the gap with automatically calculated gestures.If it is disabled, the robot will move only where you annotate it withanimations.</summary>
            <param name="arg0_enable">The boolean value: true to enable, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetBodyLanguageModeFromStr(System.String)">
            <summary>Set the current body language mode.3 modes exist: &quot;disabled&quot;, &quot;random&quot; and &quot;contextual&quot;(see BodyLanguageMode enum for more details)</summary>
            <param name="arg0_stringBodyLanguageMode">The choosen body language mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetBodyLanguageModeFromStrAsync(System.String)">
            <summary>Set the current body language mode.3 modes exist: &quot;disabled&quot;, &quot;random&quot; and &quot;contextual&quot;(see BodyLanguageMode enum for more details)</summary>
            <param name="arg0_stringBodyLanguageMode">The choosen body language mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetBodyLanguageMode(System.UInt32)">
            <summary>Set the current body language mode.3 modes exist: SPEAKINGMOVEMENT_MODE_DISABLED,SPEAKINGMOVEMENT_MODE_RANDOM and SPEAKINGMOVEMENT_MODE_CONTEXTUAL(see BodyLanguageMode enum for more details)</summary>
            <param name="arg0_bodyLanguageMode">The choosen body language mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.SetBodyLanguageModeAsync(System.UInt32)">
            <summary>Set the current body language mode.3 modes exist: SPEAKINGMOVEMENT_MODE_DISABLED,SPEAKINGMOVEMENT_MODE_RANDOM and SPEAKINGMOVEMENT_MODE_CONTEXTUAL(see BodyLanguageMode enum for more details)</summary>
            <param name="arg0_bodyLanguageMode">The choosen body language mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetBodyLanguageModeToStr">
            <summary>Set the current body language mode.3 modes exist: &quot;disabled&quot;, &quot;random&quot; and &quot;contextual&quot;(see BodyLanguageMode enum for more details)</summary>
            <returns>The current body language mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetBodyLanguageModeToStrAsync">
            <summary>Set the current body language mode.3 modes exist: &quot;disabled&quot;, &quot;random&quot; and &quot;contextual&quot;(see BodyLanguageMode enum for more details)</summary>
            <returns>The current body language mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetBodyLanguageMode">
            <summary>Set the current body language mode.3 modes exist: SPEAKINGMOVEMENT_MODE_DISABLED,SPEAKINGMOVEMENT_MODE_RANDOM and SPEAKINGMOVEMENT_MODE_CONTEXTUAL(see BodyLanguageMode enum for more details)</summary>
            <returns>The current body language mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.GetBodyLanguageModeAsync">
            <summary>Set the current body language mode.3 modes exist: SPEAKINGMOVEMENT_MODE_DISABLED,SPEAKINGMOVEMENT_MODE_RANDOM and SPEAKINGMOVEMENT_MODE_CONTEXTUAL(see BodyLanguageMode enum for more details)</summary>
            <returns>The current body language mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.DeclareAnimationsPackage(System.String)">
            <summary>DEPRECATED since 2.2: use ALAnimationPlayer.declareAnimationsPackage instead.Add a new package that contains animations.</summary>
            <param name="arg0_animationsPackage">The new package that contains animations.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.DeclareAnimationsPackageAsync(System.String)">
            <summary>DEPRECATED since 2.2: use ALAnimationPlayer.declareAnimationsPackage instead.Add a new package that contains animations.</summary>
            <param name="arg0_animationsPackage">The new package that contains animations.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._setMSPauseBeforeSpeech(System.Int32)">
            <summary>Change the pause's time before the speech.</summary>
            <param name="arg0_pause">The pause's time in milliseconds before the speech.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._setMSPauseBeforeSpeechAsync(System.Int32)">
            <summary>Change the pause's time before the speech.</summary>
            <param name="arg0_pause">The pause's time in milliseconds before the speech.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._getMSPauseBeforeSpeech">
            <summary>Get the pause's time before the speech.</summary>
            <returns>The pause's time in milliseconds before the speech.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._getMSPauseBeforeSpeechAsync">
            <summary>Get the pause's time before the speech.</summary>
            <returns>The pause's time in milliseconds before the speech.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._isCheckExecutionTimesEnabled">
            <summary>If we need to check the execution times.</summary>
            <returns>True, if we need to check the execution times, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._isCheckExecutionTimesEnabledAsync">
            <summary>If we need to check the execution times.</summary>
            <returns>True, if we need to check the execution times, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._setCheckExecutionTimes(System.Boolean)">
            <summary>Set if we need to check the execution times.</summary>
            <param name="arg0_pause">If we need to check the execution times.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._setCheckExecutionTimesAsync(System.Boolean)">
            <summary>Set if we need to check the execution times.</summary>
            <param name="arg0_pause">If we need to check the execution times.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.AddTagsToWords(System.Object)">
            <summary>Add some new links between tags and words.</summary>
            <param name="arg0_tagsToWords">Map of tags to words.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.AddTagsToWordsAsync(System.Object)">
            <summary>Add some new links between tags and words.</summary>
            <param name="arg0_tagsToWords">Map of tags to words.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.DeclareTagForAnimations(System.Object)">
            <summary>DEPRECATED since 2.2: use ALAnimationPlayer.declareTagForAnimations instead.Declare some tags with the associated animations.</summary>
            <param name="arg0_tagsToAnimations">Map of Tags to Animations.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.DeclareTagForAnimationsAsync(System.Object)">
            <summary>DEPRECATED since 2.2: use ALAnimationPlayer.declareTagForAnimations instead.Declare some tags with the associated animations.</summary>
            <param name="arg0_tagsToAnimations">Map of Tags to Animations.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._diagnosis">
            <summary>Print many debug informations about the current state of animated speech.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._diagnosisAsync">
            <summary>Print many debug informations about the current state of animated speech.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsBodyTalkEnabled">
            <summary>DEPRECATED since 1.18: use getBodyLanguageMode instead.Indicate if the body talk is enabled or not.</summary>
            <returns>The boolean value: true means it is enabled, false means it is disabled.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsBodyTalkEnabledAsync">
            <summary>DEPRECATED since 1.18: use getBodyLanguageMode instead.Indicate if the body talk is enabled or not.</summary>
            <returns>The boolean value: true means it is enabled, false means it is disabled.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsBodyLanguageEnabled">
            <summary>DEPRECATED since 1.22: use getBodyLanguageMode instead.Indicate if the body language is enabled or not.</summary>
            <returns>The boolean value: true means it is enabled, false means it is disabled.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech.IsBodyLanguageEnabledAsync">
            <summary>DEPRECATED since 1.22: use getBodyLanguageMode instead.Indicate if the body language is enabled or not.</summary>
            <returns>The boolean value: true means it is enabled, false means it is disabled.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._getTagList">
            <summary>DEPRECATED since 2.2: will be remove soon.Get tags found on installed animations which are in &quot;animation library&quot;.</summary>
            <returns>The list of tags found.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._getTagListAsync">
            <summary>DEPRECATED since 2.2: will be remove soon.Get tags found on installed animations which are in &quot;animation library&quot;.</summary>
            <returns>The list of tags found.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._getAnimationsByTag(System.String)">
            <summary>DEPRECATED since 2.2: will be remove soon.Get all installed animations for a tag. Currently: animations = &quot;behaviors of the animation library.&quot;</summary>
            <param name="arg0_tag">A tag to filter the list of animations with.</param>
            <returns>The animation list.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._getAnimationsByTagAsync(System.String)">
            <summary>DEPRECATED since 2.2: will be remove soon.Get all installed animations for a tag. Currently: animations = &quot;behaviors of the animation library.&quot;</summary>
            <param name="arg0_tag">A tag to filter the list of animations with.</param>
            <returns>The animation list.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._speechBookMarkCallback(System.String,System.Object,System.String)">
            <summary>Callback for ALMemory subscription for speech bookmark tracking.</summary>
            <param name="arg0_memoryKey">The subscribed memory key which changed.</param>
            <param name="arg1_value">The new value of the memory key.</param>
            <param name="arg2_message">The message that comes with the callback.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._speechBookMarkCallbackAsync(System.String,System.Object,System.String)">
            <summary>Callback for ALMemory subscription for speech bookmark tracking.</summary>
            <param name="arg0_memoryKey">The subscribed memory key which changed.</param>
            <param name="arg1_value">The new value of the memory key.</param>
            <param name="arg2_message">The message that comes with the callback.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._mrkpauseCallback(System.UInt32)">
            <summary>Method called by the tts when &quot;mrkpause&quot; bookmark is reached.This method is blocking until the action is finish.</summary>
            <param name="arg0_pBookmark">Id of the bookmark.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._mrkpauseCallbackAsync(System.UInt32)">
            <summary>Method called by the tts when &quot;mrkpause&quot; bookmark is reached.This method is blocking until the action is finish.</summary>
            <param name="arg0_pBookmark">Id of the bookmark.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._speechStatusCallback(System.String,System.Object,System.String)">
            <summary>Callback for ALMemory subscription for speech status tracking.</summary>
            <param name="arg0_memoryKey">The subscribed memory key which changed.</param>
            <param name="arg1_value">The new value of the memory key.</param>
            <param name="arg2_message">The message that comes with the callback.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._speechStatusCallbackAsync(System.String,System.Object,System.String)">
            <summary>Callback for ALMemory subscription for speech status tracking.</summary>
            <param name="arg0_memoryKey">The subscribed memory key which changed.</param>
            <param name="arg1_value">The new value of the memory key.</param>
            <param name="arg2_message">The message that comes with the callback.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._postureFamilyChangedCallback(System.String,System.Object,System.String)">
            <summary>Callback for ALMemory subscription to postureFamilyChanged.</summary>
            <param name="arg0_memoryKey">The subscribed memory key which changed.</param>
            <param name="arg1_value">The new value of the memory key.</param>
            <param name="arg2_message">The message that comes with the callback.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimatedSpeech._postureFamilyChangedCallbackAsync(System.String,System.Object,System.String)">
            <summary>Callback for ALMemory subscription to postureFamilyChanged.</summary>
            <param name="arg0_memoryKey">The subscribed memory key which changed.</param>
            <param name="arg1_value">The new value of the memory key.</param>
            <param name="arg2_message">The message that comes with the callback.</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALAudioDevice">
            <summary>The ALAudioDevice module allows other modules to access to the sound data of the nao's microphones, and to send sound toward its loudspeakers  The way to receive or send the audio data depends whether the modules are local (dynamic library) or remote (executable).</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAudioDevice.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAudioDevice.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAudioDevice.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALAudioDevice.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Subscribe(System.String)">
            <summary>This function allows a module to subscribe to the ALAudioDevice module.For more informations see the audio part of the red documentation</summary>
            <param name="arg0_pModule">Name of the module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SubscribeAsync(System.String)">
            <summary>This function allows a module to subscribe to the ALAudioDevice module.For more informations see the audio part of the red documentation</summary>
            <param name="arg0_pModule">Name of the module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.Unsubscribe(System.String)">
            <summary>This function allows a module to subscribe to the ALAudioDevice module.For more informations see the audio part of the red documentation</summary>
            <param name="arg0_pModule">Name of the module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.UnsubscribeAsync(System.String)">
            <summary>This function allows a module to subscribe to the ALAudioDevice module.For more informations see the audio part of the red documentation</summary>
            <param name="arg0_pModule">Name of the module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SendLocalBufferToOutput(System.Int32,System.Byte[])">
            <summary>This function allows a local module to send sound onto the nao's loudpseakersYou must pass to this function a pointer to the stereo buffer to send, and the number of frames per channel. The buffer must contain 16bits stereo interleaved samples, and the number of frames does not exceed 16384</summary>
            <param name="arg0_nbOfFrames">Number of 16 bits samples per channel to send.</param>
            <param name="arg1_pBuffer">Buffer to send</param>
            <returns>True if the operation is successfull - False otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SendLocalBufferToOutputAsync(System.Int32,System.Byte[])">
            <summary>This function allows a local module to send sound onto the nao's loudpseakersYou must pass to this function a pointer to the stereo buffer to send, and the number of frames per channel. The buffer must contain 16bits stereo interleaved samples, and the number of frames does not exceed 16384</summary>
            <param name="arg0_nbOfFrames">Number of 16 bits samples per channel to send.</param>
            <param name="arg1_pBuffer">Buffer to send</param>
            <returns>True if the operation is successfull - False otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SendRemoteBufferToOutput(System.Int32,System.Object)">
            <summary>This function allows a remote module to send sound onto the nao's loudpseakersYou must pass to this function the stereo buffer you want to send as an ALValue converted to binary, and the number of frames per channel. The number of frames does not exceed 16384. For more information please see the red documentation</summary>
            <param name="arg0_nbOfFrames">Number of 16 bits samples per channel to send.</param>
            <param name="arg1_pBuffer">Buffer to send</param>
            <returns>True if the operation is successfull - False otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SendRemoteBufferToOutputAsync(System.Int32,System.Object)">
            <summary>This function allows a remote module to send sound onto the nao's loudpseakersYou must pass to this function the stereo buffer you want to send as an ALValue converted to binary, and the number of frames per channel. The number of frames does not exceed 16384. For more information please see the red documentation</summary>
            <param name="arg0_nbOfFrames">Number of 16 bits samples per channel to send.</param>
            <param name="arg1_pBuffer">Buffer to send</param>
            <returns>True if the operation is successfull - False otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetFileAsInput(System.String)">
            <summary>This method allows to send sound samples contained in a sound file at the input of ALAudioDevice, instead of the nao's microphones sound data. The sound file must be a .wav file containing 16bits / 4 channels / interleaved samples. Once the file has been read, microphones sound data will again taken as input</summary>
            <param name="arg0_pFileName">Name of the input file.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetFileAsInputAsync(System.String)">
            <summary>This method allows to send sound samples contained in a sound file at the input of ALAudioDevice, instead of the nao's microphones sound data. The sound file must be a .wav file containing 16bits / 4 channels / interleaved samples. Once the file has been read, microphones sound data will again taken as input</summary>
            <param name="arg0_pFileName">Name of the input file.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetParameter(System.String,System.Int32)">
            <summary>This method sets the specified internal parameter ('outputSampleRate' or 'inputBufferSize')inputBufferSize can bet set to 8192 or 16384. Warning: when speech recognition is running, a buffer size of 8192 is used. Don't change it during the recognition process.outputSampleRate can bet set to 16000 Hz, 22050 Hz, 44100 Hz or 48000 Hz. Warning: if speech synthesis is running, a sample rate of 16000 Hz or 22050 Hz is used (depending of the language). Don't change it during the synthesis process</summary>
            <param name="arg0_pParamName">Name of the parameter to set ('outputSampleRate' or 'inputBufferSize').</param>
            <param name="arg1_pParamValue">The value to which the specified parameter should be set.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetParameterAsync(System.String,System.Int32)">
            <summary>This method sets the specified internal parameter ('outputSampleRate' or 'inputBufferSize')inputBufferSize can bet set to 8192 or 16384. Warning: when speech recognition is running, a buffer size of 8192 is used. Don't change it during the recognition process.outputSampleRate can bet set to 16000 Hz, 22050 Hz, 44100 Hz or 48000 Hz. Warning: if speech synthesis is running, a sample rate of 16000 Hz or 22050 Hz is used (depending of the language). Don't change it during the synthesis process</summary>
            <param name="arg0_pParamName">Name of the parameter to set ('outputSampleRate' or 'inputBufferSize').</param>
            <param name="arg1_pParamValue">The value to which the specified parameter should be set.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetParameter(System.String)">
            <summary>This method returns the specified internal parameter ('outputSampleRate' or 'inputBufferSize'). The value -1 is returned if the specified parameter is not valid.</summary>
            <param name="arg0_pParamName">Name of the parameter to get ('outputSampleRate' or 'inputBufferSize').</param>
            <returns>value of the specified parameter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetParameterAsync(System.String)">
            <summary>This method returns the specified internal parameter ('outputSampleRate' or 'inputBufferSize'). The value -1 is returned if the specified parameter is not valid.</summary>
            <param name="arg0_pParamName">Name of the parameter to get ('outputSampleRate' or 'inputBufferSize').</param>
            <returns>value of the specified parameter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.StartMicrophonesRecording(System.String)">
            <summary>This method allows to record the signal collected on the nao's microphones. You can choose to record only the front microphone in a ogg file, or the 4 microphones in a wav file. In this last case the format of the file is 4 channels, 16 bits little endian, 48 KHz</summary>
            <param name="arg0_pFileName">Name of the file where to record the sound.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.StartMicrophonesRecordingAsync(System.String)">
            <summary>This method allows to record the signal collected on the nao's microphones. You can choose to record only the front microphone in a ogg file, or the 4 microphones in a wav file. In this last case the format of the file is 4 channels, 16 bits little endian, 48 KHz</summary>
            <param name="arg0_pFileName">Name of the file where to record the sound.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.StopMicrophonesRecording">
            <summary>This method stops the recording of the sound collected by the microphones.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.StopMicrophonesRecordingAsync">
            <summary>This method stops the recording of the sound collected by the microphones.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetOutputVolume(System.Int32)">
            <summary>Sets the output sound level of the system.</summary>
            <param name="arg0_volume">Volume [0-100].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetOutputVolumeAsync(System.Int32)">
            <summary>Sets the output sound level of the system.</summary>
            <param name="arg0_volume">Volume [0-100].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetOutputVolume">
            <summary>Gets the output sound level of the system.</summary>
            <returns>outputVolume of the system</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetOutputVolumeAsync">
            <summary>Gets the output sound level of the system.</summary>
            <returns>outputVolume of the system</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.OpenAudioInputs">
            <summary>Opens the audio device for capture. If you closed the audio inputs with the closeAudioInputs method, you must call this method to be able to access to the sound data of the nao's microphones. </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.OpenAudioInputsAsync">
            <summary>Opens the audio device for capture. If you closed the audio inputs with the closeAudioInputs method, you must call this method to be able to access to the sound data of the nao's microphones. </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.OpenAudioOutputs">
            <summary>Opens the audio device for playback. If you closed the audio outputs with the closeAudioOutputs method, you must call this method to ear or send sound onto the nao's loudspeakers.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.OpenAudioOutputsAsync">
            <summary>Opens the audio device for playback. If you closed the audio outputs with the closeAudioOutputs method, you must call this method to ear or send sound onto the nao's loudspeakers.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.CloseAudioInputs">
            <summary>Closes the audio device for capture. You can call this method if you want to have access to the alsa input buffers in another program than naoqi while naoqi is running (with arecord for example)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.CloseAudioInputsAsync">
            <summary>Closes the audio device for capture. You can call this method if you want to have access to the alsa input buffers in another program than naoqi while naoqi is running (with arecord for example)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.CloseAudioOutputs">
            <summary>Closes the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.CloseAudioOutputsAsync">
            <summary>Closes the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.FlushAudioOutputs">
            <summary>Flush the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.FlushAudioOutputsAsync">
            <summary>Flush the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsOutputClosed">
            <summary>Allows to know if audio ouputs are closed or not</summary>
            <returns>True if audio outputs are closed / False otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsOutputClosedAsync">
            <summary>Allows to know if audio ouputs are closed or not</summary>
            <returns>True if audio outputs are closed / False otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsInputClosed">
            <summary>Allows to know if audio inputs are closed or not</summary>
            <returns>True if audio inputs are closed / False otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsInputClosedAsync">
            <summary>Allows to know if audio inputs are closed or not</summary>
            <returns>True if audio inputs are closed / False otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._listOutputs">
            <summary>return the list of available outputs</summary>
            <returns>A list of AudioDeviceInfo</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._listOutputsAsync">
            <summary>return the list of available outputs</summary>
            <returns>A list of AudioDeviceInfo</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._output(System.UInt32)">
            <summary>return the output matching the index</summary>
            <param name="arg0_index">The output index</param>
            <returns>An AudioDeviceInfo</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._outputAsync(System.UInt32)">
            <summary>return the output matching the index</summary>
            <param name="arg0_index">The output index</param>
            <returns>An AudioDeviceInfo</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._defaultOutput">
            <summary>return the default output</summary>
            <returns>The default output index</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._defaultOutputAsync">
            <summary>return the default output</summary>
            <returns>The default output index</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._setDefaultOutput(System.UInt32)">
            <summary>set the default output</summary>
            <param name="arg0_index">The output index</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._setDefaultOutputAsync(System.UInt32)">
            <summary>set the default output</summary>
            <param name="arg0_index">The output index</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._listInputs">
            <summary>return the list of available inputs</summary>
            <returns>A list of AudioDeviceInfo</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._listInputsAsync">
            <summary>return the list of available inputs</summary>
            <returns>A list of AudioDeviceInfo</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._input(System.UInt32)">
            <summary>return the input matching the index</summary>
            <param name="arg0_index">The input index</param>
            <returns>An AudioDeviceInfo</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._inputAsync(System.UInt32)">
            <summary>return the input matching the index</summary>
            <param name="arg0_index">The input index</param>
            <returns>An AudioDeviceInfo</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._defaultInput">
            <summary>return the default input</summary>
            <returns>The default input index</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._defaultInputAsync">
            <summary>return the default input</summary>
            <returns>The default input index</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._setDefaultInput(System.UInt32)">
            <summary>set the default input</summary>
            <param name="arg0_index">The input index</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._setDefaultInputAsync(System.UInt32)">
            <summary>set the default input</summary>
            <param name="arg0_index">The input index</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.PlaySine(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>Play a sine wave which specified caracteristics.</summary>
            <param name="arg0_frequence">Frequence in Hertz</param>
            <param name="arg1_gain">Volume Gain between 0 and 100</param>
            <param name="arg2_pan">Stereo Pan set to either {-1,0,+1}</param>
            <param name="arg3_duration">Duration of the sine wave in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.PlaySineAsync(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>Play a sine wave which specified caracteristics.</summary>
            <param name="arg0_frequence">Frequence in Hertz</param>
            <param name="arg1_gain">Volume Gain between 0 and 100</param>
            <param name="arg2_pan">Stereo Pan set to either {-1,0,+1}</param>
            <param name="arg3_duration">Duration of the sine wave in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.EnableEnergyComputation">
            <summary>Enables the computation of the energy of each microphone signal</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.EnableEnergyComputationAsync">
            <summary>Enables the computation of the energy of each microphone signal</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.DisableEnergyComputation">
            <summary>Disables the computation of the energy of each microphone signal</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.DisableEnergyComputationAsync">
            <summary>Disables the computation of the energy of each microphone signal</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetLeftMicEnergy">
            <summary>Returns the energy of the left microphone signal</summary>
            <returns>energy of the left microphone signal</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetLeftMicEnergyAsync">
            <summary>Returns the energy of the left microphone signal</summary>
            <returns>energy of the left microphone signal</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetRightMicEnergy">
            <summary>Returns the energy of the right microphone signal</summary>
            <returns>energy of the right microphone signal</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetRightMicEnergyAsync">
            <summary>Returns the energy of the right microphone signal</summary>
            <returns>energy of the right microphone signal</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetFrontMicEnergy">
            <summary>Returns the energy of the front microphone signal</summary>
            <returns>energy of the front microphone signal</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetFrontMicEnergyAsync">
            <summary>Returns the energy of the front microphone signal</summary>
            <returns>energy of the front microphone signal</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetRearMicEnergy">
            <summary>Returns the energy of the rear microphone signal</summary>
            <returns>energy of the rear microphone signal</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.GetRearMicEnergyAsync">
            <summary>Returns the energy of the rear microphone signal</summary>
            <returns>energy of the rear microphone signal</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._setInputVolume(System.Int32)">
            <summary>Sets the input level of Nao's microphones.</summary>
            <param name="arg0_volume">Volume [0-100].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._setInputVolumeAsync(System.Int32)">
            <summary>Sets the input level of Nao's microphones.</summary>
            <param name="arg0_volume">Volume [0-100].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetClientPreferences(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Set AudioDevice Client preferences</summary>
            <param name="arg0_name">name of the client</param>
            <param name="arg1_sampleRate">sample rate of the microphones data sent to the process function - must be 16000 or 48000</param>
            <param name="arg2_channelsConfiguration">An int (defined in ALSoundExtractor) indicating which microphones data will be send to the process function. ALLCHANNELS, LEFTCHANNEL, RIGHTCHANNEL, FRONTCHANNEL, REARCHANNEL are the configuration currently supported.</param>
            <param name="arg3_deinterleaved">indicates if the microphones data sent to the process function are interleaved or not - 0 : interleaved - 1 : deinterleaved </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetClientPreferencesAsync(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Set AudioDevice Client preferences</summary>
            <param name="arg0_name">name of the client</param>
            <param name="arg1_sampleRate">sample rate of the microphones data sent to the process function - must be 16000 or 48000</param>
            <param name="arg2_channelsConfiguration">An int (defined in ALSoundExtractor) indicating which microphones data will be send to the process function. ALLCHANNELS, LEFTCHANNEL, RIGHTCHANNEL, FRONTCHANNEL, REARCHANNEL are the configuration currently supported.</param>
            <param name="arg3_deinterleaved">indicates if the microphones data sent to the process function are interleaved or not - 0 : interleaved - 1 : deinterleaved </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetClientPreferences(System.String,System.Int32,System.Object,System.Int32,System.Int32)">
            <summary>Set AudioDevice Client preferences. This function is deprecated, the use of the alternate 4 arguments setClientPreferences() is now prefered.</summary>
            <param name="arg0_name">name of the client</param>
            <param name="arg1_sampleRate">sample rate of the microphones data sent to the processSound or processSoundRemote functions - must be 16000 or 48000</param>
            <param name="arg2_channelsVector">ALValue containing a vector of int indicating which microphones data will be send to the processSound or processSoundRemote functions</param>
            <param name="arg3_deinterleaved">indicates if the microphones data sent to the processSound or processSoundRemote functions are interleaved or not - 0 : interleaved - 1 : deinterleaved </param>
            <param name="arg4_timeStamp">parameter indicating if audio timestamps are sent to the processSound or processSoundRemote functions - 0 : no - 1 : yes </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.SetClientPreferencesAsync(System.String,System.Int32,System.Object,System.Int32,System.Int32)">
            <summary>Set AudioDevice Client preferences. This function is deprecated, the use of the alternate 4 arguments setClientPreferences() is now prefered.</summary>
            <param name="arg0_name">name of the client</param>
            <param name="arg1_sampleRate">sample rate of the microphones data sent to the processSound or processSoundRemote functions - must be 16000 or 48000</param>
            <param name="arg2_channelsVector">ALValue containing a vector of int indicating which microphones data will be send to the processSound or processSoundRemote functions</param>
            <param name="arg3_deinterleaved">indicates if the microphones data sent to the processSound or processSoundRemote functions are interleaved or not - 0 : interleaved - 1 : deinterleaved </param>
            <param name="arg4_timeStamp">parameter indicating if audio timestamps are sent to the processSound or processSoundRemote functions - 0 : no - 1 : yes </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.MuteAudioOut(System.Boolean)">
            <summary>mute the loudspeakers</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.MuteAudioOutAsync(System.Boolean)">
            <summary>mute the loudspeakers</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._muteAudioIn(System.Boolean)">
            <summary>mute the microphones</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._muteAudioInAsync(System.Boolean)">
            <summary>mute the microphones</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsAudioOutMuted">
            <summary>check if loudspeakers are muted</summary>
            <returns>1 if true / 0 otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice.IsAudioOutMutedAsync">
            <summary>check if loudspeakers are muted</summary>
            <returns>1 if true / 0 otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._getNbOfMicrophones">
            <summary>get the number of microphones</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAudioDevice._getNbOfMicrophonesAsync">
            <summary>get the number of microphones</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSoundDetection">
            <summary>This module computes the position (azimuth, elevation) of a sound source detected by ALSoundDetection. When a sound is detected and located, an event is created. One event is created when nao locates a sound source : ALSoundDetection/SoundLocated. ALSoundDetection/SoundLocated : [ [time(sec), time(usec)], [azimuth, elevation, confidence, (optional: energy)] , [Head Position[6D]] ] </summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSoundDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSoundDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSoundDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSoundDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.SetParameter(System.String,System.Object)">
            <summary>Set the specified parameter.</summary>
            <param name="arg0_parameter">Name of the parameter. &quot;Sensibility&quot; between 0 and 1 to adjust the capacity of NAO to locate quiet sounds. &quot;EnergyComputation&quot; (1 or 0) that activates the computation of the located source signal energy. This energy is added in the &quot;ALSoundDetection/SoundLocated&quot; ALMemory key.</param>
            <param name="arg1_value">&quot;Sensibility&quot; : a float in [0,1]. &quot;EnergyComputation&quot; : (1 or 0).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundDetection.SetParameterAsync(System.String,System.Object)">
            <summary>Set the specified parameter.</summary>
            <param name="arg0_parameter">Name of the parameter. &quot;Sensibility&quot; between 0 and 1 to adjust the capacity of NAO to locate quiet sounds. &quot;EnergyComputation&quot; (1 or 0) that activates the computation of the located source signal energy. This energy is added in the &quot;ALSoundDetection/SoundLocated&quot; ALMemory key.</param>
            <param name="arg1_value">&quot;Sensibility&quot; : a float in [0,1]. &quot;EnergyComputation&quot; : (1 or 0).</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSoundLocalization">
            <summary>This module computes the position (azimuth, elevation) of a sound source detected by ALSoundDetection. When a sound is detected and located, an event is created. One event is created when nao locates a sound source : ALSoundLocalization/SoundLocated. ALSoundLocalization/SoundLocated : [ [time(sec), time(usec)], [azimuth, elevation, confidence, (optional: energy)] , [Head Position[6D]] ] </summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSoundLocalization.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSoundLocalization.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSoundLocalization.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSoundLocalization.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.SetParameter(System.String,System.Object)">
            <summary>Set the specified parameter.</summary>
            <param name="arg0_parameter">Name of the parameter. &quot;Sensibility&quot; between 0 and 1 to adjust the capacity of NAO to locate quiet sounds. &quot;EnergyComputation&quot; (1 or 0) that activates the computation of the located source signal energy. This energy is added in the &quot;ALSoundLocalization/SoundLocated&quot; ALMemory key.</param>
            <param name="arg1_value">&quot;Sensibility&quot; : a float in [0,1]. &quot;EnergyComputation&quot; : (1 or 0).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSoundLocalization.SetParameterAsync(System.String,System.Object)">
            <summary>Set the specified parameter.</summary>
            <param name="arg0_parameter">Name of the parameter. &quot;Sensibility&quot; between 0 and 1 to adjust the capacity of NAO to locate quiet sounds. &quot;EnergyComputation&quot; (1 or 0) that activates the computation of the located source signal energy. This energy is added in the &quot;ALSoundLocalization/SoundLocated&quot; ALMemory key.</param>
            <param name="arg1_value">&quot;Sensibility&quot; : a float in [0,1]. &quot;EnergyComputation&quot; : (1 or 0).</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSpeechRecognition">
            <summary>ALSpeechRecognition gives access to the embedded voice recognition system. It can be dynamically modified. This class allows user to load the current words list that should be recognized. The result of the recognition engine is located in the ALMemory's key: &quot;WordRecognized&quot;. The structure of the result is an array :  [ (string) word , (float) confidence ]</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSpeechRecognition.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSpeechRecognition.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSpeechRecognition.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSpeechRecognition.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetVisualExpression(System.Boolean)">
            <summary>Enables or disables the leds animations showing the state of the recognition engine during the recognition process.</summary>
            <param name="arg0_setOrNot">Enable (true) or disable it (false).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetVisualExpressionAsync(System.Boolean)">
            <summary>Enables or disables the leds animations showing the state of the recognition engine during the recognition process.</summary>
            <param name="arg0_setOrNot">Enable (true) or disable it (false).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetVisualExpressionMode(System.Int32)">
            <summary>Sets the LED animation mode</summary>
            <param name="arg0_mode">animation mode: 0: deactivated, 1: eyes, 2: ears, 3: full</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetVisualExpressionModeAsync(System.Int32)">
            <summary>Sets the LED animation mode</summary>
            <param name="arg0_mode">animation mode: 0: deactivated, 1: eyes, 2: ears, 3: full</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetAudioExpression(System.Boolean)">
            <summary>Enables or disables the playing of sounds indicating the state of the recognition engine. If this option is enabled, a sound is played at the beginning of the recognition process (after a call to the subscribe method), and a sound is played when the user call the unsubscribe method</summary>
            <param name="arg0_setOrNot">Enable (true) or disable it (false).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetAudioExpressionAsync(System.Boolean)">
            <summary>Enables or disables the playing of sounds indicating the state of the recognition engine. If this option is enabled, a sound is played at the beginning of the recognition process (after a call to the subscribe method), and a sound is played when the user call the unsubscribe method</summary>
            <param name="arg0_setOrNot">Enable (true) or disable it (false).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetAudioExpression">
            <summary>To check if audio expression is enabled or disabled.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetAudioExpressionAsync">
            <summary>To check if audio expression is enabled or disabled.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetLanguage(System.String)">
            <summary>Sets the language used by the speech recognition engine. The list of the available languages can be collected through the getAvailableLanguages method. If you want to set a language as the default language (loading automatically at module launch), please refer to the web page of the robot.</summary>
            <param name="arg0_languageName">Name of the language in English.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetLanguageAsync(System.String)">
            <summary>Sets the language used by the speech recognition engine. The list of the available languages can be collected through the getAvailableLanguages method. If you want to set a language as the default language (loading automatically at module launch), please refer to the web page of the robot.</summary>
            <param name="arg0_languageName">Name of the language in English.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._setDefaultLanguage(System.String)">
            <summary>Set a language as the default language for the Speech Recognition engine</summary>
            <param name="arg0_pLanguage">The language among those available on your robot as a String</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._setDefaultLanguageAsync(System.String)">
            <summary>Set a language as the default language for the Speech Recognition engine</summary>
            <param name="arg0_pLanguage">The language among those available on your robot as a String</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetLanguage">
            <summary>Returns the current language used by the speech recognition system.</summary>
            <returns>Current language used by the speech recognition engine.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetLanguageAsync">
            <summary>Returns the current language used by the speech recognition system.</summary>
            <returns>Current language used by the speech recognition engine.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetAvailableLanguages">
            <summary>Returns the list of the languages installed on the system.</summary>
            <returns>Array of strings that contains the list of the installed languages.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetAvailableLanguagesAsync">
            <summary>Returns the list of the languages installed on the system.</summary>
            <returns>Array of strings that contains the list of the installed languages.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetParameter(System.String,System.Single)">
            <summary>Sets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be set.The parameters that can be set and the corresponding values are:&quot;Sensitivity&quot; - Values : range is [0.0; 1.0].&quot;Timeout&quot; - Values :  default values 3000 ms. Timeout for the remote recognition&quot;MinimumTrailingSilence&quot; : Values : 0 (no) or 1 (yes) - Applies a High-Pass filter on the input signal - default value is 0.</summary>
            <param name="arg0_paramName">Name of the parameter.</param>
            <param name="arg1_paramValue">Value of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetParameterAsync(System.String,System.Single)">
            <summary>Sets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be set.The parameters that can be set and the corresponding values are:&quot;Sensitivity&quot; - Values : range is [0.0; 1.0].&quot;Timeout&quot; - Values :  default values 3000 ms. Timeout for the remote recognition&quot;MinimumTrailingSilence&quot; : Values : 0 (no) or 1 (yes) - Applies a High-Pass filter on the input signal - default value is 0.</summary>
            <param name="arg0_paramName">Name of the parameter.</param>
            <param name="arg1_paramValue">Value of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetParameter(System.String,System.Boolean)">
            <summary>Sets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be set.The parameters that can be set and the corresponding values are:&quot;Sensitivity&quot; - Values : range is [0.0; 1.0].&quot;Timeout&quot; - Values :  default values 3000 ms. Timeout for the remote recognition&quot;MinimumTrailingSilence&quot; : Values : 0 (no) or 1 (yes) - Applies a High-Pass filter on the input signal - default value is 0.</summary>
            <param name="arg0_paramName">Name of the parameter.</param>
            <param name="arg1_paramValue">Value of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetParameterAsync(System.String,System.Boolean)">
            <summary>Sets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be set.The parameters that can be set and the corresponding values are:&quot;Sensitivity&quot; - Values : range is [0.0; 1.0].&quot;Timeout&quot; - Values :  default values 3000 ms. Timeout for the remote recognition&quot;MinimumTrailingSilence&quot; : Values : 0 (no) or 1 (yes) - Applies a High-Pass filter on the input signal - default value is 0.</summary>
            <param name="arg0_paramName">Name of the parameter.</param>
            <param name="arg1_paramValue">Value of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetParameter(System.String)">
            <summary>Gets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be retrieved</summary>
            <param name="arg0_paramName">Name of the parameter.</param>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetParameterAsync(System.String)">
            <summary>Gets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be retrieved</summary>
            <param name="arg0_paramName">Name of the parameter.</param>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetWordListAsVocabulary(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets the list of words (vocabulary) that should be recognized by the speech recognition engine.</summary>
            <param name="arg0_vocabulary">List of words that should be recognized</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetWordListAsVocabularyAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets the list of words (vocabulary) that should be recognized by the speech recognition engine.</summary>
            <param name="arg0_vocabulary">List of words that should be recognized</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetVocabulary(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Sets the list of words (vocabulary) that should be recognized by the speech recognition engine.</summary>
            <param name="arg0_vocabulary">List of words that should be recognized</param>
            <param name="arg1_enabledWordSpotting">If disabled, the engine expects to hear one of the specified words, nothing more, nothing less. If enabled, the specified words can be pronounced in the middle of a whole speech stream, the engine will try to spot them.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetVocabularyAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Sets the list of words (vocabulary) that should be recognized by the speech recognition engine.</summary>
            <param name="arg0_vocabulary">List of words that should be recognized</param>
            <param name="arg1_enabledWordSpotting">If disabled, the engine expects to hear one of the specified words, nothing more, nothing less. If enabled, the specified words can be pronounced in the middle of a whole speech stream, the engine will try to spot them.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Pause(System.Boolean)">
            <summary>Stops and restarts the speech recognition engine according to the input parameter This can be used to add contexts, activate or deactivate rules of a contex, add a words to a slot.</summary>
            <param name="arg0_pause">Boolean to enable or disable pause of the speech recognition engine.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PauseAsync(System.Boolean)">
            <summary>Stops and restarts the speech recognition engine according to the input parameter This can be used to add contexts, activate or deactivate rules of a contex, add a words to a slot.</summary>
            <param name="arg0_pause">Boolean to enable or disable pause of the speech recognition engine.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.Compile(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.CompileAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.AddContext(System.String,System.String)">
            <summary>Add a context from a LCF file.</summary>
            <param name="arg0_pathToLCFFile">Path to a LCF file. This LCF file contains the set of rules that should be recognized by the speech recognition engine.</param>
            <param name="arg1_contextName">Name of the context of your choice.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.AddContextAsync(System.String,System.String)">
            <summary>Add a context from a LCF file.</summary>
            <param name="arg0_pathToLCFFile">Path to a LCF file. This LCF file contains the set of rules that should be recognized by the speech recognition engine.</param>
            <param name="arg1_contextName">Name of the context of your choice.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RemoveContext(System.String)">
            <summary>Remove one context from the speech recognition engine.</summary>
            <param name="arg0_contextName">Name of the context to remove from the speech recognition engine.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RemoveContextAsync(System.String)">
            <summary>Remove one context from the speech recognition engine.</summary>
            <param name="arg0_contextName">Name of the context to remove from the speech recognition engine.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RemoveAllContext">
            <summary>Remove all contexts from the speech recognition engine.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RemoveAllContextAsync">
            <summary>Remove all contexts from the speech recognition engine.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PushContexts">
            <summary>Disable current contexts of the speech recognition engine and save them in a  stack.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PushContextsAsync">
            <summary>Disable current contexts of the speech recognition engine and save them in a  stack.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PopContexts">
            <summary>Disable current contexts and restore saved contexts of the speech recognition engine.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.PopContextsAsync">
            <summary>Disable current contexts and restore saved contexts of the speech recognition engine.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SaveContextSet(System.String)">
            <summary>Save current context set of the speech recognition engine</summary>
            <param name="arg0_saveName">Name under which to save</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SaveContextSetAsync(System.String)">
            <summary>Save current context set of the speech recognition engine</summary>
            <param name="arg0_saveName">Name under which to save</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.LoadContextSet(System.String)">
            <summary>Load a saved context set of the speech recognition engine</summary>
            <param name="arg0_saveName">Name under which the context set is saved</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.LoadContextSetAsync(System.String)">
            <summary>Load a saved context set of the speech recognition engine</summary>
            <param name="arg0_saveName">Name under which the context set is saved</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.EraseContextSet(System.String)">
            <summary>Erase a saved context set of the speech recognition engine</summary>
            <param name="arg0_saveName">Name under which the context set is saved</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.EraseContextSetAsync(System.String)">
            <summary>Erase a saved context set of the speech recognition engine</summary>
            <param name="arg0_saveName">Name under which the context set is saved</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.ActivateRule(System.String,System.String)">
            <summary>Activate a rule contained in the specified context.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <param name="arg1_ruleName">Name of the rule to activate.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.ActivateRuleAsync(System.String,System.String)">
            <summary>Activate a rule contained in the specified context.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <param name="arg1_ruleName">Name of the rule to activate.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.DeactivateRule(System.String,System.String)">
            <summary>Deactivate a rule contained in the specified context.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <param name="arg1_ruleName">Name of the rule to deactivate.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.DeactivateRuleAsync(System.String,System.String)">
            <summary>Deactivate a rule contained in the specified context.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <param name="arg1_ruleName">Name of the rule to deactivate.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.ActivateAllRules(System.String)">
            <summary>Activate all rules contained in the specified context.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.ActivateAllRulesAsync(System.String)">
            <summary>Activate all rules contained in the specified context.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.DeactivateAllRules(System.String)">
            <summary>Deactivate all rules contained in the specified context.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.DeactivateAllRulesAsync(System.String)">
            <summary>Deactivate all rules contained in the specified context.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetContextParam(System.String,System.String,System.Single)">
            <summary>Set the given parameter for the specified context.</summary>
            <param name="arg0_contextName">Name of the context</param>
            <param name="arg1_paramName">Name of the parameter to change</param>
            <param name="arg2_value">New parameter value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.SetContextParamAsync(System.String,System.String,System.Single)">
            <summary>Set the given parameter for the specified context.</summary>
            <param name="arg0_contextName">Name of the context</param>
            <param name="arg1_paramName">Name of the parameter to change</param>
            <param name="arg2_value">New parameter value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetContextParam(System.String,System.String)">
            <summary>Get the given parameter for the specified context.</summary>
            <param name="arg0_contextName">Name of the context</param>
            <param name="arg1_paramName">Name of the parameter to get</param>
            <returns>Value of the fetched parameter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetContextParamAsync(System.String,System.String)">
            <summary>Get the given parameter for the specified context.</summary>
            <param name="arg0_contextName">Name of the context</param>
            <param name="arg1_paramName">Name of the parameter to get</param>
            <returns>Value of the fetched parameter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.AddWordListToSlot(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Add a list of words in a slot. A slot is a part of a context which can be modified. You can add a list of words that should be recognized by the speech recognition engine</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <param name="arg1_slotName">Name of the slot to modify.</param>
            <param name="arg2_wordList">List of words to insert in the slot.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.AddWordListToSlotAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Add a list of words in a slot. A slot is a part of a context which can be modified. You can add a list of words that should be recognized by the speech recognition engine</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <param name="arg1_slotName">Name of the slot to modify.</param>
            <param name="arg2_wordList">List of words to insert in the slot.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RemoveWordListFromSlot(System.String,System.String)">
            <summary>Remove all words from a slot.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <param name="arg1_slotName">Name of the slot to modify.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.RemoveWordListFromSlotAsync(System.String,System.String)">
            <summary>Remove all words from a slot.</summary>
            <param name="arg0_contextName">Name of the context to modify.</param>
            <param name="arg1_slotName">Name of the slot to modify.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetRules(System.String,System.String)">
            <summary>Get all rules contained for a specific context.</summary>
            <param name="arg0_contextName">Name of the context to analyze.</param>
            <param name="arg1_typeName">Type of the required rules.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.GetRulesAsync(System.String,System.String)">
            <summary>Get all rules contained for a specific context.</summary>
            <param name="arg0_contextName">Name of the context to analyze.</param>
            <param name="arg1_typeName">Type of the required rules.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._isFreeSpeechToTextAvailable">
            <summary>Enable free speech to text.</summary>
            <returns>Boolean indicating whether free speech to text is available for the current language</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._isFreeSpeechToTextAvailableAsync">
            <summary>Enable free speech to text.</summary>
            <returns>Boolean indicating whether free speech to text is available for the current language</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._enableFreeSpeechToText">
            <summary>Enable free speech to text.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._enableFreeSpeechToTextAsync">
            <summary>Enable free speech to text.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._disableFreeSpeechToText">
            <summary>Disable free speech to text.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._disableFreeSpeechToTextAsync">
            <summary>Disable free speech to text.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._remoteConsumptionOk">
            <summary>Get a remote consumption speed change recommendation.</summary>
            <returns>Integer indicating whether to increase, decrease or keep the remote consumption speed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._remoteConsumptionOkAsync">
            <summary>Get a remote consumption speed change recommendation.</summary>
            <returns>Integer indicating whether to increase, decrease or keep the remote consumption speed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.LoadVocabulary(System.String)">
            <summary>Loads the vocabulary to recognized contained in a .lxd file. This method is not available with the ASR engine language set to Chinese. For more informations see the red documentation</summary>
            <param name="arg0_vocabularyFile">Name of the lxd file containing the vocabulary</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition.LoadVocabularyAsync(System.String)">
            <summary>Loads the vocabulary to recognized contained in a .lxd file. This method is not available with the ASR engine language set to Chinese. For more informations see the red documentation</summary>
            <param name="arg0_vocabularyFile">Name of the lxd file containing the vocabulary</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._naoStoreApplicationInstalled(System.String,System.Object,System.String)">
            <summary>reload the engine if new application installed is a language</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._naoStoreApplicationInstalledAsync(System.String,System.Object,System.String)">
            <summary>reload the engine if new application installed is a language</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._naoStoreApplicationUninstalled(System.String,System.Object,System.String)">
            <summary>reload the engine if application uninstalled is a language</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._naoStoreApplicationUninstalledAsync(System.String,System.Object,System.String)">
            <summary>reload the engine if application uninstalled is a language</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._systemSoundSetChanged">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._systemSoundSetChangedAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._enableRealTimeThread(System.Boolean)">
            <summary>Set the ASR_Recognizer thread to real time priority. Be careful this could change the scheduling of the robot.</summary>
            <param name="arg0_isRealTime">True or False to enable or disable real time priority.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._enableRealTimeThreadAsync(System.Boolean)">
            <summary>Set the ASR_Recognizer thread to real time priority. Be careful this could change the scheduling of the robot.</summary>
            <param name="arg0_isRealTime">True or False to enable or disable real time priority.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._silentNextBipOn">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._silentNextBipOnAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._silentNextBipOff">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._silentNextBipOffAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._enableAudioLogging(System.String)">
            <summary>Enable audio dumps.</summary>
            <param name="arg0_path">Path to write the dump files to. Pass an empty string to deactivate audio logging</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._enableAudioLoggingAsync(System.String)">
            <summary>Enable audio dumps.</summary>
            <param name="arg0_path">Path to write the dump files to. Pass an empty string to deactivate audio logging</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._enableBeamformer">
            <summary>Enable beamformer.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._enableBeamformerAsync">
            <summary>Enable beamformer.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._disableBeamformer">
            <summary>Disable beamformer.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._disableBeamformerAsync">
            <summary>Disable beamformer.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._beamformerEnabled">
            <summary>Get beamformer status.</summary>
            <returns>Whether the beamformer is enabled or not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._beamformerEnabledAsync">
            <summary>Get beamformer status.</summary>
            <returns>Whether the beamformer is enabled or not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._getVersion">
            <summary>get vocon version</summary>
            <returns>Version</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeechRecognition._getVersionAsync">
            <summary>get vocon version</summary>
            <returns>Version</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALTextToSpeech">
            <summary>This module embeds a speech synthetizer whose role is to convert text commands into sound waves that are then either sent to Nao's loudspeakers or written into a file. This service supports several languages and some parameters of the synthetizer can be tuned to change each language's synthetic voice.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTextToSpeech.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTextToSpeech.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTextToSpeech.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALTextToSpeech.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Say(System.String)">
            <summary>Performs the text-to-speech operations : it takes a std::string as input and outputs a sound in both speakers. String encoding must be UTF8.</summary>
            <param name="arg0_stringToSay">Text to say, encoded in UTF-8.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SayAsync(System.String)">
            <summary>Performs the text-to-speech operations : it takes a std::string as input and outputs a sound in both speakers. String encoding must be UTF8.</summary>
            <param name="arg0_stringToSay">Text to say, encoded in UTF-8.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Say(System.String,System.String)">
            <summary>Performs the text-to-speech operations in a specific language: it takes a std::string as input and outputs a sound in both speakers. String encoding must be UTF8. Once the text is said, the language is set back to its initial value.</summary>
            <param name="arg0_stringToSay">Text to say, encoded in UTF-8.</param>
            <param name="arg1_language">Language used to say the text.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SayAsync(System.String,System.String)">
            <summary>Performs the text-to-speech operations in a specific language: it takes a std::string as input and outputs a sound in both speakers. String encoding must be UTF8. Once the text is said, the language is set back to its initial value.</summary>
            <param name="arg0_stringToSay">Text to say, encoded in UTF-8.</param>
            <param name="arg1_language">Language used to say the text.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SayToFile(System.String,System.String)">
            <summary>Performs the text-to-speech operations: it takes a std::string as input and outputs the corresponding audio signal in the specified file.</summary>
            <param name="arg0_pStringToSay">Text to say, encoded in UTF-8.</param>
            <param name="arg1_pFileName">RAW file where to store the generated signal. The signal is encoded with a sample rate of 22050Hz, format S16_LE, 2 channels.</param>
            <returns>Id of the task. Can be used to interrupt it.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SayToFileAsync(System.String,System.String)">
            <summary>Performs the text-to-speech operations: it takes a std::string as input and outputs the corresponding audio signal in the specified file.</summary>
            <param name="arg0_pStringToSay">Text to say, encoded in UTF-8.</param>
            <param name="arg1_pFileName">RAW file where to store the generated signal. The signal is encoded with a sample rate of 22050Hz, format S16_LE, 2 channels.</param>
            <returns>Id of the task. Can be used to interrupt it.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.StopAll">
            <summary>This method stops the current and all the pending tasks immediately.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.StopAllAsync">
            <summary>This method stops the current and all the pending tasks immediately.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetLanguage(System.String)">
            <summary>Changes the language used by the Text-to-Speech engine. It automatically changes the voice used since each of them is related to a unique language. If you want that change to take effect automatically after reboot of your robot, refer to the robot web page (setting page).</summary>
            <param name="arg0_pLanguage">Language name. Must belong to the languages available in TTS (can be obtained with the getAvailableLanguages method).  It should be an identifier std::string.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetLanguageAsync(System.String)">
            <summary>Changes the language used by the Text-to-Speech engine. It automatically changes the voice used since each of them is related to a unique language. If you want that change to take effect automatically after reboot of your robot, refer to the robot web page (setting page).</summary>
            <param name="arg0_pLanguage">Language name. Must belong to the languages available in TTS (can be obtained with the getAvailableLanguages method).  It should be an identifier std::string.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetLanguage">
            <summary>Returns the language currently used by the text-to-speech engine.</summary>
            <returns>Language of the current voice.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetLanguageAsync">
            <summary>Returns the language currently used by the text-to-speech engine.</summary>
            <returns>Language of the current voice.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetAvailableLanguages">
            <summary>Outputs the languages installed on the system.</summary>
            <returns>Array of std::string that contains the languages installed on the system.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetAvailableLanguagesAsync">
            <summary>Outputs the languages installed on the system.</summary>
            <returns>Array of std::string that contains the languages installed on the system.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetSupportedLanguages">
            <summary>Outputs all the languages supported (may be installed or not).</summary>
            <returns>Array of std::string that contains all the supported languages (may be installed or not).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetSupportedLanguagesAsync">
            <summary>Outputs all the languages supported (may be installed or not).</summary>
            <returns>Array of std::string that contains all the supported languages (may be installed or not).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.ResetSpeed">
            <summary>Changes the parameters of the voice. For now, it is only possible to reset the voice speed.</summary>
            <returns>(int) &gt;= 0 if successful, negative error code if failed Vincent : pas sûr que cette fonction balance un truc en sortie</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.ResetSpeedAsync">
            <summary>Changes the parameters of the voice. For now, it is only possible to reset the voice speed.</summary>
            <returns>(int) &gt;= 0 if successful, negative error code if failed Vincent : pas sûr que cette fonction balance un truc en sortie</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetParameter(System.String,System.Single)">
            <summary>Changes the parameters of the voice. The available parameters are:  	 pitchShift: applies a pitch shifting to the voice. The value indicates the ratio between the new fundamental frequencies and the old ones (examples: 2.0: an octave above, 1.5: a quint above). Correct range is (1.0 -- 4), or 0 to disable effect. 	 doubleVoice: adds a second voice to the first one. The value indicates the ratio between the second voice fundamental frequency and the first one. Correct range is (1.0 -- 4), or 0 to disable effect  	 doubleVoiceLevel: the corresponding value is the level of the double voice (1.0: equal to the main voice one). Correct range is (0 -- 4).  	 doubleVoiceTimeShift: the corresponding value is the delay between the double voice and the main one. Correct range is (0 -- 0.5)  If the effect value is not available, the effect parameter remains unchanged.</summary>
            <param name="arg0_pEffectName">Name of the parameter.</param>
            <param name="arg1_pEffectValue">Value of the parameter.</param>
            <returns>(int) &gt;= 0 if successful, negative error code if failed Vincent : pas sûr que cette fonction balance un truc en sortie</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetParameterAsync(System.String,System.Single)">
            <summary>Changes the parameters of the voice. The available parameters are:  	 pitchShift: applies a pitch shifting to the voice. The value indicates the ratio between the new fundamental frequencies and the old ones (examples: 2.0: an octave above, 1.5: a quint above). Correct range is (1.0 -- 4), or 0 to disable effect. 	 doubleVoice: adds a second voice to the first one. The value indicates the ratio between the second voice fundamental frequency and the first one. Correct range is (1.0 -- 4), or 0 to disable effect  	 doubleVoiceLevel: the corresponding value is the level of the double voice (1.0: equal to the main voice one). Correct range is (0 -- 4).  	 doubleVoiceTimeShift: the corresponding value is the delay between the double voice and the main one. Correct range is (0 -- 0.5)  If the effect value is not available, the effect parameter remains unchanged.</summary>
            <param name="arg0_pEffectName">Name of the parameter.</param>
            <param name="arg1_pEffectValue">Value of the parameter.</param>
            <returns>(int) &gt;= 0 if successful, negative error code if failed Vincent : pas sûr que cette fonction balance un truc en sortie</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetParameter(System.String)">
            <summary>Returns the value of one of the voice parameters. The available parameters are: &quot;pitchShift&quot;, &quot;doubleVoice&quot;,&quot;doubleVoiceLevel&quot; and &quot;doubleVoiceTimeShift&quot;</summary>
            <param name="arg0_pParameterName">Name of the parameter.</param>
            <returns>Value of the specified parameter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetParameterAsync(System.String)">
            <summary>Returns the value of one of the voice parameters. The available parameters are: &quot;pitchShift&quot;, &quot;doubleVoice&quot;,&quot;doubleVoiceLevel&quot; and &quot;doubleVoiceTimeShift&quot;</summary>
            <param name="arg0_pParameterName">Name of the parameter.</param>
            <returns>Value of the specified parameter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetVoice(System.String)">
            <summary>Changes the voice used by the text-to-speech engine. The voice identifier must belong to the installed voices, that can be listed using the 'getAvailableVoices' method. If the voice is not available, it remains unchanged. No exception is thrown in this case. For the time being, only two voices are available by default : Kenny22Enhanced (English voice) and Julie22Enhanced (French voice)</summary>
            <param name="arg0_pVoiceID">The voice (as a std::string).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetVoiceAsync(System.String)">
            <summary>Changes the voice used by the text-to-speech engine. The voice identifier must belong to the installed voices, that can be listed using the 'getAvailableVoices' method. If the voice is not available, it remains unchanged. No exception is thrown in this case. For the time being, only two voices are available by default : Kenny22Enhanced (English voice) and Julie22Enhanced (French voice)</summary>
            <param name="arg0_pVoiceID">The voice (as a std::string).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetVoice">
            <summary>Returns the voice currently used by the text-to-speech engine.</summary>
            <returns>Name of the current voice</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetVoiceAsync">
            <summary>Returns the voice currently used by the text-to-speech engine.</summary>
            <returns>Name of the current voice</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetAvailableVoices">
            <summary>Outputs the available voices. The returned list contains the voice IDs.</summary>
            <returns> Array of std::string containing the voices installed on the system.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetAvailableVoicesAsync">
            <summary>Outputs the available voices. The returned list contains the voice IDs.</summary>
            <returns> Array of std::string containing the voices installed on the system.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetVolume(System.Single)">
            <summary>Sets the volume of text-to-speech output.</summary>
            <param name="arg0_volume">Volume (between 0.0 and 1.0).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetVolumeAsync(System.Single)">
            <summary>Sets the volume of text-to-speech output.</summary>
            <param name="arg0_volume">Volume (between 0.0 and 1.0).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetVolume">
            <summary>Fetches the current volume the text to speech.</summary>
            <returns>Volume (integer between 0 and 100).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.GetVolumeAsync">
            <summary>Fetches the current volume the text to speech.</summary>
            <returns>Volume (integer between 0 and 100).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Locale">
            <summary>Get the locale associate to the current language.</summary>
            <returns>A string with xx_XX format (region_country)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.LocaleAsync">
            <summary>Get the locale associate to the current language.</summary>
            <returns>A string with xx_XX format (region_country)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.LoadVoicePreference(System.String)">
            <summary>Loads a set of voice parameters defined in a xml file contained in the preferences folder.The name of the xml file must begin with ALTextToSpeech_Voice_ </summary>
            <param name="arg0_pPreferenceName">Name of the voice preference.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.LoadVoicePreferenceAsync(System.String)">
            <summary>Loads a set of voice parameters defined in a xml file contained in the preferences folder.The name of the xml file must begin with ALTextToSpeech_Voice_ </summary>
            <param name="arg0_pPreferenceName">Name of the voice preference.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._setDefaultLanguage(System.String)">
            <summary>Sets a language as the default language for the synthesis engine</summary>
            <param name="arg0_Language">The language among those available on your robot as a String</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._setDefaultLanguageAsync(System.String)">
            <summary>Sets a language as the default language for the synthesis engine</summary>
            <param name="arg0_Language">The language among those available on your robot as a String</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetLanguageDefaultVoice(System.String,System.String)">
            <summary>Sets a voice as the default voice for the corresponding language</summary>
            <param name="arg0_Language">The language among those available on your robot as a String</param>
            <param name="arg1_Voice">The voice among those available on your robot as a String</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.SetLanguageDefaultVoiceAsync(System.String,System.String)">
            <summary>Sets a voice as the default voice for the corresponding language</summary>
            <param name="arg0_Language">The language among those available on your robot as a String</param>
            <param name="arg1_Voice">The voice among those available on your robot as a String</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._setDefaultVoice">
            <summary>Sets the default voice for the current language, if there's one.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._setDefaultVoiceAsync">
            <summary>Sets the default voice for the current language, if there's one.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._naoStoreApplicationInstalled(System.String,System.Object,System.String)">
            <summary>reload the engine if new application installed is a language</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._naoStoreApplicationInstalledAsync(System.String,System.Object,System.String)">
            <summary>reload the engine if new application installed is a language</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._naoStoreApplicationUninstalled(System.String,System.Object,System.String)">
            <summary>reload the engine if application uninstalled is a language</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._naoStoreApplicationUninstalledAsync(System.String,System.Object,System.String)">
            <summary>reload the engine if application uninstalled is a language</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._pause">
            <summary>Pause the current synthesis</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._pauseAsync">
            <summary>Pause the current synthesis</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._resume">
            <summary>Resume the current synthesis</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._resumeAsync">
            <summary>Resume the current synthesis</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._enableFilter(System.Boolean)">
            <summary>Enables the filtering of audio output</summary>
            <param name="arg0_enable">activate or not</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._enableFilterAsync(System.Boolean)">
            <summary>Enables the filtering of audio output</summary>
            <param name="arg0_enable">activate or not</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._loadEffect(System.String)">
            <summary>Load an effect on the voice.</summary>
            <param name="arg0_effectPath">path to the file of the effect to load.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._loadEffectAsync(System.String)">
            <summary>Load an effect on the voice.</summary>
            <param name="arg0_effectPath">path to the file of the effect to load.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._applyEffect(System.String,System.Boolean)">
            <summary>Enables the filtering of audio output</summary>
            <param name="arg0_effectName">name of the effect</param>
            <param name="arg1_enable">activate or not</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._applyEffectAsync(System.String,System.Boolean)">
            <summary>Enables the filtering of audio output</summary>
            <param name="arg0_effectName">name of the effect</param>
            <param name="arg1_enable">activate or not</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._diagnosis">
            <summary>Logs info about the current state of the TTS.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._diagnosisAsync">
            <summary>Logs info about the current state of the TTS.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._showVoiceSettings">
            <summary>Logs voice settings.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._showVoiceSettingsAsync">
            <summary>Logs voice settings.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.ShowDictionary">
            <summary>Shows the Dictionary.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.ShowDictionaryAsync">
            <summary>Shows the Dictionary.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.Reset">
            <summary>Reset ALTextToSpeech to his default state.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.ResetAsync">
            <summary>Reset ALTextToSpeech to his default state.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._unloadDictionary">
            <summary>Unload the dictionary.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._unloadDictionaryAsync">
            <summary>Unload the dictionary.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.DeleteFromDictionary(System.String,System.String)">
            <summary>Unload the dictionary.</summary>
            <param name="arg0_word">the word you wish to delete, does not have to be in japanese.</param>
            <param name="arg1"></param>
            <returns>bool: true if succeeded, false if failed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.DeleteFromDictionaryAsync(System.String,System.String)">
            <summary>Unload the dictionary.</summary>
            <param name="arg0_word">the word you wish to delete, does not have to be in japanese.</param>
            <param name="arg1"></param>
            <returns>bool: true if succeeded, false if failed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.DeleteFromDictionary(System.String)">
            <summary>Unload the dictionary.</summary>
            <param name="arg0_word">the word you wish to delete, does not have to be in japanese.</param>
            <returns>bool: true if succeeded, false if failed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.DeleteFromDictionaryAsync(System.String)">
            <summary>Unload the dictionary.</summary>
            <param name="arg0_word">the word you wish to delete, does not have to be in japanese.</param>
            <returns>bool: true if succeeded, false if failed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.AddToDictionary(System.String,System.String,System.String,System.String,System.String)">
            <summary>Add a word to the library</summary>
            <param name="arg0_type">the type of word you wish to insert, does not have to be in japanese.</param>
            <param name="arg1_word">the word you wish to insert, does not have to be in japanese.</param>
            <param name="arg2_priority">the priority of the word.</param>
            <param name="arg3_phonetic">the phonetic pronouciation in KATAKANA.</param>
            <param name="arg4_accent">syllabus and accentuation</param>
            <returns>bool: true if succeeded, false if failed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.AddToDictionaryAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>Add a word to the library</summary>
            <param name="arg0_type">the type of word you wish to insert, does not have to be in japanese.</param>
            <param name="arg1_word">the word you wish to insert, does not have to be in japanese.</param>
            <param name="arg2_priority">the priority of the word.</param>
            <param name="arg3_phonetic">the phonetic pronouciation in KATAKANA.</param>
            <param name="arg4_accent">syllabus and accentuation</param>
            <returns>bool: true if succeeded, false if failed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.AddToDictionary(System.String,System.String)">
            <summary>Add a word to the library</summary>
            <param name="arg0_text">the text you wish to insert.</param>
            <param name="arg1_toReplace">text to replace.</param>
            <returns>bool: true if succeeded, false if failed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech.AddToDictionaryAsync(System.String,System.String)">
            <summary>Add a word to the library</summary>
            <param name="arg0_text">the text you wish to insert.</param>
            <param name="arg1_toReplace">text to replace.</param>
            <returns>bool: true if succeeded, false if failed</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._loadDictionary">
            <summary>TODO</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTextToSpeech._loadDictionaryAsync">
            <summary>TODO</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis">
            <summary>This module tries to detect emotions in the voice of the speaker.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis._onSpeechDetected(System.String,System.Object)">
            <summary>sound detected callback</summary>
            <param name="arg0_key">ALMemory key.</param>
            <param name="arg1_value">ALValue of key.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis._onSpeechDetectedAsync(System.String,System.Object)">
            <summary>sound detected callback</summary>
            <param name="arg0_key">ALMemory key.</param>
            <param name="arg1_value">ALValue of key.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.SetParameter(System.String,System.Object)">
            <summary>Set the specified parameter.</summary>
            <param name="arg0_parameter">Name of the parameter. &quot;MinSignalLength&quot; Minimum length (in seconds, positive) required for the analysis of a voice signal</param>
            <param name="arg1_value">&quot;MinSignalLength&quot; : int &gt; 0.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVoiceEmotionAnalysis.SetParameterAsync(System.String,System.Object)">
            <summary>Set the specified parameter.</summary>
            <param name="arg0_parameter">Name of the parameter. &quot;MinSignalLength&quot; Minimum length (in seconds, positive) required for the analysis of a voice signal</param>
            <param name="arg1_value">&quot;MinSignalLength&quot; : int &gt; 0.</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALBehaviorManager">
            <summary>This module is intended to manage behaviors. With this module, you can load, start, stop behaviors, add default behaviors or remove them. </summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBehaviorManager.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBehaviorManager.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBehaviorManager.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALBehaviorManager.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PreloadBehavior(System.String)">
            <summary>Load a behavior</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PreloadBehaviorAsync(System.String)">
            <summary>Load a behavior</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StartBehavior(System.String)">
            <summary>Starts a behavior, returns when started.</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StartBehaviorAsync(System.String)">
            <summary>Starts a behavior, returns when started.</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.RunBehavior(System.String)">
            <summary>Runs a behavior, returns when finished</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.RunBehaviorAsync(System.String)">
            <summary>Runs a behavior, returns when finished</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StopBehavior(System.String)">
            <summary>Stop a behavior</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StopBehaviorAsync(System.String)">
            <summary>Stop a behavior</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StopAllBehaviors">
            <summary>Stop all behaviors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.StopAllBehaviorsAsync">
            <summary>Stop all behaviors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsBehaviorInstalled(System.String)">
            <summary>Tell if supplied name corresponds to a behavior that has been installed</summary>
            <param name="arg0_name">The behavior directory name</param>
            <returns>Returns true if it is a valid behavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsBehaviorInstalledAsync(System.String)">
            <summary>Tell if supplied name corresponds to a behavior that has been installed</summary>
            <param name="arg0_name">The behavior directory name</param>
            <returns>Returns true if it is a valid behavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsBehaviorPresent(System.String)">
            <summary>Tell if the supplied namecorresponds to an existing behavior.</summary>
            <param name="arg0_prefixedBehavior">Prefixed behavior or just behavior's name (latter usage deprecated, in this case the behavior is searched for amongst user's behaviors, then in system behaviors) DEPRECATED in favor of ALBehaviorManager.isBehaviorInstalled.</param>
            <returns>Returns true if it is an existing behavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsBehaviorPresentAsync(System.String)">
            <summary>Tell if the supplied namecorresponds to an existing behavior.</summary>
            <param name="arg0_prefixedBehavior">Prefixed behavior or just behavior's name (latter usage deprecated, in this case the behavior is searched for amongst user's behaviors, then in system behaviors) DEPRECATED in favor of ALBehaviorManager.isBehaviorInstalled.</param>
            <returns>Returns true if it is an existing behavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBehaviorNames">
            <summary>Get behaviors</summary>
            <returns>Returns the list of behaviors prefixed by their type (User/ or System/). DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBehaviorNamesAsync">
            <summary>Get behaviors</summary>
            <returns>Returns the list of behaviors prefixed by their type (User/ or System/). DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetUserBehaviorNames">
            <summary>Get user's behaviors</summary>
            <returns>Returns the list of user's behaviors prefixed by User/. DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetUserBehaviorNamesAsync">
            <summary>Get user's behaviors</summary>
            <returns>Returns the list of user's behaviors prefixed by User/. DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetSystemBehaviorNames">
            <summary>Get system behaviors</summary>
            <returns>Returns the list of system behaviors prefixed by System/. DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetSystemBehaviorNamesAsync">
            <summary>Get system behaviors</summary>
            <returns>Returns the list of system behaviors prefixed by System/. DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetInstalledBehaviors">
            <summary>Get installed behaviors directories names</summary>
            <returns>Returns the behaviors list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetInstalledBehaviorsAsync">
            <summary>Get installed behaviors directories names</summary>
            <returns>Returns the behaviors list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBehaviorsByTag(System.String)">
            <summary>Get installed behaviors directories names and filter it by tag.</summary>
            <param name="arg0_tag">A tag to filter the list with.</param>
            <returns>Returns the behaviors list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBehaviorsByTagAsync(System.String)">
            <summary>Get installed behaviors directories names and filter it by tag.</summary>
            <param name="arg0_tag">A tag to filter the list with.</param>
            <returns>Returns the behaviors list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsBehaviorRunning(System.String)">
            <summary>Tell if supplied name corresponds to a running behavior</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns>Returns true if it is a running behavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsBehaviorRunningAsync(System.String)">
            <summary>Tell if supplied name corresponds to a running behavior</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns>Returns true if it is a running behavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsBehaviorLoaded(System.String)">
            <summary>Tell if supplied name corresponds to a loaded behavior</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns>Returns true if it is a loaded behavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.IsBehaviorLoadedAsync(System.String)">
            <summary>Tell if supplied name corresponds to a loaded behavior</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns>Returns true if it is a loaded behavior</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetRunningBehaviors">
            <summary>Get running behaviors</summary>
            <returns>Return running behaviors</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetRunningBehaviorsAsync">
            <summary>Get running behaviors</summary>
            <returns>Return running behaviors</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetLoadedBehaviors">
            <summary>Get loaded behaviors</summary>
            <returns>Return loaded behaviors</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetLoadedBehaviorsAsync">
            <summary>Get loaded behaviors</summary>
            <returns>Return loaded behaviors</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetTagList">
            <summary>Get tags found on installed behaviors.</summary>
            <returns>The list of tags found.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetTagListAsync">
            <summary>Get tags found on installed behaviors.</summary>
            <returns>The list of tags found.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBehaviorTags(System.String)">
            <summary>Get tags found on the given behavior.</summary>
            <param name="arg0_behavior">The local path towards a behavior or a directory.</param>
            <returns>The list of tags found.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBehaviorTagsAsync(System.String)">
            <summary>Get tags found on the given behavior.</summary>
            <param name="arg0_behavior">The local path towards a behavior or a directory.</param>
            <returns>The list of tags found.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBehaviorNature(System.String)">
            <summary>Get the nature of the given behavior.</summary>
            <param name="arg0_behavior">The local path towards a behavior or a directory.</param>
            <returns>The nature of the behavior.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetBehaviorNatureAsync(System.String)">
            <summary>Get the nature of the given behavior.</summary>
            <param name="arg0_behavior">The local path towards a behavior or a directory.</param>
            <returns>The nature of the behavior.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager._getBehaviorRelativePath(System.String)">
            <summary>Get the relative path of a running behavior inside its package.</summary>
            <param name="arg0_behaviorId">The ID of the behavior.</param>
            <returns>The relative path of the behavior.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager._getBehaviorRelativePathAsync(System.String)">
            <summary>Get the relative path of a running behavior inside its package.</summary>
            <param name="arg0_behaviorId">The ID of the behavior.</param>
            <returns>The relative path of the behavior.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager._getPackageUid(System.String)">
            <summary>Get the package UID of a running behavior.</summary>
            <param name="arg0_behaviorId">The ID of the behavior.</param>
            <returns>The package UID of the behavior.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager._getPackageUidAsync(System.String)">
            <summary>Get the package UID of a running behavior.</summary>
            <param name="arg0_behaviorId">The ID of the behavior.</param>
            <returns>The package UID of the behavior.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.AddDefaultBehavior(System.String)">
            <summary>Set the given behavior as default</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.AddDefaultBehaviorAsync(System.String)">
            <summary>Set the given behavior as default</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.RemoveDefaultBehavior(System.String)">
            <summary>Remove the given behavior from the default behaviors</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.RemoveDefaultBehaviorAsync(System.String)">
            <summary>Remove the given behavior from the default behaviors</summary>
            <param name="arg0_behavior">Behavior name </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetDefaultBehaviors">
            <summary>Get default behaviors</summary>
            <returns>Return default behaviors</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.GetDefaultBehaviorsAsync">
            <summary>Get default behaviors</summary>
            <returns>Return default behaviors</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PlayDefaultProject">
            <summary>Play default behaviors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.PlayDefaultProjectAsync">
            <summary>Play default behaviors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager._onDataChanged(System.String,System.Object,System.String)">
            <summary>Be notified when something we have subscribe to has changed in ALMemory</summary>
            <param name="arg0_dataName">name of the data</param>
            <param name="arg1_dataValue">value of the data</param>
            <param name="arg2_message">callback message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager._onDataChangedAsync(System.String,System.Object,System.String)">
            <summary>Be notified when something we have subscribe to has changed in ALMemory</summary>
            <param name="arg0_dataName">name of the data</param>
            <param name="arg1_dataValue">value of the data</param>
            <param name="arg2_message">callback message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager._getBehaviorFrameManagerId(System.String)">
            <summary>get the FrameManagerID. INTERNAL</summary>
            <param name="arg0_name">name of choregraphe project</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager._getBehaviorFrameManagerIdAsync(System.String)">
            <summary>get the FrameManagerID. INTERNAL</summary>
            <param name="arg0_name">name of choregraphe project</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.ResolveBehaviorName(System.String)">
            <summary>Find out the actual &lt;package&gt;/&lt;behavior&gt; path behind a behavior name.</summary>
            <param name="arg0_name">name of a behavior</param>
            <returns>The actual &lt;package&gt;/&lt;behavior&gt; path if found, else an empty string. Throws an ALERROR if two behavior names conflicted.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBehaviorManager.ResolveBehaviorNameAsync(System.String)">
            <summary>Find out the actual &lt;package&gt;/&lt;behavior&gt; path behind a behavior name.</summary>
            <param name="arg0_name">name of a behavior</param>
            <returns>The actual &lt;package&gt;/&lt;behavior&gt; path if found, else an empty string. Throws an ALERROR if two behavior names conflicted.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALConnectionManager">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALConnectionManager.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALConnectionManager.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALConnectionManager.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALConnectionManager.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Services">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ServicesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Service(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ServiceAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Scan(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ScanAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Scan">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ScanAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.SetServiceConfiguration(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.SetServiceConfigurationAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.SetServiceInput(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.SetServiceInputAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.State">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.StateAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Forget(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ForgetAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Connect(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ConnectAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Disconnect(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.DisconnectAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Technologies">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.TechnologiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.EnableTethering(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.EnableTetheringAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.EnableTethering(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.EnableTetheringAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.DisableTethering(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.DisableTetheringAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.GetTetheringEnable(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.GetTetheringEnableAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.TetheringName(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.TetheringNameAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.TetheringPassphrase(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.TetheringPassphraseAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Countries">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.CountriesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.SetCountry(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.SetCountryAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Country">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.CountryAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.Interfaces">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.InterfacesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ProvisionService(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ProvisionServiceAsync(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ProvisionedServices">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.ProvisionedServicesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.RemoveProvisionedService(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALConnectionManager.RemoveProvisionedServiceAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALDiagnosis">
            <summary>This module is dedicated to Aldebaran Robots Diagnosis.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDiagnosis.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDiagnosis.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDiagnosis.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALDiagnosis.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetPassiveDiagnosis">
            <summary>The actual state of the passive diagnosis.</summary>
            <returns>Return the passive diagnosis last result.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetPassiveDiagnosisAsync">
            <summary>The actual state of the passive diagnosis.</summary>
            <returns>Return the passive diagnosis last result.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetActiveDiagnosis">
            <summary>The actual state of the active diagnosis.</summary>
            <returns>Return the active diagnosis last result.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetActiveDiagnosisAsync">
            <summary>The actual state of the active diagnosis.</summary>
            <returns>Return the active diagnosis last result.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetDiagnosisStatus">
            <summary>The actual state of the active and passive diagnosis.</summary>
            <returns>Return the active and passive last result.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.GetDiagnosisStatusAsync">
            <summary>The actual state of the active and passive diagnosis.</summary>
            <returns>Return the active and passive last result.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.SetEnableNotification(System.Boolean)">
            <summary>Enable / Disable diagnosis notification.</summary>
            <param name="arg0_enable">If True enable diagnosis notification. If False disable diagnosis notification.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.SetEnableNotificationAsync(System.Boolean)">
            <summary>Enable / Disable diagnosis notification.</summary>
            <param name="arg0_enable">If True enable diagnosis notification. If False disable diagnosis notification.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.IsNotificationEnabled">
            <summary>Return true if notification is active.</summary>
            <returns>Return True if notifications is active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis.IsNotificationEnabledAsync">
            <summary>Return true if notification is active.</summary>
            <returns>Return True if notifications is active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._run">
            <summary>This function runs the diagnosis.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._runAsync">
            <summary>This function runs the diagnosis.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._run(System.String)">
            <summary>This function runs the diagnosis.</summary>
            <param name="arg0_diagnosisFamily">The family of tests to be run by the diagnosis.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._runAsync(System.String)">
            <summary>This function runs the diagnosis.</summary>
            <param name="arg0_diagnosisFamily">The family of tests to be run by the diagnosis.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._getFamilyNames">
            <summary>Returns a vector of available diagnosis families</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._getFamilyNamesAsync">
            <summary>Returns a vector of available diagnosis families</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._getActiveDiagnosisSummary">
            <summary>The summary of the active diagnosis.This Hide API is dedicated for RhM.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._getActiveDiagnosisSummaryAsync">
            <summary>The summary of the active diagnosis.This Hide API is dedicated for RhM.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._getPassiveDiagnosisSummary(System.Boolean)">
            <summary>The summary of the passive diagnosis.This Hide API is dedicated for RhM.</summary>
            <param name="arg0_clearBuffers">If True buffers are cleared.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._getPassiveDiagnosisSummaryAsync(System.Boolean)">
            <summary>The summary of the passive diagnosis.This Hide API is dedicated for RhM.</summary>
            <param name="arg0_clearBuffers">If True buffers are cleared.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._wakeUpStartedCallBack">
            <summary>Callback method at wakeUp started.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._wakeUpStartedCallBackAsync">
            <summary>Callback method at wakeUp started.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._wakeUpFinishedCallBack">
            <summary>Callback method at wakeUp finished.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._wakeUpFinishedCallBackAsync">
            <summary>Callback method at wakeUp finished.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._restStartedCallBack">
            <summary>Callback method at rest started.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._restStartedCallBackAsync">
            <summary>Callback method at rest started.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._restFinishedCallBack">
            <summary>Callback method at rest finished.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._restFinishedCallBackAsync">
            <summary>Callback method at rest finished.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._naoqiReadyCallBack">
            <summary>Callback method at naoqi ready.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._naoqiReadyCallBackAsync">
            <summary>Callback method at naoqi ready.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._robotIsFallingCallBack">
            <summary>Callback method at robot is falling.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._robotIsFallingCallBackAsync">
            <summary>Callback method at robot is falling.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._clearActiveDiagnosis">
            <summary>Clear all active diagnosis.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._clearActiveDiagnosisAsync">
            <summary>Clear all active diagnosis.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._setLogToFileEnabled(System.Boolean)">
            <summary>Enables/Disables file logging active diagnosis.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._setLogToFileEnabledAsync(System.Boolean)">
            <summary>Enables/Disables file logging active diagnosis.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._runPassiveDiagnosis">
            <summary>Run the passive diagnosis tests once.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDiagnosis._runPassiveDiagnosisAsync">
            <summary>Run the passive diagnosis tests once.</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALExpressionWatcher">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALExpressionWatcher.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALExpressionWatcher.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALExpressionWatcher.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALExpressionWatcher.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._start">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._startAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._stop">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._stopAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._isStarted">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._isStartedAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.Add(System.String,System.Int32)">
            <summary>Adds a condition expression to ALExpressionWatcher engine</summary>
            <param name="arg0_expression">Condition expression in ConditionChecker language</param>
            <param name="arg1_report_mode">ALExpressionWatcher report mode, available modes: { REPORT_CHANGE = 0, REPORT_EDGE = 1, REPORT_EDGE_TRUE = 2 }</param>
            <returns>Corresponding ExpressionObject</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher.AddAsync(System.String,System.Int32)">
            <summary>Adds a condition expression to ALExpressionWatcher engine</summary>
            <param name="arg0_expression">Condition expression in ConditionChecker language</param>
            <param name="arg1_report_mode">ALExpressionWatcher report mode, available modes: { REPORT_CHANGE = 0, REPORT_EDGE = 1, REPORT_EDGE_TRUE = 2 }</param>
            <returns>Corresponding ExpressionObject</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._list">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._listAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._listReactor">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._listReactorAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._purgeAll">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALExpressionWatcher._purgeAllAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALKnowledge">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALKnowledge.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALKnowledge.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALKnowledge.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALKnowledge.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Add(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.AddAsync(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.GetSubject(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.GetSubjectAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.GetPredicate(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.GetPredicateAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.GetObject(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.GetObjectAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Update(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.UpdateAsync(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Query(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.QueryAsync(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.QueryTriplet(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.QueryTripletAsync(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Remove(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.RemoveAsync(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.Contains(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ContainsAsync(System.String,System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.AddRule(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.AddRuleAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ClearRules">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ClearRulesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ResetKnowledge(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ResetKnowledgeAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ExportModel(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ExportModelAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ImportModel(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.ImportModelAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.SparqlQuery(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.SparqlQueryAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.SparqlQuery(System.String,System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.SparqlQueryAsync(System.String,System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.CreateBackupModel(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.CreateBackupModelAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.RecoverBackupModel(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALKnowledge.RecoverBackupModelAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALMemory">
            <summary>ALMemory provides a centralized memory that can be used to store and retrieve named values. It also acts as a hub for the distribution of event notifications.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMemory.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMemory.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMemory.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALMemory.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.DeclareEvent(System.String)">
            <summary>Declares an event to allow future subscriptions to the event</summary>
            <param name="arg0_eventName">The name of the event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.DeclareEventAsync(System.String)">
            <summary>Declares an event to allow future subscriptions to the event</summary>
            <param name="arg0_eventName">The name of the event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.DeclareEvent(System.String,System.String)">
            <summary>Declares an event to allow future subscriptions to the event</summary>
            <param name="arg0_eventName">The name of the event</param>
            <param name="arg1_extractorName">The name of the extractor capable of creating the event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.DeclareEventAsync(System.String,System.String)">
            <summary>Declares an event to allow future subscriptions to the event</summary>
            <param name="arg0_eventName">The name of the event</param>
            <param name="arg1_extractorName">The name of the extractor capable of creating the event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetData(System.String)">
            <summary>Gets the value of a key-value pair stored in memory</summary>
            <param name="arg0_key">Name of the value.</param>
            <returns>The data as an ALValue. This can often be cast transparently into the original type.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataAsync(System.String)">
            <summary>Gets the value of a key-value pair stored in memory</summary>
            <param name="arg0_key">Name of the value.</param>
            <returns>The data as an ALValue. This can often be cast transparently into the original type.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetData(System.String,System.Int32)">
            <summary>DEPRECATED - Gets the value of a key-value pair stored in memory. Please use the version of this method with no second parameter.</summary>
            <param name="arg0_key">Name of the value.</param>
            <param name="arg1_deprecatedParameter">DEPRECATED - This parameter has no effect, but is left for compatibility reason.</param>
            <returns>The data as an ALValue</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataAsync(System.String,System.Int32)">
            <summary>DEPRECATED - Gets the value of a key-value pair stored in memory. Please use the version of this method with no second parameter.</summary>
            <param name="arg0_key">Name of the value.</param>
            <param name="arg1_deprecatedParameter">DEPRECATED - This parameter has no effect, but is left for compatibility reason.</param>
            <returns>The data as an ALValue</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.Subscriber(System.String)">
            <summary>Get an object wrapping a signal bound to the given ALMemory event. Creates the event if it does not exist.</summary>
            <param name="arg0_eventName">Name of the ALMemory event</param>
            <returns>An AnyObject with a signal named &quot;signal&quot;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SubscriberAsync(System.String)">
            <summary>Get an object wrapping a signal bound to the given ALMemory event. Creates the event if it does not exist.</summary>
            <param name="arg0_eventName">Name of the ALMemory event</param>
            <returns>An AnyObject with a signal named &quot;signal&quot;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetTimestamp(System.String)">
            <summary>Get data value and timestamp</summary>
            <param name="arg0_key">Name of the variable</param>
            <returns>A list of all the data key names that contain the given string.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetTimestampAsync(System.String)">
            <summary>Get data value and timestamp</summary>
            <param name="arg0_key">Name of the variable</param>
            <returns>A list of all the data key names that contain the given string.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetEventHistory(System.String)">
            <summary>Get data value and timestamp</summary>
            <param name="arg0_key">Name of the variable</param>
            <returns>A list of all the data key names that contain the given string.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetEventHistoryAsync(System.String)">
            <summary>Get data value and timestamp</summary>
            <param name="arg0_key">Name of the variable</param>
            <returns>A list of all the data key names that contain the given string.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataList(System.String)">
            <summary>Gets a list of all key names that contain a given string</summary>
            <param name="arg0_filter">A string used as the search term</param>
            <returns>A list of all the data key names that contain the given string.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataListAsync(System.String)">
            <summary>Gets a list of all key names that contain a given string</summary>
            <param name="arg0_filter">A string used as the search term</param>
            <returns>A list of all the data key names that contain the given string.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataListName">
            <summary>Gets the key names for all the key-value pairs in memory</summary>
            <returns>A list containing the keys in memory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataListNameAsync">
            <summary>Gets the key names for all the key-value pairs in memory</summary>
            <returns>A list containing the keys in memory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataOnChange(System.String,System.Int32)">
            <summary>DEPRECATED - Blocks the caller until the value of a key changes</summary>
            <param name="arg0_key">Name of the data.</param>
            <param name="arg1_deprecatedParameter">DEPRECATED - this parameter has no effect</param>
            <returns>an array containing all the retrieved data</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataOnChangeAsync(System.String,System.Int32)">
            <summary>DEPRECATED - Blocks the caller until the value of a key changes</summary>
            <param name="arg0_key">Name of the data.</param>
            <param name="arg1_deprecatedParameter">DEPRECATED - this parameter has no effect</param>
            <returns>an array containing all the retrieved data</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataPtr(System.String)">
            <summary>Gets a pointer to 32 a bit data item. Beware, the pointer will only be valid during the lifetime of the ALMemory object. Use with care, at initialization, not every loop.</summary>
            <param name="arg0_key">Name of the data.</param>
            <returns>A pointer converted to int</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDataPtrAsync(System.String)">
            <summary>Gets a pointer to 32 a bit data item. Beware, the pointer will only be valid during the lifetime of the ALMemory object. Use with care, at initialization, not every loop.</summary>
            <param name="arg0_key">Name of the data.</param>
            <returns>A pointer converted to int</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetEventList">
            <summary>Gets a list containing the names of all the declared events</summary>
            <returns>A list containing the names of all events</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetEventListAsync">
            <summary>Gets a list containing the names of all the declared events</summary>
            <returns>A list containing the names of all events</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetExtractorEvent(System.String)">
            <summary>Gets the list of all events generated by a given extractor</summary>
            <param name="arg0_extractorName">The name of the extractor</param>
            <returns>A list containing the names of the events associated with the given extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetExtractorEventAsync(System.String)">
            <summary>Gets the list of all events generated by a given extractor</summary>
            <param name="arg0_extractorName">The name of the extractor</param>
            <returns>A list containing the names of the events associated with the given extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetListData(System.Object)">
            <summary>Gets the values associated with the given list of keys. This is more efficient than calling getData many times, especially over the network.</summary>
            <param name="arg0_keyList">An array containing the key names.</param>
            <returns>An array containing all the values corresponding to the given keys.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetListDataAsync(System.Object)">
            <summary>Gets the values associated with the given list of keys. This is more efficient than calling getData many times, especially over the network.</summary>
            <param name="arg0_keyList">An array containing the key names.</param>
            <returns>An array containing all the values corresponding to the given keys.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetMicroEventList">
            <summary>Gets a list containing the names of all the declared micro events</summary>
            <returns>A list containing the names of all the microEvents</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetMicroEventListAsync">
            <summary>Gets a list containing the names of all the declared micro events</summary>
            <returns>A list containing the names of all the microEvents</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetSubscribers(System.String)">
            <summary>Gets a list containing the names of subscribers to an event.</summary>
            <param name="arg0_name">Name of the event or micro-event</param>
            <returns>List of subscriber names</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetSubscribersAsync(System.String)">
            <summary>Gets a list containing the names of subscribers to an event.</summary>
            <param name="arg0_name">Name of the event or micro-event</param>
            <returns>List of subscriber names</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetType(System.String)">
            <summary>Gets the storage class of the stored data. This is not the underlying POD type.</summary>
            <param name="arg0_key">Name of the variable</param>
            <returns>String type: Data, Event, MicroEvent</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetTypeAsync(System.String)">
            <summary>Gets the storage class of the stored data. This is not the underlying POD type.</summary>
            <param name="arg0_key">Name of the variable</param>
            <returns>String type: Data, Event, MicroEvent</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertData(System.String,System.Int32)">
            <summary>Inserts a key-value pair into memory, where value is an int</summary>
            <param name="arg0_key">Name of the value to be inserted.</param>
            <param name="arg1_value">The int to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertDataAsync(System.String,System.Int32)">
            <summary>Inserts a key-value pair into memory, where value is an int</summary>
            <param name="arg0_key">Name of the value to be inserted.</param>
            <param name="arg1_value">The int to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertData(System.String,System.Single)">
            <summary>Inserts a key-value pair into memory, where value is a float</summary>
            <param name="arg0_key">Name of the value to be inserted.</param>
            <param name="arg1_value">The float to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertDataAsync(System.String,System.Single)">
            <summary>Inserts a key-value pair into memory, where value is a float</summary>
            <param name="arg0_key">Name of the value to be inserted.</param>
            <param name="arg1_value">The float to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertData(System.String,System.String)">
            <summary>Inserts a key-value pair into memory, where value is a string</summary>
            <param name="arg0_key">Name of the value to be inserted.</param>
            <param name="arg1_value">The string to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertDataAsync(System.String,System.String)">
            <summary>Inserts a key-value pair into memory, where value is a string</summary>
            <param name="arg0_key">Name of the value to be inserted.</param>
            <param name="arg1_value">The string to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertData(System.String,System.Object)">
            <summary>Inserts a key-value pair into memory, where value is an ALValue</summary>
            <param name="arg0_key">Name of the value to be inserted.</param>
            <param name="arg1_data">The ALValue to be inserted. This could contain a basic type, or a more complex array. See the ALValue documentation for more information.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertDataAsync(System.String,System.Object)">
            <summary>Inserts a key-value pair into memory, where value is an ALValue</summary>
            <param name="arg0_key">Name of the value to be inserted.</param>
            <param name="arg1_data">The ALValue to be inserted. This could contain a basic type, or a more complex array. See the ALValue documentation for more information.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertListData(System.Object)">
            <summary>Inserts a list of key-value pairs into memory.</summary>
            <param name="arg0_list">An ALValue list of the form [[Key, Value],...]. Each item will be inserted.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.InsertListDataAsync(System.Object)">
            <summary>Inserts a list of key-value pairs into memory.</summary>
            <param name="arg0_list">An ALValue list of the form [[Key, Value],...]. Each item will be inserted.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RaiseEvent(System.String,System.Object)">
            <summary>Publishes the given data to all subscribers.</summary>
            <param name="arg0_name">Name of the event to raise.</param>
            <param name="arg1_value">The data associated with the event. This could contain a basic type, or a more complex array. See the ALValue documentation for more information.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RaiseEventAsync(System.String,System.Object)">
            <summary>Publishes the given data to all subscribers.</summary>
            <param name="arg0_name">Name of the event to raise.</param>
            <param name="arg1_value">The data associated with the event. This could contain a basic type, or a more complex array. See the ALValue documentation for more information.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RaiseMicroEvent(System.String,System.Object)">
            <summary>Publishes the given data to all subscribers.</summary>
            <param name="arg0_name">Name of the event to raise.</param>
            <param name="arg1_value">The data associated with the event. This could contain a basic type, or a more complex array. See the ALValue documentation for more information.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RaiseMicroEventAsync(System.String,System.Object)">
            <summary>Publishes the given data to all subscribers.</summary>
            <param name="arg0_name">Name of the event to raise.</param>
            <param name="arg1_value">The data associated with the event. This could contain a basic type, or a more complex array. See the ALValue documentation for more information.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RemoveData(System.String)">
            <summary>Removes a key-value pair from memory</summary>
            <param name="arg0_key">Name of the data to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RemoveDataAsync(System.String)">
            <summary>Removes a key-value pair from memory</summary>
            <param name="arg0_key">Name of the data to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RemoveEvent(System.String)">
            <summary>Removes a event from memory and unsubscribes any exiting subscribers.</summary>
            <param name="arg0_name">Name of the event to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RemoveEventAsync(System.String)">
            <summary>Removes a event from memory and unsubscribes any exiting subscribers.</summary>
            <param name="arg0_name">Name of the event to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RemoveMicroEvent(System.String)">
            <summary>Removes a micro event from memory and unsubscribes any exiting subscribers.</summary>
            <param name="arg0_name">Name of the event to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.RemoveMicroEventAsync(System.String)">
            <summary>Removes a micro event from memory and unsubscribes any exiting subscribers.</summary>
            <param name="arg0_name">Name of the event to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SubscribeToEvent(System.String,System.String,System.String)">
            <summary>Subscribes to an event and automaticaly launches the module that declared itself as the generator of the event if required.</summary>
            <param name="arg0_name">The name of the event to subscribe to</param>
            <param name="arg1_callbackModule">Name of the module to call with notifications</param>
            <param name="arg2_callbackMethod">Name of the module's method to call when a data is changed</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SubscribeToEventAsync(System.String,System.String,System.String)">
            <summary>Subscribes to an event and automaticaly launches the module that declared itself as the generator of the event if required.</summary>
            <param name="arg0_name">The name of the event to subscribe to</param>
            <param name="arg1_callbackModule">Name of the module to call with notifications</param>
            <param name="arg2_callbackMethod">Name of the module's method to call when a data is changed</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SubscribeToEvent(System.String,System.String,System.String,System.String)">
            <summary>DEPRECATED Subscribes to event and automaticaly launches the module capable of generating the event if it is not already running. Please use the version without the callbackMessage parameter.</summary>
            <param name="arg0_name">The name of the event to subscribe to</param>
            <param name="arg1_callbackModule">Name of the module to call with notifications</param>
            <param name="arg2_callbackMessage">DEPRECATED Message included in the notification.</param>
            <param name="arg3_callbacMethod">Name of the module's method to call when a data is changed</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SubscribeToEventAsync(System.String,System.String,System.String,System.String)">
            <summary>DEPRECATED Subscribes to event and automaticaly launches the module capable of generating the event if it is not already running. Please use the version without the callbackMessage parameter.</summary>
            <param name="arg0_name">The name of the event to subscribe to</param>
            <param name="arg1_callbackModule">Name of the module to call with notifications</param>
            <param name="arg2_callbackMessage">DEPRECATED Message included in the notification.</param>
            <param name="arg3_callbacMethod">Name of the module's method to call when a data is changed</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SubscribeToMicroEvent(System.String,System.String,System.String,System.String)">
            <summary>Subscribes to a microEvent. Subscribed modules are notified on theircallback method whenever the data is updated, even if the new value is the same as the old value.</summary>
            <param name="arg0_name">Name of the data.</param>
            <param name="arg1_callbackModule">Name of the module to call with notifications</param>
            <param name="arg2_callbackMessage">Message included in the notification. This can be used to disambiguate multiple subscriptions.</param>
            <param name="arg3_callbackMethod">Name of the module's method to call when a data is changed</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SubscribeToMicroEventAsync(System.String,System.String,System.String,System.String)">
            <summary>Subscribes to a microEvent. Subscribed modules are notified on theircallback method whenever the data is updated, even if the new value is the same as the old value.</summary>
            <param name="arg0_name">Name of the data.</param>
            <param name="arg1_callbackModule">Name of the module to call with notifications</param>
            <param name="arg2_callbackMessage">Message included in the notification. This can be used to disambiguate multiple subscriptions.</param>
            <param name="arg3_callbackMethod">Name of the module's method to call when a data is changed</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.UnregisterModuleReference(System.String)">
            <summary>Informs ALMemory that a module doesn't exist anymore.</summary>
            <param name="arg0_moduleName">Name of the departing module.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.UnregisterModuleReferenceAsync(System.String)">
            <summary>Informs ALMemory that a module doesn't exist anymore.</summary>
            <param name="arg0_moduleName">Name of the departing module.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory._perf">
            <summary>ALMemory performance</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory._perfAsync">
            <summary>ALMemory performance</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.UnsubscribeToEvent(System.String,System.String)">
            <summary>Unsubscribes a module from the given event. No further notifications will be received.</summary>
            <param name="arg0_name">The name of the event</param>
            <param name="arg1_callbackModule">The name of the module that was given when subscribing.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.UnsubscribeToEventAsync(System.String,System.String)">
            <summary>Unsubscribes a module from the given event. No further notifications will be received.</summary>
            <param name="arg0_name">The name of the event</param>
            <param name="arg1_callbackModule">The name of the module that was given when subscribing.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.UnsubscribeToMicroEvent(System.String,System.String)">
            <summary>Unsubscribes from the given event. No further notifications will be received.</summary>
            <param name="arg0_name">Name of the event.</param>
            <param name="arg1_callbackModule">The name of the module that was given when subscribing.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.UnsubscribeToMicroEventAsync(System.String,System.String)">
            <summary>Unsubscribes from the given event. No further notifications will be received.</summary>
            <param name="arg0_name">Name of the event.</param>
            <param name="arg1_callbackModule">The name of the module that was given when subscribing.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory._insertObject(System.String,System.Object,System.Int32)">
            <summary>Insert object in ALMemory. Please use ALMemoryFastAccess</summary>
            <param name="arg0_name">ALMemory data name</param>
            <param name="arg1_buffer">buffer in ALValue</param>
            <param name="arg2_bufferSize">buffer size</param>
            <returns>return an array of data's string name.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory._insertObjectAsync(System.String,System.Object,System.Int32)">
            <summary>Insert object in ALMemory. Please use ALMemoryFastAccess</summary>
            <param name="arg0_name">ALMemory data name</param>
            <param name="arg1_buffer">buffer in ALValue</param>
            <param name="arg2_bufferSize">buffer size</param>
            <returns>return an array of data's string name.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory._subscribeOnDataSetTimePolicy(System.String,System.String,System.Int32)">
            <summary>Allows modules to change time policy of already subscribed data.</summary>
            <param name="arg0_name">Name of the data.</param>
            <param name="arg1_callbackModule">Name of the module.</param>
            <param name="arg2_nTimePolicy">time of new policy in ms. Default is 0: no time policy: called at every change/insert. If timepolicy &gt; 0, we will not notifiy under timepolicy even if data change under timepolicy frequency</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory._subscribeOnDataSetTimePolicyAsync(System.String,System.String,System.Int32)">
            <summary>Allows modules to change time policy of already subscribed data.</summary>
            <param name="arg0_name">Name of the data.</param>
            <param name="arg1_callbackModule">Name of the module.</param>
            <param name="arg2_nTimePolicy">time of new policy in ms. Default is 0: no time policy: called at every change/insert. If timepolicy &gt; 0, we will not notifiy under timepolicy even if data change under timepolicy frequency</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory._subscribeOnDataSetSynchronizeResponse(System.String,System.String,System.Boolean)">
            <summary>Receives notifications in the same order that the event were sent. This is slower than</summary>
            <param name="arg0_name">Name of the data.</param>
            <param name="arg1_callbackModule">Name of the module.</param>
            <param name="arg2_synchronizedResponse">True to receive notifications in the same order as events are sent</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory._subscribeOnDataSetSynchronizeResponseAsync(System.String,System.String,System.Boolean)">
            <summary>Receives notifications in the same order that the event were sent. This is slower than</summary>
            <param name="arg0_name">Name of the data.</param>
            <param name="arg1_callbackModule">Name of the module.</param>
            <param name="arg2_synchronizedResponse">True to receive notifications in the same order as events are sent</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SetDescription(System.String,System.String)">
            <summary>Describe a key</summary>
            <param name="arg0_name">Name of the key.</param>
            <param name="arg1_description">The description of the event (text format).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.SetDescriptionAsync(System.String,System.String)">
            <summary>Describe a key</summary>
            <param name="arg0_name">Name of the key.</param>
            <param name="arg1_description">The description of the event (text format).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDescriptionList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Descriptions of all given keys</summary>
            <param name="arg0_keylist">List of keys. (empty to get all descriptions)</param>
            <returns>an array of tuple (name, type, description) describing all keys.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.GetDescriptionListAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Descriptions of all given keys</summary>
            <param name="arg0_keylist">List of keys. (empty to get all descriptions)</param>
            <returns>an array of tuple (name, type, description) describing all keys.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.AddMapping(System.String,System.String,System.String)">
            <summary>Add a mapping between signal and event</summary>
            <param name="arg0_service">Name of the service</param>
            <param name="arg1_signal">Name of the signal</param>
            <param name="arg2_event">Name of the event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.AddMappingAsync(System.String,System.String,System.String)">
            <summary>Add a mapping between signal and event</summary>
            <param name="arg0_service">Name of the service</param>
            <param name="arg1_signal">Name of the signal</param>
            <param name="arg2_event">Name of the event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.AddMapping(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Add a mapping between signal and event</summary>
            <param name="arg0_service">Name of the service</param>
            <param name="arg1_signalEvent">A map of signal corresponding to event</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMemory.AddMappingAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Add a mapping between signal and event</summary>
            <param name="arg0_service">Name of the service</param>
            <param name="arg1_signalEvent">A map of signal corresponding to event</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALMood">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMood.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMood.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMood.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALMood.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.Subscribe(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.SubscribeAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.Unsubscribe(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.UnsubscribeAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.GetSubscribersInfo">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.GetSubscribersInfoAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.CurrentPersonState">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.CurrentPersonStateAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.PersonStateFromPeoplePerception(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.PersonStateFromPeoplePerceptionAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.PersonStateFromUserSession(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.PersonStateFromUserSessionAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.Persons">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.PersonsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.AmbianceState">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.AmbianceStateAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.GetEmotionalReaction">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMood.GetEmotionalReactionAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALNotificationManager">
            <summary>Notification manager: Handle all notifications on the robot.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALNotificationManager.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALNotificationManager.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALNotificationManager.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALNotificationManager.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Add(System.Object)">
            <summary>Add a notification.</summary>
            <param name="arg0_notification">Contain information for the notification</param>
            <returns>Notification ID.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.AddAsync(System.Object)">
            <summary>Add a notification.</summary>
            <param name="arg0_notification">Contain information for the notification</param>
            <returns>Notification ID.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Remove(System.Int32)">
            <summary>Remove a notification.</summary>
            <param name="arg0_notificationId">Notification ID to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.RemoveAsync(System.Int32)">
            <summary>Remove a notification.</summary>
            <param name="arg0_notificationId">Notification ID to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Notifications">
            <summary>Get the all array of pending notifications.</summary>
            <returns>An array of pending notification.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.NotificationsAsync">
            <summary>Get the all array of pending notifications.</summary>
            <returns>An array of pending notification.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.Notification(System.Int32)">
            <summary>Get one notification.</summary>
            <param name="arg0_notificationId">Notification ID.</param>
            <returns>ALValue containing a Notification.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager.NotificationAsync(System.Int32)">
            <summary>Get one notification.</summary>
            <param name="arg0_notificationId">Notification ID.</param>
            <returns>ALValue containing a Notification.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._internalNotifications">
            <summary></summary>
            <returns>An array of pending notification.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._internalNotificationsAsync">
            <summary></summary>
            <returns>An array of pending notification.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._internalNotification(System.Int32)">
            <summary></summary>
            <param name="arg0_notificationId">Notification ID.</param>
            <returns>ALValue containing a Notification.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._internalNotificationAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_notificationId">Notification ID.</param>
            <returns>ALValue containing a Notification.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._severity">
            <summary></summary>
            <returns>Maximal Notification severity.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._severityAsync">
            <summary></summary>
            <returns>Maximal Notification severity.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._read(System.Int32)">
            <summary></summary>
            <param name="arg0_int">Notification ID.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._readAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_int">Notification ID.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._isImmediate(System.Int32)">
            <summary></summary>
            <param name="arg0_notificationId">Notification ID.</param>
            <returns>True if the notification is immediate, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNotificationManager._isImmediateAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_notificationId">Notification ID.</param>
            <returns>True if the notification is immediate, false otherwise.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALPreferenceManager">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPreferenceManager.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPreferenceManager.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPreferenceManager.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALPreferenceManager.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetValue(System.String,System.String)">
            <summary>Get specified preference</summary>
            <param name="arg0_domain">Preference domain</param>
            <param name="arg1_setting">Preference setting</param>
            <returns>corresponding preferences value</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetValueAsync(System.String,System.String)">
            <summary>Get specified preference</summary>
            <param name="arg0_domain">Preference domain</param>
            <param name="arg1_setting">Preference setting</param>
            <returns>corresponding preferences value</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.SetValue(System.String,System.String,System.Object)">
            <summary>Set specified preference</summary>
            <param name="arg0_domain">Preference domain</param>
            <param name="arg1_setting">Preference setting</param>
            <param name="arg2_value">Preference value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.SetValueAsync(System.String,System.String,System.Object)">
            <summary>Set specified preference</summary>
            <param name="arg0_domain">Preference domain</param>
            <param name="arg1_setting">Preference setting</param>
            <param name="arg2_value">Preference value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetValueList(System.String)">
            <summary>Get preferences names and values for a given domain</summary>
            <param name="arg0_domain">Preference domain</param>
            <returns>a list of preferences names and values associated to the domain</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetValueListAsync(System.String)">
            <summary>Get preferences names and values for a given domain</summary>
            <param name="arg0_domain">Preference domain</param>
            <returns>a list of preferences names and values associated to the domain</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetDomainList">
            <summary>Get available preferences domain</summary>
            <returns>a list containing all the available domain names</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.GetDomainListAsync">
            <summary>Get available preferences domain</summary>
            <returns>a list containing all the available domain names</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.RemoveValue(System.String,System.String)">
            <summary>Remove specified preference</summary>
            <param name="arg0_domain">Preference domain</param>
            <param name="arg1_setting">Preference setting</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.RemoveValueAsync(System.String,System.String)">
            <summary>Remove specified preference</summary>
            <param name="arg0_domain">Preference domain</param>
            <param name="arg1_setting">Preference setting</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.SetValues(System.Object)">
            <summary>Add many values at once.</summary>
            <param name="arg0_values">A map (domain as index) of map (setting name as index) of values.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.SetValuesAsync(System.Object)">
            <summary>Add many values at once.</summary>
            <param name="arg0_values">A map (domain as index) of map (setting name as index) of values.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.RemoveDomainValues(System.String)">
            <summary>Remove an entire preference domain</summary>
            <param name="arg0_domain">Preference domain</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.RemoveDomainValuesAsync(System.String)">
            <summary>Remove an entire preference domain</summary>
            <param name="arg0_domain">Preference domain</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.ImportPrefFile(System.String,System.String,System.String,System.Boolean)">
            <summary>Import a preferences XML file</summary>
            <param name="arg0_domain">Preference domain: all preferences values found in XML file will be imported in that domain.</param>
            <param name="arg1_applicationName">Application name: will be used to search for preference file on disk (in location of type &lt;configurationdirectory&gt;/applicationName/filename).</param>
            <param name="arg2_filename">Preference XML filename</param>
            <param name="arg3_override">Set this to true if you want to override preferences that already exist with preferences in imported XML file</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.ImportPrefFileAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>Import a preferences XML file</summary>
            <param name="arg0_domain">Preference domain: all preferences values found in XML file will be imported in that domain.</param>
            <param name="arg1_applicationName">Application name: will be used to search for preference file on disk (in location of type &lt;configurationdirectory&gt;/applicationName/filename).</param>
            <param name="arg2_filename">Preference XML filename</param>
            <param name="arg3_override">Set this to true if you want to override preferences that already exist with preferences in imported XML file</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.Update">
            <summary>Synchronizes local preferences with preferences stored on a server.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager.UpdateAsync">
            <summary>Synchronizes local preferences with preferences stored on a server.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager._setFromCloud(System.String,System.String,System.Object)">
            <summary>Update local preference from version store on Cloud (usefull when preference was updated on Cloud)</summary>
            <param name="arg0_domain">Preference domain</param>
            <param name="arg1_setting">Preference setting</param>
            <param name="arg2_value">Preference value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager._setFromCloudAsync(System.String,System.String,System.Object)">
            <summary>Update local preference from version store on Cloud (usefull when preference was updated on Cloud)</summary>
            <param name="arg0_domain">Preference domain</param>
            <param name="arg1_setting">Preference setting</param>
            <param name="arg2_value">Preference value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager._restart(System.String,System.String)">
            <summary>Restart preferences module</summary>
            <param name="arg0_url">Preference server url</param>
            <param name="arg1_path">Path to sqlite database</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager._restartAsync(System.String,System.String)">
            <summary>Restart preferences module</summary>
            <param name="arg0_url">Preference server url</param>
            <param name="arg1_path">Path to sqlite database</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager._onConnectivityChanged(System.String,System.Object,System.String)">
            <summary>Internal callback.</summary>
            <param name="arg0_string">variable</param>
            <param name="arg1_string">value</param>
            <param name="arg2_string">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPreferenceManager._onConnectivityChangedAsync(System.String,System.Object,System.String)">
            <summary>Internal callback.</summary>
            <param name="arg0_string">variable</param>
            <param name="arg1_string">value</param>
            <param name="arg2_string">message</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALResourceManager">
            <summary>Manage robot resources: Synchronize movement, led, sound. Run specific actions when another behavior wants your resources</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALResourceManager.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALResourceManager.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALResourceManager.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALResourceManager.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.WaitForResource(System.String,System.String,System.String,System.Int32)">
            <summary>Wait resource</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_ownerName">Module name</param>
            <param name="arg2_callbackName">callback name</param>
            <param name="arg3_timeoutSeconds">Timeout in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.WaitForResourceAsync(System.String,System.String,System.String,System.Int32)">
            <summary>Wait resource</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_ownerName">Module name</param>
            <param name="arg2_callbackName">callback name</param>
            <param name="arg3_timeoutSeconds">Timeout in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.AcquireResource(System.String,System.String,System.String,System.Int32)">
            <summary>Wait and acquire a resource</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_moduleName">Module name</param>
            <param name="arg2_callbackName">callback name</param>
            <param name="arg3_timeoutSeconds">Timeout in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.AcquireResourceAsync(System.String,System.String,System.String,System.Int32)">
            <summary>Wait and acquire a resource</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_moduleName">Module name</param>
            <param name="arg2_callbackName">callback name</param>
            <param name="arg3_timeoutSeconds">Timeout in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.WaitForOptionalResourcesTree(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Wait resource</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.WaitForOptionalResourcesTreeAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Wait resource</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.WaitForResourcesTree(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int32)">
            <summary>Wait for resource tree. Parent and children are not in conflict. Local function</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_moduleName">Module name</param>
            <param name="arg2_callbackName">callback name</param>
            <param name="arg3_timeoutSeconds">Timeout in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.WaitForResourcesTreeAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int32)">
            <summary>Wait for resource tree. Parent and children are not in conflict. Local function</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_moduleName">Module name</param>
            <param name="arg2_callbackName">callback name</param>
            <param name="arg3_timeoutSeconds">Timeout in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.AcquireResourcesTree(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int32)">
            <summary>Wait for resource tree. Parent and children are not in conflict. Local function</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_moduleName">Module name</param>
            <param name="arg2_callbackName">callback name</param>
            <param name="arg3_timeoutSeconds">Timeout in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.AcquireResourcesTreeAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int32)">
            <summary>Wait for resource tree. Parent and children are not in conflict. Local function</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_moduleName">Module name</param>
            <param name="arg2_callbackName">callback name</param>
            <param name="arg3_timeoutSeconds">Timeout in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.AreResourcesOwnedBy(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>True if all the specified resources are owned by the owner</summary>
            <param name="arg0_resourceNameList">Resource name</param>
            <param name="arg1_ownerName">Owner pointer with hierarchy</param>
            <returns>True if all the specify resources are owned by the owner</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.AreResourcesOwnedByAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>True if all the specified resources are owned by the owner</summary>
            <param name="arg0_resourceNameList">Resource name</param>
            <param name="arg1_ownerName">Owner pointer with hierarchy</param>
            <returns>True if all the specify resources are owned by the owner</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.ReleaseResource(System.String,System.String)">
            <summary>Release resource</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_ownerName">Existing owner name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.ReleaseResourceAsync(System.String,System.String)">
            <summary>Release resource</summary>
            <param name="arg0_resourceName">Resource name</param>
            <param name="arg1_ownerName">Existing owner name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.ReleaseResources(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>Release  resources list</summary>
            <param name="arg0_resourceNames">Resource names</param>
            <param name="arg1_ownerName">Owner name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.ReleaseResourcesAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>Release  resources list</summary>
            <param name="arg0_resourceNames">Resource names</param>
            <param name="arg1_ownerName">Owner name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.EnableStateResource(System.String,System.Boolean)">
            <summary>Enable or disable a state resource</summary>
            <param name="arg0_resourceName">The name of the resource that you wish enable of disable. e.g. Standing</param>
            <param name="arg1_enabled">True to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.EnableStateResourceAsync(System.String,System.Boolean)">
            <summary>Enable or disable a state resource</summary>
            <param name="arg0_resourceName">The name of the resource that you wish enable of disable. e.g. Standing</param>
            <param name="arg1_enabled">True to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.CheckStateResourceFree(System.Collections.Generic.IEnumerable{System.String})">
            <summary>check if all the state resource in the list are free</summary>
            <param name="arg0_resourceName">Resource name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.CheckStateResourceFreeAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>check if all the state resource in the list are free</summary>
            <param name="arg0_resourceName">Resource name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.AreResourcesFree(System.Collections.Generic.IEnumerable{System.String})">
            <summary>True if all resources are free</summary>
            <param name="arg0_resourceNames">Resource names</param>
            <returns>True if all the specify resources are free</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.AreResourcesFreeAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>True if all resources are free</summary>
            <param name="arg0_resourceNames">Resource names</param>
            <returns>True if all the specify resources are free</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsResourceFree(System.String)">
            <summary>True if the resource is free</summary>
            <param name="arg0_resourceNames">Resource name</param>
            <returns>True if the specify resources is free</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsResourceFreeAsync(System.String)">
            <summary>True if the resource is free</summary>
            <param name="arg0_resourceNames">Resource name</param>
            <returns>True if the specify resources is free</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.CreateResource(System.String,System.String)">
            <summary>Create a resource</summary>
            <param name="arg0_resourceName">Resource name to create</param>
            <param name="arg1_parentResourceName">Parent resource name or empty string for root resource</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.CreateResourceAsync(System.String,System.String)">
            <summary>Create a resource</summary>
            <param name="arg0_resourceName">Resource name to create</param>
            <param name="arg1_parentResourceName">Parent resource name or empty string for root resource</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.DeleteResource(System.String,System.Boolean)">
            <summary>Delete a root resource</summary>
            <param name="arg0_resourceName">Resource name to delete</param>
            <param name="arg1_deleteChildResources">DEPRECATED: Delete child resources if true</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.DeleteResourceAsync(System.String,System.Boolean)">
            <summary>Delete a root resource</summary>
            <param name="arg0_resourceName">Resource name to delete</param>
            <param name="arg1_deleteChildResources">DEPRECATED: Delete child resources if true</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsInGroup(System.String,System.String)">
            <summary>True if a resource is in another parent resource</summary>
            <param name="arg0_resourceGroupName">Group name. Ex: Arm</param>
            <param name="arg1_resourceName">Resource name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.IsInGroupAsync(System.String,System.String)">
            <summary>True if a resource is in another parent resource</summary>
            <param name="arg0_resourceGroupName">Group name. Ex: Arm</param>
            <param name="arg1_resourceName">Resource name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.CreateResourcesList(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>True if a resource is in another parent resource</summary>
            <param name="arg0_resourceGroupName">Group name. Ex: Arm</param>
            <param name="arg1_resourceName">Resource name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.CreateResourcesListAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>True if a resource is in another parent resource</summary>
            <param name="arg0_resourceGroupName">Group name. Ex: Arm</param>
            <param name="arg1_resourceName">Resource name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetResources">
            <summary>Get tree of resources</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.GetResourcesAsync">
            <summary>Get tree of resources</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.OwnersGet">
            <summary>The tree of the resources owners.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALResourceManager.OwnersGetAsync">
            <summary>The tree of the resources owners.</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALServiceManager">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALServiceManager.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALServiceManager.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALServiceManager.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALServiceManager.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.StartService(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.StartServiceAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.RestartService(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.RestartServiceAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.StopService(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.StopServiceAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.IsServiceRunning(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.IsServiceRunningAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.ServiceMemoryUsage(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.ServiceMemoryUsageAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.Services">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.ServicesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.Service(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALServiceManager.ServiceAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSystem">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSystem.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSystem.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSystem.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSystem.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.AppBackupInfo">
            <summary>Get the backup information of applications</summary>
            <returns>A vector with all application backup infos</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.AppBackupInfoAsync">
            <summary>Get the backup information of applications</summary>
            <returns>A vector with all application backup infos</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.DiskFree(System.Boolean)">
            <summary>Display free disk space</summary>
            <param name="arg0_all">Show all mount partions.</param>
            <returns>A vector with all partions' infos</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.DiskFreeAsync(System.Boolean)">
            <summary>Display free disk space</summary>
            <param name="arg0_all">Show all mount partions.</param>
            <returns>A vector with all partions' infos</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RobotName">
            <summary>System hostname</summary>
            <returns>name of the robot</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RobotNameAsync">
            <summary>System hostname</summary>
            <returns>name of the robot</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SetRobotName(System.String)">
            <summary>Set system hostname</summary>
            <param name="arg0_name">name to use</param>
            <returns>whether the operation was successful</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SetRobotNameAsync(System.String)">
            <summary>Set system hostname</summary>
            <param name="arg0_name">name to use</param>
            <returns>whether the operation was successful</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RobotIcon(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RobotIconAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RobotIcon">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RobotIconAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Shutdown">
            <summary>Shutdown robot</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.ShutdownAsync">
            <summary>Shutdown robot</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Reboot">
            <summary>Reboot robot</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.RebootAsync">
            <summary>Reboot robot</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SystemVersion">
            <summary>Running system version</summary>
            <returns>running system version</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SystemVersionAsync">
            <summary>Running system version</summary>
            <returns>running system version</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SystemInfo">
            <summary>Running system version</summary>
            <returns>information about the system version</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SystemInfoAsync">
            <summary>Running system version</summary>
            <returns>information about the system version</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.FreeMemory">
            <summary>Amount of available memory in heap</summary>
            <returns>amount of available memory in heap</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.FreeMemoryAsync">
            <summary>Amount of available memory in heap</summary>
            <returns>amount of available memory in heap</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.TotalMemory">
            <summary>Amount of total memory in heap</summary>
            <returns>amount of total memory in heap</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.TotalMemoryAsync">
            <summary>Amount of total memory in heap</summary>
            <returns>amount of total memory in heap</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Timezone">
            <summary>Current timezone</summary>
            <returns>current timezone</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.TimezoneAsync">
            <summary>Current timezone</summary>
            <returns>current timezone</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SetTimezone(System.String)">
            <summary>Set current timezone</summary>
            <param name="arg0_timezone">timezone to use</param>
            <returns>whether the operation was successful</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SetTimezoneAsync(System.String)">
            <summary>Set current timezone</summary>
            <param name="arg0_timezone">timezone to use</param>
            <returns>whether the operation was successful</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SetRobotIcon(System.Object)">
            <summary>Set current robot icon</summary>
            <param name="arg0_imageFile">Image file to use as a robot icon</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.SetRobotIconAsync(System.Object)">
            <summary>Set current robot icon</summary>
            <param name="arg0_imageFile">Image file to use as a robot icon</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.PreviousSystemVersion">
            <summary>Previous system version before software update (empty if this is not the 1st boot after a software update)</summary>
            <returns>Previous system version before software update.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.PreviousSystemVersionAsync">
            <summary>Previous system version before software update (empty if this is not the 1st boot after a software update)</summary>
            <returns>Previous system version before software update.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.ChangePassword(System.String,System.String)">
            <summary>Change the user password.</summary>
            <param name="arg0_oldpassword">The current password of the user.</param>
            <param name="arg1_newpassword">The new user password.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.ChangePasswordAsync(System.String,System.String)">
            <summary>Change the user password.</summary>
            <param name="arg0_oldpassword">The current password of the user.</param>
            <param name="arg1_newpassword">The new user password.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.Upgrade(System.String,System.String)">
            <summary>Flash the system image.</summary>
            <param name="arg0_image">Local path to a valid image.</param>
            <param name="arg1_checksum">Local path to a md5 checksum file, or empty string for no verification</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.UpgradeAsync(System.String,System.String)">
            <summary>Flash the system image.</summary>
            <param name="arg0_image">Local path to a valid image.</param>
            <param name="arg1_checksum">Local path to a md5 checksum file, or empty string for no verification</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.FactoryReset(System.String,System.String)">
            <summary>Flash the system image and erase the user data</summary>
            <param name="arg0_image">Local path to a valid image.</param>
            <param name="arg1_checksum">Local path to a md5 checksum file, or empty string for no verification</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem.FactoryResetAsync(System.String,System.String)">
            <summary>Flash the system image and erase the user data</summary>
            <param name="arg0_image">Local path to a valid image.</param>
            <param name="arg1_checksum">Local path to a md5 checksum file, or empty string for no verification</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem._setStatusLed(System.Int32)">
            <summary>Set the robot status LED</summary>
            <param name="arg0_state">state to set</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem._setStatusLedAsync(System.Int32)">
            <summary>Set the robot status LED</summary>
            <param name="arg0_state">state to set</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem._initializeSystemNotification">
            <summary>Load system notification and data</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem._initializeSystemNotificationAsync">
            <summary>Load system notification and data</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem._boardFirmwareUpdateError">
            <summary>List of the faulty boards</summary>
            <returns>A vector with the name of the faulty boards</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem._boardFirmwareUpdateErrorAsync">
            <summary>List of the faulty boards</summary>
            <returns>A vector with the name of the faulty boards</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem._prepareNaoqiStop">
            <summary>Execute operations for safe naoqi stop</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSystem._prepareNaoqiStopAsync">
            <summary>Execute operations for safe naoqi stop</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALTabletService">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTabletService.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTabletService.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTabletService.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALTabletService.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowWebview">
            <summary>Show Webview (with app-specific content)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowWebviewAsync">
            <summary>Show Webview (with app-specific content)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowWebview(System.String)">
            <summary>Show Webview and load the url</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowWebviewAsync(System.String)">
            <summary>Show Webview and load the url</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.LoadUrl(System.String)">
            <summary>Load URL on tablet</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.LoadUrlAsync(System.String)">
            <summary>Load URL on tablet</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ReloadPage(System.Boolean)">
            <summary>Reload current displayed web page</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ReloadPageAsync(System.Boolean)">
            <summary>Reload current displayed web page</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.LoadApplication(System.String)">
            <summary>Start application on tablet</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.LoadApplicationAsync(System.String)">
            <summary>Start application on tablet</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.HideWebview">
            <summary>Hide Webview </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.HideWebviewAsync">
            <summary>Hide Webview </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.CleanWebview">
            <summary>Clean Webview </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.CleanWebviewAsync">
            <summary>Clean Webview </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._clearWebviewCache(System.Boolean)">
            <summary>Clear the cache of the webview, false : just RAM, true DISK FILES also</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._clearWebviewCacheAsync(System.Boolean)">
            <summary>Clear the cache of the webview, false : just RAM, true DISK FILES also</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ExecuteJS(System.String)">
            <summary>Execute javascript </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ExecuteJSAsync(System.String)">
            <summary>Execute javascript </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setAnimatedCrossWalkView(System.Boolean)">
            <summary>CrossWalk animated render mode (can make the webview crash)</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setAnimatedCrossWalkViewAsync(System.Boolean)">
            <summary>CrossWalk animated render mode (can make the webview crash)</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setDebugCrossWalkViewEnable(System.Boolean)">
            <summary>CrossWalk animated render mode (can make the webview crash)</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setDebugCrossWalkViewEnableAsync(System.Boolean)">
            <summary>CrossWalk animated render mode (can make the webview crash)</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetOnTouchWebviewScaleFactor(System.Single)">
            <summary>Change the onTouch webview scale factor. Default is 1.34 so the viewport is 1707 × 1067</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetOnTouchWebviewScaleFactorAsync(System.Single)">
            <summary>Change the onTouch webview scale factor. Default is 1.34 so the viewport is 1707 × 1067</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetOnTouchScaleFactor">
            <summary>get the onTouch scale factor for current view, by default 1.34 for the webview and 1 for the other views</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetOnTouchScaleFactorAsync">
            <summary>get the onTouch scale factor for current view, by default 1.34 for the webview and 1 for the other views</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PlayVideo(System.String)">
            <summary>Play video on tablet</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PlayVideoAsync(System.String)">
            <summary>Play video on tablet</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ResumeVideo">
            <summary>Resume video on tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ResumeVideoAsync">
            <summary>Resume video on tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PauseVideo">
            <summary>Pause video activity on tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PauseVideoAsync">
            <summary>Pause video activity on tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.StopVideo">
            <summary>Stop video activity on tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.StopVideoAsync">
            <summary>Stop video activity on tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetVideoPosition">
            <summary>Get video position (in ms from beginning)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetVideoPositionAsync">
            <summary>Get video position (in ms from beginning)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetVideoLength">
            <summary>Get video length (in ms)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetVideoLengthAsync">
            <summary>Get video length (in ms)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PreLoadImage(System.String)">
            <summary>preload an image</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PreLoadImageAsync(System.String)">
            <summary>preload an image</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowImage(System.String)">
            <summary>show an image</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowImageAsync(System.String)">
            <summary>show an image</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowImageNoCache(System.String)">
            <summary>show an image, disable tablet cache</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowImageNoCacheAsync(System.String)">
            <summary>show an image, disable tablet cache</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.HideImage">
            <summary>Hide an image</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.HideImageAsync">
            <summary>Hide an image</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ResumeGif">
            <summary>resume the gif</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ResumeGifAsync">
            <summary>resume the gif</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PauseGif">
            <summary>pause the gif</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.PauseGifAsync">
            <summary>pause the gif</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetBackgroundColor(System.String)">
            <summary>Set the background color for image</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetBackgroundColorAsync(System.String)">
            <summary>Set the background color for image</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._startAnimation(System.String)">
            <summary>Show a flash animation</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._startAnimationAsync(System.String)">
            <summary>Show a flash animation</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._stopAnimation">
            <summary>Hide a flash animation</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._stopAnimationAsync">
            <summary>Hide a flash animation</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.Hide">
            <summary>hide the top view</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.HideAsync">
            <summary>hide the top view</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetBrightness(System.Single)">
            <summary>Change screen brightness</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetBrightnessAsync(System.Single)">
            <summary>Change screen brightness</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetBrightness">
            <summary>Change screen brightness</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetBrightnessAsync">
            <summary>Change screen brightness</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.TurnScreenOn(System.Boolean)">
            <summary>Turn on (true) / off (false)  the screen</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.TurnScreenOnAsync(System.Boolean)">
            <summary>Turn on (true) / off (false)  the screen</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GoToSleep">
            <summary>Put the tablet in sleep mode (standby mode)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GoToSleepAsync">
            <summary>Put the tablet in sleep mode (standby mode)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.WakeUp">
            <summary>Put the tablet in wake mode (standby mode)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.WakeUpAsync">
            <summary>Put the tablet in wake mode (standby mode)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._displayToast(System.String,System.Int32)">
            <summary>Display an android Toast: 1) Text to display 2) Duration 1 long, 0 short</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._displayToastAsync(System.String,System.Int32)">
            <summary>Display an android Toast: 1) Text to display 2) Duration 1 long, 0 short</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._displayToast(System.String,System.Int32,System.Int32)">
            <summary>Display an android Toast: 1) Text to display 2) Duration 1 long, 0 short 3) Text size</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._displayToastAsync(System.String,System.Int32,System.Int32)">
            <summary>Display an android Toast: 1) Text to display 2) Duration 1 long, 0 short 3) Text size</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetWifiStatus">
            <summary>Check the WIFI on the tablet : IDLE, SCANNING, DISCONNECTED, CONNECTED</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetWifiStatusAsync">
            <summary>Check the WIFI on the tablet : IDLE, SCANNING, DISCONNECTED, CONNECTED</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.EnableWifi">
            <summary>Enable the wifi on the tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.EnableWifiAsync">
            <summary>Enable the wifi on the tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.DisableWifi">
            <summary>Disable the wifi on the tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.DisableWifiAsync">
            <summary>Disable the wifi on the tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ForgetWifi(System.String)">
            <summary>Forget the wifi : 1) SSID</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ForgetWifiAsync(System.String)">
            <summary>Forget the wifi : 1) SSID</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ConnectWifi(System.String)">
            <summary>Try to connect to the wifi by is SSID</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ConnectWifiAsync(System.String)">
            <summary>Try to connect to the wifi by is SSID</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.DisconnectWifi">
            <summary>Disconnect current wifi</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.DisconnectWifiAsync">
            <summary>Disconnect current wifi</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ConfigureWifi(System.String,System.String,System.String)">
            <summary>Configure the WIFI, arguments:        1) is type among (wep, wpa, open)        2) is the wifi SSID        3) is wep or wap passphrase </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ConfigureWifiAsync(System.String,System.String,System.String)">
            <summary>Configure the WIFI, arguments:        1) is type among (wep, wpa, open)        2) is the wifi SSID        3) is wep or wap passphrase </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetWifiMacAddress">
            <summary>Get the wifi mac address</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetWifiMacAddressAsync">
            <summary>Get the wifi mac address</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowInputTextDialog(System.String,System.String,System.String)">
            <summary>Show a input text dialog, arguments        1) the title        2) is the ok text         3) the cancel text </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowInputTextDialogAsync(System.String,System.String,System.String)">
            <summary>Show a input text dialog, arguments        1) the title        2) is the ok text         3) the cancel text </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowInputTextDialog(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Show a input text dialog, arguments        1) the title        2) is the ok text         3) the cancel text        4) the pre-filled text of the input field        5) input characters limit</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowInputTextDialogAsync(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Show a input text dialog, arguments        1) the title        2) is the ok text         3) the cancel text        4) the pre-filled text of the input field        5) input characters limit</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowInputDialog(System.String,System.String,System.String,System.String)">
            <summary>Show a input text dialog, arguments :        1) is type among text, password, email, url, number        2) the title        3) is the ok text        4) the cancel text</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowInputDialogAsync(System.String,System.String,System.String,System.String)">
            <summary>Show a input text dialog, arguments :        1) is type among text, password, email, url, number        2) the title        3) is the ok text        4) the cancel text</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowInputDialog(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Show a input text dialog, arguments        1) is type among text, password, email, url, number        2) the title        3) is the ok text        4) the cancel text        5) the pre-filled text of the input field, use '' if you don't want any        6) input characters limit, use -1 if you don't want a limit</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowInputDialogAsync(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Show a input text dialog, arguments        1) is type among text, password, email, url, number        2) the title        3) is the ok text        4) the cancel text        5) the pre-filled text of the input field, use '' if you don't want any        6) input characters limit, use -1 if you don't want a limit</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowAlertView(System.Single,System.String,System.Int32)">
            <summary>Test debug function</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ShowAlertViewAsync(System.Single,System.String,System.Int32)">
            <summary>Test debug function</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.HideDialog">
            <summary>Hide the dialog view</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.HideDialogAsync">
            <summary>Hide the dialog view</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetKeyboard(System.String)">
            <summary>Set keyboard using is keyboard id from getAvailableKeyboards</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetKeyboardAsync(System.String)">
            <summary>Set keyboard using is keyboard id from getAvailableKeyboards</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetAvailableKeyboards">
            <summary>get available keyboards</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetAvailableKeyboardsAsync">
            <summary>get available keyboards</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetTabletLanguage(System.String)">
            <summary>Change the tablet language: fr, fr_FR, en, us, it, ja ... </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetTabletLanguageAsync(System.String)">
            <summary>Change the tablet language: fr, fr_FR, en, us, it, ja ... </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._openSettings">
            <summary>Open android settings</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._openSettingsAsync">
            <summary>Open android settings</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetVolume(System.Int32)">
            <summary>Set the volume of the tablet between 0 and 15</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.SetVolumeAsync(System.Int32)">
            <summary>Set the volume of the tablet between 0 and 15</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setDebugEnabled(System.Boolean)">
            <summary>Enable debug menu.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setDebugEnabledAsync(System.Boolean)">
            <summary>Enable debug menu.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setTimeZone(System.String)">
            <summary>Set the system time zone (Ex: Europe/Paris)</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setTimeZoneAsync(System.String)">
            <summary>Set the system time zone (Ex: Europe/Paris)</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setStackTraceDepth(System.Int32)">
            <summary>Number of lines that will be send for java stacktrace, current is </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setStackTraceDepthAsync(System.Int32)">
            <summary>Number of lines that will be send for java stacktrace, current is </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._ping">
            <summary>Simple ping/pong method. Return 'pong'</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._pingAsync">
            <summary>Simple ping/pong method. Return 'pong'</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.RobotIp">
            <summary>Get IP of connected robot</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.RobotIpAsync">
            <summary>Get IP of connected robot</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetCurrentLifeActivity">
            <summary>Return the current life activity running</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetCurrentLifeActivityAsync">
            <summary>Return the current life activity running</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.Version">
            <summary>Return service version</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.VersionAsync">
            <summary>Return service version</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._firmwareVersion">
            <summary>Return android firmware version</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._firmwareVersionAsync">
            <summary>Return android firmware version</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._launcherVersion">
            <summary>Return launcher version</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._launcherVersionAsync">
            <summary>Return launcher version</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ResetTablet">
            <summary>reset the tablet (get back to the bubble views and clear everything)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ResetTabletAsync">
            <summary>reset the tablet (get back to the bubble views and clear everything)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._enableResetTablet(System.Boolean)">
            <summary>enable reset tablet command (true by default)</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._enableResetTabletAsync(System.Boolean)">
            <summary>enable reset tablet command (true by default)</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._cancelReset">
            <summary>Cancel reset tablet (standby mode)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._cancelResetAsync">
            <summary>Cancel reset tablet (standby mode)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setPreventCommandScreenOff(System.Boolean)">
            <summary>Prevent to run command if screen is turn off, default is true</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setPreventCommandScreenOffAsync(System.Boolean)">
            <summary>Prevent to run command if screen is turn off, default is true</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setOpenGLState(System.Int32)">
            <summary>Set custom Open GL state</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setOpenGLStateAsync(System.Int32)">
            <summary>Set custom Open GL state</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setBlackScreenMode(System.Boolean)">
            <summary>Set if we use a black screen to turn off the screen</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setBlackScreenModeAsync(System.Boolean)">
            <summary>Set if we use a black screen to turn off the screen</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._update">
            <summary>Update browser service</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._updateAsync">
            <summary>Update browser service</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._uninstallApps">
            <summary>Uninstall both the launcher and the browser</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._uninstallAppsAsync">
            <summary>Uninstall both the launcher and the browser</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._uninstallLauncher">
            <summary>Uninstall the launcher</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._uninstallLauncherAsync">
            <summary>Uninstall the launcher</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._uninstallBrowser">
            <summary>Uninstall the browser</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._uninstallBrowserAsync">
            <summary>Uninstall the browser</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._wipeData">
            <summary>Wipe all the data</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._wipeDataAsync">
            <summary>Wipe all the data</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._restart">
            <summary>Restart the browser application</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._restartAsync">
            <summary>Restart the browser application</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._powerOff">
            <summary>Turn off the tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._powerOffAsync">
            <summary>Turn off the tablet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._installApk(System.String)">
            <summary>Install an android APK using an url</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._installApkAsync(System.String)">
            <summary>Install an android APK using an url</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._launchApk(System.String)">
            <summary>Launch an android APK using his package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._launchApkAsync(System.String)">
            <summary>Launch an android APK using his package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._removeApk(System.String)">
            <summary>Remove an android APK using his package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._removeApkAsync(System.String)">
            <summary>Remove an android APK using his package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._listApks">
            <summary>List all apks on the tablet (return package names)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._listApksAsync">
            <summary>List all apks on the tablet (return package names)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._stopApk(System.String)">
            <summary>Stop APK given is package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._stopApkAsync(System.String)">
            <summary>Stop APK given is package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._isApkExist(System.String)">
            <summary>Test is apk installed using his package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._isApkExistAsync(System.String)">
            <summary>Test is apk installed using his package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._getApkVersion(System.String)">
            <summary>Get apk version using his package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._getApkVersionAsync(System.String)">
            <summary>Get apk version using his package name</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._test">
            <summary>test function</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._testAsync">
            <summary>test function</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._crash">
            <summary>Crash the browser</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._crashAsync">
            <summary>Crash the browser</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetLastVideoErrorLog">
            <summary>Get last video played error log [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.GetLastVideoErrorLogAsync">
            <summary>Get last video played error log [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.EnableWebviewTouch">
            <summary>Enable touch signal on webview [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.EnableWebviewTouchAsync">
            <summary>Enable touch signal on webview [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.DisableWebviewTouch">
            <summary>Disable touch signal on webview [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.DisableWebviewTouchAsync">
            <summary>Disable touch signal on webview [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ResetToDefaultValue">
            <summary>reset to default value [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService.ResetToDefaultValueAsync">
            <summary>reset to default value [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._stopApk">
            <summary>Stop current apk [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._stopApkAsync">
            <summary>Stop current apk [DEPRECATED]</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setLifeDetectorEnabled(System.Boolean)">
            <summary>[DEPRECATED]</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTabletService._setLifeDetectorEnabledAsync(System.Boolean)">
            <summary>[DEPRECATED]</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALUserInfo">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALUserInfo.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALUserInfo.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALUserInfo.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALUserInfo.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Get(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.GetAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Get(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.GetAsync(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Get(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.GetAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Get(System.String,System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.GetAsync(System.String,System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._set(System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._setAsync(System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._set(System.Int32,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._setAsync(System.Int32,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Set(System.String,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.SetAsync(System.String,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Set(System.String,System.Int32,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.SetAsync(System.String,System.Int32,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Has(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.HasAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Has(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.HasAsync(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Has(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.HasAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Has(System.String,System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.HasAsync(System.String,System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._remove(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._removeAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._remove(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._removeAsync(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Remove(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RemoveAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.Remove(System.String,System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RemoveAsync(System.String,System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RemoveUser(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RemoveUserAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RemoveUser(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.RemoveUserAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._removeUser">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._removeUserAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._removeUser(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo._removeUserAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.GetType(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserInfo.GetTypeAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALUserSession">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALUserSession.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALUserSession.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALUserSession.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALUserSession.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoesUserExist(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoesUserExistAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoUsersExist(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoUsersExistAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserList">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserListAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetNumUsers">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetNumUsersAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetFocusedUser">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetFocusedUserAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetOpenUserSessions">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetOpenUserSessionsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.IsUserSessionOpen(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.IsUserSessionOpenAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.AreUserSessionsOpen(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.AreUserSessionsOpenAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.IsUserPermanent(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.IsUserPermanentAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.AreUsersPermanent(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.AreUsersPermanentAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetPermanentUserList">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetPermanentUserListAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._rememberUserPermanently(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._rememberUserPermanentlyAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._forgetPermanentUser(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._forgetPermanentUserAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetBindingList">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetBindingListAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoesBindingExist(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoesBindingExistAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserBinding(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserBindingAsync(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserBindings(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserBindingsAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.FindUsersWithBinding(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.FindUsersWithBindingAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUsidFromPpid(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUsidFromPpidAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetPpidFromUsid(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetPpidFromUsidAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._checkPhotoForIdentification(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._checkPhotoForIdentificationAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._reinforceIdentificationFromPhoto(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._reinforceIdentificationFromPhotoAsync(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._createUserFromPhoto(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._createUserFromPhotoAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._setFocusedUser(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._setFocusedUserAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._createUsers(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._createUsersAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._deleteUser(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._deleteUserAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._deleteUsers(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._deleteUsersAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._openUserSessions(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._openUserSessionsAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._closeUserSessions(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._closeUserSessionsAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._bindUser(System.Int32,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._bindUserAsync(System.Int32,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._unbindUser(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._unbindUserAsync(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._getDatabaseVersion">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._getDatabaseVersionAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._deleteAllUsers">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._deleteAllUsersAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetBindingSources">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetBindingSourcesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoesBindingSourceExist(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoesBindingSourceExistAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserDataSources">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserDataSourcesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoesUserDataSourceExist(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.DoesUserDataSourceExistAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._registerUserDataSource(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._registerUserDataSourceAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._unregisterUserDataSource(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._unregisterUserDataSourceAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserData(System.Int32,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserDataAsync(System.Int32,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserData(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserDataAsync(System.Int32,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.SetUserData(System.Int32,System.String,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.SetUserDataAsync(System.Int32,System.String,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserCreationDate(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetUserCreationDateAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetFirstEncounterDate(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetFirstEncounterDateAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetCurrentEncounterDate(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetCurrentEncounterDateAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetLastEncounterDate(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetLastEncounterDateAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetSecondsSinceLastEncounter(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession.GetSecondsSinceLastEncounterAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._getSecondsSinceUserCreation(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALUserSession._getSecondsSinceUserCreationAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALWorldRepresentation">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALWorldRepresentation.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALWorldRepresentation.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALWorldRepresentation.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALWorldRepresentation.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.AddAttributeToCategory(System.String,System.String,System.Object)">
            <summary>Add an attribute to a category.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.AddAttributeToCategoryAsync(System.String,System.String,System.Object)">
            <summary>Add an attribute to a category.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ClearObject(System.String)">
            <summary>Clear an object.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ClearObjectAsync(System.String)">
            <summary>Clear an object.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ClearOldPositions(System.String,System.Int32)">
            <summary>Clear recording of old positions.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ClearOldPositionsAsync(System.String,System.Int32)">
            <summary>Clear recording of old positions.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.CreateObjectCategory(System.String,System.Boolean)">
            <summary>Create a new object category</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.CreateObjectCategoryAsync(System.String,System.Boolean)">
            <summary>Create a new object category</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.RemoveObjectCategory(System.String)">
            <summary>Remove an object category</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.RemoveObjectCategoryAsync(System.String)">
            <summary>Remove an object category</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ObjectCategoryExists(System.String)">
            <summary>Tells if an object category exists</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.ObjectCategoryExistsAsync(System.String)">
            <summary>Tells if an object category exists</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.DeleteObjectAttribute(System.String,System.String,System.String)">
            <summary>Delete an object attribute</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.DeleteObjectAttributeAsync(System.String,System.String,System.String)">
            <summary>Delete an object attribute</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.FindObject(System.String)">
            <summary>Check that an object is present.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.FindObjectAsync(System.String)">
            <summary>Check that an object is present.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Load">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.LoadAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetAttributesFromCategory(System.String)">
            <summary>Get all attributes from a category if it exists.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetAttributesFromCategoryAsync(System.String)">
            <summary>Get all attributes from a category if it exists.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetChildrenNames(System.String)">
            <summary>Get the direct children of an object.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetChildrenNamesAsync(System.String)">
            <summary>Get the direct children of an object.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectNames">
            <summary>Get the name of the objects.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectNamesAsync">
            <summary>Get the name of the objects.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectAttributes(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectAttributesAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectAttributeValues(System.String,System.String,System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectAttributeValuesAsync(System.String,System.String,System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectLatestAttributes(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectLatestAttributesAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectParentName(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectParentNameAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectsInCategory(System.String)">
            <summary>Get the name of the objects stored in the database.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectsInCategoryAsync(System.String)">
            <summary>Get the name of the objects stored in the database.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectCategory(System.String)">
            <summary>Get the name of the database where the object is stored.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetObjectCategoryAsync(System.String)">
            <summary>Get the name of the database where the object is stored.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetPosition(System.String,System.String)">
            <summary>Get the position of an object with quaternion / translation.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetPositionAsync(System.String,System.String)">
            <summary>Get the position of an object with quaternion / translation.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetPosition6D(System.String,System.String)">
            <summary>Get the position from one object to another.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetPosition6DAsync(System.String,System.String)">
            <summary>Get the position from one object to another.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetPosition6DAtTime(System.String,System.String,System.Int32,System.Int32)">
            <summary>Get the interpolated position of an object</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetPosition6DAtTimeAsync(System.String,System.String,System.Int32,System.Int32)">
            <summary>Get the interpolated position of an object</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetRootName">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.GetRootNameAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Save">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.SaveAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.Select(System.String,System.String,System.String,System.String)">
            <summary>Select information from a database.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.SelectAsync(System.String,System.String,System.String,System.String)">
            <summary>Select information from a database.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.SelectWithOrder(System.String,System.String,System.String,System.String,System.String)">
            <summary>Select ordered information from a database.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.SelectWithOrderAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>Select ordered information from a database.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StoreObject(System.String,System.String,System.Collections.Generic.IEnumerable{System.Single},System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StoreObjectAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Single},System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StoreObjectWithReference(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Single},System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StoreObjectWithReferenceAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Single},System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StoreObjectAttribute(System.String,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.StoreObjectAttributeAsync(System.String,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.UpdatePosition(System.String,System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
            <summary>Update the position of an object.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.UpdatePositionAsync(System.String,System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
            <summary>Update the position of an object.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.UpdatePositionWithReference(System.String,System.String,System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
            <summary>Update the position of an object relative to another.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.UpdatePositionWithReferenceAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
            <summary>Update the position of an object relative to another.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.UpdateAttribute(System.String,System.String,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation.UpdateAttributeAsync(System.String,System.String,System.String,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation._startMemoryCheck(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation._startMemoryCheckAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation._stopMemoryCheck">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation._stopMemoryCheckAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation._beginTransaction(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation._beginTransactionAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation._endTransaction(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWorldRepresentation._endTransactionAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.PackageManager">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.PackageManager.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.PackageManager.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.PackageManager.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.PackageManager.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Install(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.InstallAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Install(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.InstallAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.InstallCheckMd5(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.InstallCheckMd5Async(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._install(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._installAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._install(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._installAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._install(System.String,System.String,System.String,System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._installAsync(System.String,System.String,System.String,System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._install(System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._installAsync(System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._install(System.Object,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._installAsync(System.Object,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.HasPackage(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.HasPackageAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Packages2">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Packages2Async">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Package2(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Package2Async(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.PackageIcon(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.PackageIconAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.RemovePkg(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.RemovePkgAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._getHttpTransferPort">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._getHttpTransferPortAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._openFileTransferSession(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._openFileTransferSessionAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._closeFileTransferSession(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager._closeFileTransferSessionAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.GetPackages">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.GetPackagesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Packages">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.PackagesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Package(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.PackageAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.GetPackage(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.GetPackageAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.GetPackageIcon(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.GetPackageIconAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Install(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.InstallAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Install(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.InstallAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.Remove(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.PackageManager.RemoveAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.DCM">
            <summary>Manage link with devices (sensors and actuators). See specific documentation.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.DCM.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.DCM.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.DCM.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.DCM.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Set(System.Object)">
            <summary>Call this function to send a timed-command list to an actuator</summary>
            <param name="arg0_commands">AL::ALValue with all data</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.SetAsync(System.Object)">
            <summary>Call this function to send a timed-command list to an actuator</summary>
            <param name="arg0_commands">AL::ALValue with all data</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.SetAlias(System.Object)">
            <summary>Call this function to send timed-command list to an alias (list of actuators)</summary>
            <param name="arg0_commands">AL::ALValue with all data</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.SetAliasAsync(System.Object)">
            <summary>Call this function to send timed-command list to an alias (list of actuators)</summary>
            <param name="arg0_commands">AL::ALValue with all data</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.SetAlias(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Call this function to send timed-command list to an alias (list of actuators) with &quot;ClearAll&quot; merge startegy</summary>
            <param name="arg0_name">alias name</param>
            <param name="arg1_time">time for the timed command</param>
            <param name="arg2_commands">std::vector&lt;float&gt; with all commands</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.SetAliasAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Call this function to send timed-command list to an alias (list of actuators) with &quot;ClearAll&quot; merge startegy</summary>
            <param name="arg0_name">alias name</param>
            <param name="arg1_time">time for the timed command</param>
            <param name="arg2_commands">std::vector&lt;float&gt; with all commands</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetTime(System.Int32)">
            <summary>Return the DCM time</summary>
            <param name="arg0_offset">optional time in ms (signed) to add/remove</param>
            <returns>An integer (could be signed) with the DCM time</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetTimeAsync(System.Int32)">
            <summary>Return the DCM time</summary>
            <param name="arg0_offset">optional time in ms (signed) to add/remove</param>
            <returns>An integer (could be signed) with the DCM time</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.CreateAlias(System.Object)">
            <summary>Create or change an alias (list of actuators)</summary>
            <param name="arg0_alias">Alias name and description</param>
            <returns>Same as pParams, but with the name removed if the actuator is not found</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.CreateAliasAsync(System.Object)">
            <summary>Create or change an alias (list of actuators)</summary>
            <param name="arg0_alias">Alias name and description</param>
            <returns>Same as pParams, but with the name removed if the actuator is not found</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetPrefix">
            <summary>Return the STM base name</summary>
            <returns>the STM base name for all device/sensors (1st string in the array) and all devices (2nd string in the array)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.GetPrefixAsync">
            <summary>Return the STM base name</summary>
            <returns>the STM base name for all device/sensors (1st string in the array) and all devices (2nd string in the array)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Special(System.String)">
            <summary>Special DCM commands</summary>
            <param name="arg0_result">one string and could be Reset, Version, Chain, Diagnostic, Config</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.SpecialAsync(System.String)">
            <summary>Special DCM commands</summary>
            <param name="arg0_result">one string and could be Reset, Version, Chain, Diagnostic, Config</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Calibration(System.Object)">
            <summary>Calibration of a joint</summary>
            <param name="arg0_calibrationInput">A complex ALValue. See red documentation</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.CalibrationAsync(System.Object)">
            <summary>Calibration of a joint</summary>
            <param name="arg0_calibrationInput">A complex ALValue. See red documentation</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.Preferences(System.String,System.String,System.String,System.Object)">
            <summary>Save updated value from DCM in XML pref file</summary>
            <param name="arg0_action">string : 'Save' 'Load' 'Add'</param>
            <param name="arg1_target">string : 'Chest' 'Head' 'Main' 'All' </param>
            <param name="arg2_keyName">The name of the key if action = 'Add'.</param>
            <param name="arg3_keyValue">The ALVAlue of the key to add</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM.PreferencesAsync(System.String,System.String,System.String,System.Object)">
            <summary>Save updated value from DCM in XML pref file</summary>
            <param name="arg0_action">string : 'Save' 'Load' 'Add'</param>
            <param name="arg1_target">string : 'Chest' 'Head' 'Main' 'All' </param>
            <param name="arg2_keyName">The name of the key if action = 'Add'.</param>
            <param name="arg3_keyValue">The ALVAlue of the key to add</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM._injectionAdd(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Add or update data for injection</summary>
            <param name="arg0_key">List of key name</param>
            <param name="arg1_values">list of values (float, could be cast in int)</param>
            <returns>bool : false on error, true if ok</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM._injectionAddAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Add or update data for injection</summary>
            <param name="arg0_key">List of key name</param>
            <param name="arg1_values">list of values (float, could be cast in int)</param>
            <returns>bool : false on error, true if ok</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM._injectionStop">
            <summary>Stop datas injection</summary>
            <returns>Nothing</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM._injectionStopAsync">
            <summary>Stop datas injection</summary>
            <returns>Nothing</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM._injectionRemove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Remove datas for injection</summary>
            <param name="arg0_key">List of key name</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.DCM._injectionRemoveAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Remove datas for injection</summary>
            <param name="arg0_key">List of key name</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALAutonomousBlinking">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAutonomousBlinking.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAutonomousBlinking.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAutonomousBlinking.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALAutonomousBlinking.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.SetEnabled(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.SetEnabledAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.IsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousBlinking.IsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALAutonomousLife">
            <summary>Manages the focused Activity and Autonomous Life state</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAutonomousLife.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAutonomousLife.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAutonomousLife.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALAutonomousLife.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onPreferenceChanged(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onPreferenceChangedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.OnReady(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.OnReadyAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onRobotHealthChanged(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onRobotHealthChangedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onPushRecovery(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onPushRecoveryAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onFallRecovery(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onFallRecoveryAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onRobotMoved(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._onRobotMovedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._setStateChangeEnabled(System.Boolean)">
            <summary></summary>
            <param name="arg0_enabled">Enabled/Disable the setState() method.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._setStateChangeEnabledAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0_enabled">Enabled/Disable the setState() method.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._loadConfigFile(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._loadConfigFileAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetState(System.String)">
            <summary>Programatically control the state of Autonomous Life</summary>
            <param name="arg0_state">The possible states of AutonomousLife are: interactive, solitary, safeguard, disabled</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetStateAsync(System.String)">
            <summary>Programatically control the state of Autonomous Life</summary>
            <param name="arg0_state">The possible states of AutonomousLife are: interactive, solitary, safeguard, disabled</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetState">
            <summary>Returns the current state of AutonomousLife</summary>
            <returns>Can be: solitary, interactive, safeguard, disabled</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetStateAsync">
            <summary>Returns the current state of AutonomousLife</summary>
            <returns>Can be: solitary, interactive, safeguard, disabled</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.FocusedActivity">
            <summary>Returns the currently focused activity</summary>
            <returns>The name of the focused activity</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.FocusedActivityAsync">
            <summary>Returns the currently focused activity</summary>
            <returns>The name of the focused activity</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SwitchFocus(System.String)">
            <summary>Set an activity as running with user focus</summary>
            <param name="arg0_activity_name">The package_name/activity_name to run</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SwitchFocusAsync(System.String)">
            <summary>Set an activity as running with user focus</summary>
            <param name="arg0_activity_name">The package_name/activity_name to run</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SwitchFocus(System.String,System.Int32)">
            <summary>Set an activity as running with user focus</summary>
            <param name="arg0_activity_name">The package_name/activity_name to run</param>
            <param name="arg1_flags">Int flags for focus changing. STOP_CURRENT(0) or STOP_AND_STACK_CURRENT(1)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SwitchFocusAsync(System.String,System.Int32)">
            <summary>Set an activity as running with user focus</summary>
            <param name="arg0_activity_name">The package_name/activity_name to run</param>
            <param name="arg1_flags">Int flags for focus changing. STOP_CURRENT(0) or STOP_AND_STACK_CURRENT(1)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StopFocus">
            <summary>Stops the focused activity. If another activity is stacked it will be started.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StopFocusAsync">
            <summary>Stops the focused activity. If another activity is stacked it will be started.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StopAll">
            <summary>Stops the focused activity and clears stack of activities</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StopAllAsync">
            <summary>Stops the focused activity and clears stack of activities</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetFocusContext(System.String)">
            <summary>Get a value of an ALMemory key that is used in a condition, which is the value at the previous autonomous activity focus.</summary>
            <param name="arg0_name">Name of the ALMemory key to get.  Will throw if key is not used in any activity conditions.</param>
            <returns>An array of the ALValue of the memory key and timestamp of when it was set: [seconds, microseconds, value]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetFocusContextAsync(System.String)">
            <summary>Get a value of an ALMemory key that is used in a condition, which is the value at the previous autonomous activity focus.</summary>
            <param name="arg0_name">Name of the ALMemory key to get.  Will throw if key is not used in any activity conditions.</param>
            <returns>An array of the ALValue of the memory key and timestamp of when it was set: [seconds, microseconds, value]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetActivityContextPermissionViolations(System.String)">
            <summary>Get a list of permissions that would be violated by a given activity in the current context.</summary>
            <param name="arg0_name">The name of the activity to check.</param>
            <returns>An array of strings of the violated permissions. EG: [&quot;nature&quot;, &quot;canRunOnPod&quot;, &quot;canRunInSleep&quot;]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetActivityContextPermissionViolationsAsync(System.String)">
            <summary>Get a list of permissions that would be violated by a given activity in the current context.</summary>
            <param name="arg0_name">The name of the activity to check.</param>
            <returns>An array of strings of the violated permissions. EG: [&quot;nature&quot;, &quot;canRunOnPod&quot;, &quot;canRunInSleep&quot;]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetActivityNature(System.String)">
            <summary>Returns the nature of an activity</summary>
            <param name="arg0_activity_name">The package_name/activity_name to check</param>
            <returns>Possible values are: solitary, interactive</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetActivityNatureAsync(System.String)">
            <summary>Returns the nature of an activity</summary>
            <param name="arg0_activity_name">The package_name/activity_name to check</param>
            <returns>Possible values are: solitary, interactive</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetActivityStatistics">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetActivityStatisticsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetAutonomousActivityStatistics">
            <summary>Get launch count, last completion time, etc for activities with autonomous launch trigger conditions.</summary>
            <returns>A map of activity names, with a cooresponding map of  &quot;prevStartTime&quot;, &quot;prevCompletionTime&quot;, &quot;startCount&quot;, &quot;totalDuration&quot;. Times are 0 for unlaunched Activities</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetAutonomousActivityStatisticsAsync">
            <summary>Get launch count, last completion time, etc for activities with autonomous launch trigger conditions.</summary>
            <returns>A map of activity names, with a cooresponding map of  &quot;prevStartTime&quot;, &quot;prevCompletionTime&quot;, &quot;startCount&quot;, &quot;totalDuration&quot;. Times are 0 for unlaunched Activities</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetFocusHistory">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetFocusHistoryAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetFocusHistory(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetFocusHistoryAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetStateHistory">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetStateHistoryAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetStateHistory(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetStateHistoryAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetLifeTime">
            <summary>Get the time in seconds as life sees it.  Based on gettimeofday()</summary>
            <returns>The int time in seconds as Autonomous Life sees it</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetLifeTimeAsync">
            <summary>Get the time in seconds as life sees it.  Based on gettimeofday()</summary>
            <returns>The int time in seconds as Autonomous Life sees it</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetAutonomousAbilityEnabled(System.String,System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetAutonomousAbilityEnabledAsync(System.String,System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetAutonomousAbilityEnabled(System.String)">
            <summary>Know is an Autonomous Ability is enabled or not</summary>
            <param name="arg0_autonomousAbility">The Autonomous Ability.</param>
            <returns>True if the Autonomous Ability is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetAutonomousAbilityEnabledAsync(System.String)">
            <summary>Know is an Autonomous Ability is enabled or not</summary>
            <param name="arg0_autonomousAbility">The Autonomous Ability.</param>
            <returns>True if the Autonomous Ability is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetAutonomousAbilitiesStatus">
            <summary>Get the Autonomous Abilities status (get the autonomous abilities name and booleans to know if they are enabled or running</summary>
            <returns>The Autonomous Abilities status. A vector containing a status for each autonomous ability. Each status is composed of the autonomous ability name, a boolean to know if it's enabled and another boolean to know if it's running.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetAutonomousAbilitiesStatusAsync">
            <summary>Get the Autonomous Abilities status (get the autonomous abilities name and booleans to know if they are enabled or running</summary>
            <returns>The Autonomous Abilities status. A vector containing a status for each autonomous ability. Each status is composed of the autonomous ability name, a boolean to know if it's enabled and another boolean to know if it's running.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StartMonitoringLaunchpadConditions">
            <summary>Start monitoring ALMemory and reporting conditional triggers with AutonomousLaunchpad.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StartMonitoringLaunchpadConditionsAsync">
            <summary>Start monitoring ALMemory and reporting conditional triggers with AutonomousLaunchpad.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StopMonitoringLaunchpadConditions">
            <summary>Stop monitoring ALMemory and reporting conditional triggers with AutonomousLaunchpad.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.StopMonitoringLaunchpadConditionsAsync">
            <summary>Stop monitoring ALMemory and reporting conditional triggers with AutonomousLaunchpad.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsMonitoringLaunchpadConditions">
            <summary>Gets running status of AutonomousLaunchpad</summary>
            <returns>True if AutonomousLaunchpad is monitoring ALMemory and reporting conditional triggers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsMonitoringLaunchpadConditionsAsync">
            <summary>Gets running status of AutonomousLaunchpad</summary>
            <returns>True if AutonomousLaunchpad is monitoring ALMemory and reporting conditional triggers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetLaunchpadPluginEnabled(System.String,System.Boolean)">
            <summary>Temporarily enables/disables AutonomousLaunchpad Plugins</summary>
            <param name="arg0_plugin_name">The name of the plugin to enable/disable</param>
            <param name="arg1_enabled">Whether or not to enable this plugin</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetLaunchpadPluginEnabledAsync(System.String,System.Boolean)">
            <summary>Temporarily enables/disables AutonomousLaunchpad Plugins</summary>
            <param name="arg0_plugin_name">The name of the plugin to enable/disable</param>
            <param name="arg1_enabled">Whether or not to enable this plugin</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetEnabledLaunchpadPlugins">
            <summary>Get a list of enabled AutonomousLaunchpad Plugins.  Enabled plugins will run when AutonomousLaunchpad is started</summary>
            <returns>A list of strings of enabled plugins.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetEnabledLaunchpadPluginsAsync">
            <summary>Get a list of enabled AutonomousLaunchpad Plugins.  Enabled plugins will run when AutonomousLaunchpad is started</summary>
            <returns>A list of strings of enabled plugins.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetLaunchpadPluginsForGroup(System.String)">
            <summary>Get a list of AutonomousLaunchpad Plugins that belong to specified group</summary>
            <param name="arg0_group">The group to search for the plugins</param>
            <returns>A list of strings of the plugins belonging to the group.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetLaunchpadPluginsForGroupAsync(System.String)">
            <summary>Get a list of AutonomousLaunchpad Plugins that belong to specified group</summary>
            <param name="arg0_group">The group to search for the plugins</param>
            <returns>A list of strings of the plugins belonging to the group.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetRobotOffsetFromFloor(System.Single)">
            <summary>Set the vertical offset (in meters) of the base of the robot with respect to the floor</summary>
            <param name="arg0_offset">The new vertical offset (in meters)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetRobotOffsetFromFloorAsync(System.Single)">
            <summary>Set the vertical offset (in meters) of the base of the robot with respect to the floor</summary>
            <param name="arg0_offset">The new vertical offset (in meters)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetRobotOffsetFromFloor">
            <summary>Get the vertical offset (in meters) of the base of the robot with respect to the floor</summary>
            <returns>Current vertical offset (in meters)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.GetRobotOffsetFromFloorAsync">
            <summary>Get the vertical offset (in meters) of the base of the robot with respect to the floor</summary>
            <returns>Current vertical offset (in meters)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._forbidAutonomousInteractiveStateChange(System.Boolean)">
            <summary></summary>
            <param name="arg0_is_forbidden"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._forbidAutonomousInteractiveStateChangeAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0_is_forbidden"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._forbidAutonomousActivityFocusSwitch(System.Boolean)">
            <summary></summary>
            <param name="arg0_is_forbidden"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._forbidAutonomousActivityFocusSwitchAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0_is_forbidden"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetSafeguardEnabled(System.String,System.Boolean)">
            <summary>Set if a given safeguard will be handled by Autonomous Life or not.</summary>
            <param name="arg0_name">Name of the safeguard to consider: RobotPushed, RobotFell,CriticalDiagnosis, CriticalTemperature</param>
            <param name="arg1_enabled">True if life handles the safeguard.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.SetSafeguardEnabledAsync(System.String,System.Boolean)">
            <summary>Set if a given safeguard will be handled by Autonomous Life or not.</summary>
            <param name="arg0_name">Name of the safeguard to consider: RobotPushed, RobotFell,CriticalDiagnosis, CriticalTemperature</param>
            <param name="arg1_enabled">True if life handles the safeguard.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsSafeguardEnabled(System.String)">
            <summary>Get if a given safeguard will be handled by Autonomous Life or not.</summary>
            <param name="arg0_name">Name of the safeguard to consider: RobotPushed, RobotFell,CriticalDiagnosis, CriticalTemperature</param>
            <returns>True if life handles the safeguard.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife.IsSafeguardEnabledAsync(System.String)">
            <summary>Get if a given safeguard will be handled by Autonomous Life or not.</summary>
            <param name="arg0_name">Name of the safeguard to consider: RobotPushed, RobotFell,CriticalDiagnosis, CriticalTemperature</param>
            <returns>True if life handles the safeguard.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._isMovedSafeguardInstantaneous">
            <summary>Get if the movedsafeguard will be instantaneous, or end when move is stopped</summary>
            <returns>True if safeguard is instantaneous, false if safeguard exited after move stopped.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._isMovedSafeguardInstantaneousAsync">
            <summary>Get if the movedsafeguard will be instantaneous, or end when move is stopped</summary>
            <returns>True if safeguard is instantaneous, false if safeguard exited after move stopped.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._setPushRecoverySafeguardDuration(System.Int32)">
            <summary>Set how long to stay in safeguard state if robot pushed.</summary>
            <param name="arg0_duration_ms">Time in milliseconds to stay in safeguard state.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._setPushRecoverySafeguardDurationAsync(System.Int32)">
            <summary>Set how long to stay in safeguard state if robot pushed.</summary>
            <param name="arg0_duration_ms">Time in milliseconds to stay in safeguard state.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._getPushRecoverySafeguardDuration">
            <summary>Get how long to stay in safeguard state if robot pushed.</summary>
            <returns>Time in milliseconds to stay in safeguard state.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._getPushRecoverySafeguardDurationAsync">
            <summary>Get how long to stay in safeguard state if robot pushed.</summary>
            <returns>Time in milliseconds to stay in safeguard state.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._sleep">
            <summary>Put the robot to sleep.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._sleepAsync">
            <summary>Put the robot to sleep.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._wakeUp">
            <summary>Wake the robot up.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._wakeUpAsync">
            <summary>Wake the robot up.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._forbidStopCommands(System.Boolean)">
            <summary></summary>
            <param name="arg0_is_forbidden"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAutonomousLife._forbidStopCommandsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0_is_forbidden"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALBackgroundMovement">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBackgroundMovement.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBackgroundMovement.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALBackgroundMovement.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.SetEnabled(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.SetEnabledAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsRunning">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement.IsRunningAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement._setMode(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement._setModeAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement._getMode">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBackgroundMovement._getModeAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALBasicAwareness">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBasicAwareness.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBasicAwareness.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBasicAwareness.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALBasicAwareness.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onPeopleDetected(System.String,System.Object,System.String)">
            <summary>Population Updated (event: PeoplePerception/PopulationUpdated)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_populationUpdated">Boolean value for people detection event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onPeopleDetectedAsync(System.String,System.Object,System.String)">
            <summary>Population Updated (event: PeoplePerception/PopulationUpdated)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_populationUpdated">Boolean value for people detection event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onMovementDetected(System.String,System.Object,System.String)">
            <summary>Movement Detected (event: MovementDetection3D/MovementDetected)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_movementDetected">Boolean value for movement event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onMovementDetectedAsync(System.String,System.Object,System.String)">
            <summary>Movement Detected (event: MovementDetection3D/MovementDetected)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_movementDetected">Boolean value for movement event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onNavigationMotionDetected(System.String,System.Object,System.String)">
            <summary>Navigation Motion Detected (event: Navigation/MotionDetected)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_movementDetected">Boolean value for movement event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onNavigationMotionDetectedAsync(System.String,System.Object,System.String)">
            <summary>Navigation Motion Detected (event: Navigation/MotionDetected)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_movementDetected">Boolean value for movement event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onCloseMovementDetected(System.String,System.Object,System.String)">
            <summary>Close Movement Detected (event: WavingDetection/Waving)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_closeMovementDetected">Boolean value for close movement event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onCloseMovementDetectedAsync(System.String,System.Object,System.String)">
            <summary>Close Movement Detected (event: WavingDetection/Waving)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_closeMovementDetected">Boolean value for close movement event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onSoundDetected(System.String,System.Object,System.String)">
            <summary>Sound Detected (event: SoundLocated)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_SoundLocated">Boolean value for movement event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onSoundDetectedAsync(System.String,System.Object,System.String)">
            <summary>Sound Detected (event: SoundLocated)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_SoundLocated">Boolean value for movement event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onTouchDetected(System.String,System.Object,System.String)">
            <summary>Touch Detected (event: TouchDetection3D/TouchDetected)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_touchDetected">Boolean value for touch event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onTouchDetectedAsync(System.String,System.Object,System.String)">
            <summary>Touch Detected (event: TouchDetection3D/TouchDetected)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_touchDetected">Boolean value for touch event</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onFastPersonTracking(System.String,System.Object,System.String)">
            <summary>Servoing event callback (event:ALTracker/FastPersonTracking)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_tackerValue">Position to track.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onFastPersonTrackingAsync(System.String,System.Object,System.String)">
            <summary>Servoing event callback (event:ALTracker/FastPersonTracking)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_tackerValue">Position to track.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onNoFastPersonFound(System.String,System.Object,System.String)">
            <summary>No person found by fast tracking callback (event:ALFastPersonTracking/TrackedPersonNotFound)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_val">Content of the event.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onNoFastPersonFoundAsync(System.String,System.Object,System.String)">
            <summary>No person found by fast tracking callback (event:ALFastPersonTracking/TrackedPersonNotFound)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_val">Content of the event.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onHeadTracking(System.String,System.Object,System.String)">
            <summary>Servoing event callback (event:ALTracker/FindPersonHead)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_tackerValue">Position to track.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onHeadTrackingAsync(System.String,System.Object,System.String)">
            <summary>Servoing event callback (event:ALTracker/FindPersonHead)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_tackerValue">Position to track.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onHeadNotFound(System.String,System.Object,System.String)">
            <summary>HeadNotFound event callback (event:ALFindPersonHead/HeadNotFound)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_val">Content of the event.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onHeadNotFoundAsync(System.String,System.Object,System.String)">
            <summary>HeadNotFound event callback (event:ALFindPersonHead/HeadNotFound)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_val">Content of the event.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onHeadReached(System.String,System.Object,System.String)">
            <summary>HeadReached event callback (event:ALFindPersonHead/HeadReached)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_val">Content of the event.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onHeadReachedAsync(System.String,System.Object,System.String)">
            <summary>HeadReached event callback (event:ALFindPersonHead/HeadReached)</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_val">Content of the event.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onHeadTrackingStopped(System.String,System.Object,System.String)">
            <summary>tracking interruption</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_val">Content of the event.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onHeadTrackingStoppedAsync(System.String,System.Object,System.String)">
            <summary>tracking interruption</summary>
            <param name="arg0_name">Name of the event</param>
            <param name="arg1_val">Content of the event.</param>
            <param name="arg2_message">Event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetEnabled(System.Boolean)">
            <summary>Enable/Disable BasicAwareness.</summary>
            <param name="arg0_enabled">True to enable BasicAwareness, False to disable BasicAwareness.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetEnabledAsync(System.Boolean)">
            <summary>Enable/Disable BasicAwareness.</summary>
            <param name="arg0_enabled">True to enable BasicAwareness, False to disable BasicAwareness.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsEnabled">
            <summary>Return whether BasicAwareness is enabled or not.</summary>
            <returns>Boolean value, true if enabled else false</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsEnabledAsync">
            <summary>Return whether BasicAwareness is enabled or not.</summary>
            <returns>Boolean value, true if enabled else false</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsRunning">
            <summary>Return whether BasicAwareness is running.</summary>
            <returns>Boolean value, true if running else false</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsRunningAsync">
            <summary>Return whether BasicAwareness is running.</summary>
            <returns>Boolean value, true if running else false</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.StartAwareness">
            <summary>DEPRECATED since 2.4: use setEnabled instead.Start Basic Awareness.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.StartAwarenessAsync">
            <summary>DEPRECATED since 2.4: use setEnabled instead.Start Basic Awareness.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.StopAwareness">
            <summary>DEPRECATED since 2.4: use setEnabled instead.Stop Basic Awareness.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.StopAwarenessAsync">
            <summary>DEPRECATED since 2.4: use setEnabled instead.Stop Basic Awareness.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsAwarenessRunning">
            <summary>DEPRECATED since 2.4: use isEnabled instead.Get the status (started or not) of the module.</summary>
            <returns>Boolean value, true if running else false</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsAwarenessRunningAsync">
            <summary>DEPRECATED since 2.4: use isEnabled instead.Get the status (started or not) of the module.</summary>
            <returns>Boolean value, true if running else false</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.PauseAwareness">
            <summary>Pause BasicAwareness.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.PauseAwarenessAsync">
            <summary>Pause BasicAwareness.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.ResumeAwareness">
            <summary>Resume BasicAwareness.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.ResumeAwarenessAsync">
            <summary>Resume BasicAwareness.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsAwarenessPaused">
            <summary>Get the pause status of the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsAwarenessPausedAsync">
            <summary>Get the pause status of the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetStimulusDetectionEnabled(System.String,System.Boolean)">
            <summary>Enable/Disable Stimulus Detection.</summary>
            <param name="arg0_stimulusName">Name of the stimulus to enable/disable</param>
            <param name="arg1_isStimulusDetectionEnabled">Boolean value: true to enable, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetStimulusDetectionEnabledAsync(System.String,System.Boolean)">
            <summary>Enable/Disable Stimulus Detection.</summary>
            <param name="arg0_stimulusName">Name of the stimulus to enable/disable</param>
            <param name="arg1_isStimulusDetectionEnabled">Boolean value: true to enable, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsStimulusDetectionEnabled(System.String)">
            <summary>Get status enabled/disabled for Stimulus Detection.</summary>
            <param name="arg0_stimulusName">Name of the stimulus to check</param>
            <returns>Boolean value for status enabled/disabled</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.IsStimulusDetectionEnabledAsync(System.String)">
            <summary>Get status enabled/disabled for Stimulus Detection.</summary>
            <param name="arg0_stimulusName">Name of the stimulus to check</param>
            <returns>Boolean value for status enabled/disabled</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetParameter(System.String,System.Object)">
            <summary>Set the specified parameter </summary>
            <param name="arg0_paramName">&quot;LookStimulusSpeed&quot; : Speed of head moves when looking at a stimulus, as fraction of max speed &quot;LookBackSpeed&quot; : Speed of head moves when looking back to previous position, as fraction of max speed &quot;NobodyFoundTimeOut&quot; : timeout to send HumanLost event when no blob is found, in seconds &quot;MinTimeTracking&quot; : Minimum Time for the robot to be focused on someone, without listening to other stimuli, in seconds &quot;TimeSleepBeforeResumeMS&quot; : Slept time before automatically resuming BasicAwareness when an automatic pause has been made, in milliseconds &quot;TimeOutResetHead&quot; : Timeout to reset the head, in seconds &quot;AmplitudeYawTracking&quot; : max absolute value for head yaw in tracking, in degrees &quot;FramerateTracking&quot; : Framerate for FastPersonTracking and FindPersonHead, in frame per second &quot;PeoplePerceptionPeriod&quot; : Period for people perception, in milliseconds &quot;SlowPeoplePerceptionPeriod&quot; : Period for people perception in FullyEngaged mode, in milliseconds &quot;HeadThreshold&quot; : Yaw threshold for tracking, in degrees &quot;BodyRotationThreshold&quot; : Angular threshold for BodyRotation tracking mode, in degrees &quot;BodyRotationThresholdNao&quot; : Angular threshold for BodyRotation tracking mode on Nao, in degrees &quot;MoveDistanceX&quot; : X Distance for the Move tracking mode, in meters &quot;MoveDistanceY&quot; : Y Distance for the Move tracking mode, in meters &quot;MoveAngleTheta&quot; : Angle for the Move tracking mode, in degrees &quot;MoveThresholdX&quot; : Threshold for the Move tracking mode, in meters &quot;MoveThresholdY&quot; : Threshold for the Move tracking mode, in meters &quot;MoveThresholdTheta&quot; : Theta Threshold for the Move tracking mode, in degrees &quot;MaxDistanceFullyEngaged&quot; : Maximum distance for someone to be tracked for FullyEngaged mode, in meters &quot;MaxDistanceNotFullyEngaged&quot; : Maximum distance for someone to be tracked for modes different from FullyEngaged, in meters &quot;MaxHumanSearchTime&quot; : Maximum time to find a human after observing stimulus, in seconds &quot;DeltaPitchComfortZone&quot; : Pitch width of the comfort zone, in degree &quot;CenterPitchComfortZone&quot; : Pitch center of the confort zone, in degree &quot;SoundHeight&quot; : Default Height for sound detection, in meters &quot;MoveSpeed&quot; : Speed of the robot moves &quot;MC_Interactive_MinTime&quot; : Minimum time between 2 contextual moves (when the robot is tracking somebody) &quot;MC_Interactive_MaxOffsetTime&quot; : Maximum time that we can add to MC_Interactive_MinTime (when the robot is tracking somebody) &quot;MC_Interactive_DistanceXY&quot; : Maximum offset distance in X and Y that the robot can apply when he tracks somebody &quot;MC_Interactive_MinTheta&quot; : Minimum theta that the robot can apply when he tracks somebody &quot;MC_Interactive_MaxTheta&quot; : Maximum theta that the robot can apply when he tracks somebody &quot;MC_Interactive_DistanceHumanRobot&quot; : Distance between the human and the robot &quot;MC_Interactive_MaxDistanceHumanRobot&quot; : Maximum distance human robot to allow the robot to move (in MoveContextually mode) </param>
            <param name="arg1_newVal">&quot;LookStimulusSpeed&quot; : Float in range [0.01;1] &quot;LookBackSpeed&quot; : Float in range [0.01;1] &quot;NobodyFoundTimeOut&quot; : Float &gt; 0 &quot;MinTimeTracking&quot; : Float in range [0;20] &quot;TimeSleepBeforeResumeMS&quot; : Int &gt; 0 &quot;TimeOutResetHead&quot; : Float in range [0;30] &quot;AmplitudeYawTracking&quot; : Float in range [10;120] &quot;FramerateTracking&quot; : Int in range [1;33] &quot;PeoplePerceptionPeriod&quot; : Int &gt; 1 &quot;SlowPeoplePerceptionPeriod&quot; : Int &gt; 1 &quot;HeadThreshold&quot; : Float in range [0;180] &quot;BodyRotationThreshold&quot; : Float in range [-180;180] &quot;BodyRotationThresholdNao&quot; : Float in range [-180;180] &quot;MoveDistanceX&quot; : Float in range [-5;5] &quot;MoveDistanceY&quot; : Float in range [-5;5] &quot;MoveAngleTheta&quot; : Float in range [-180;180] &quot;MoveThresholdX&quot; : Float in range [0;5] &quot;MoveThresholdY&quot; : Float in range [0;5] &quot;MoveThresholdTheta&quot; : Float in range [-180;180] &quot;MaxDistanceFullyEngaged&quot; : Float in range [0.5;5] &quot;MaxDistanceNotFullyEngaged&quot; : Float in range [0.5;5] &quot;MaxHumanSearchTime&quot; : Float in range [0.1;10] &quot;DeltaPitchComfortZone&quot; : Float in range [0;90] &quot;CenterPitchComfortZone&quot; : Float in range [-90;90] &quot;SoundHeight&quot; : Float in range [0;2] &quot;MoveSpeed&quot; : Float in range [0.1;0.55] &quot;MC_Interactive_MinTime&quot; : Int in range [0;100] &quot;MC_Interactive_MaxOffsetTime&quot; : Int in range [0;100] &quot;MC_Interactive_DistanceXY&quot; : Float in range [0;1] &quot;MC_Interactive_MinTheta&quot; : Float in range [-40;0] &quot;MC_Interactive_MaxTheta&quot; : Float in range [0;40] &quot;MC_Interactive_DistanceHumanRobot&quot; : Float in range [0.1;2] &quot;MC_Interactive_MaxDistanceHumanRobot&quot; : Float in range [0.1;3] </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetParameterAsync(System.String,System.Object)">
            <summary>Set the specified parameter </summary>
            <param name="arg0_paramName">&quot;LookStimulusSpeed&quot; : Speed of head moves when looking at a stimulus, as fraction of max speed &quot;LookBackSpeed&quot; : Speed of head moves when looking back to previous position, as fraction of max speed &quot;NobodyFoundTimeOut&quot; : timeout to send HumanLost event when no blob is found, in seconds &quot;MinTimeTracking&quot; : Minimum Time for the robot to be focused on someone, without listening to other stimuli, in seconds &quot;TimeSleepBeforeResumeMS&quot; : Slept time before automatically resuming BasicAwareness when an automatic pause has been made, in milliseconds &quot;TimeOutResetHead&quot; : Timeout to reset the head, in seconds &quot;AmplitudeYawTracking&quot; : max absolute value for head yaw in tracking, in degrees &quot;FramerateTracking&quot; : Framerate for FastPersonTracking and FindPersonHead, in frame per second &quot;PeoplePerceptionPeriod&quot; : Period for people perception, in milliseconds &quot;SlowPeoplePerceptionPeriod&quot; : Period for people perception in FullyEngaged mode, in milliseconds &quot;HeadThreshold&quot; : Yaw threshold for tracking, in degrees &quot;BodyRotationThreshold&quot; : Angular threshold for BodyRotation tracking mode, in degrees &quot;BodyRotationThresholdNao&quot; : Angular threshold for BodyRotation tracking mode on Nao, in degrees &quot;MoveDistanceX&quot; : X Distance for the Move tracking mode, in meters &quot;MoveDistanceY&quot; : Y Distance for the Move tracking mode, in meters &quot;MoveAngleTheta&quot; : Angle for the Move tracking mode, in degrees &quot;MoveThresholdX&quot; : Threshold for the Move tracking mode, in meters &quot;MoveThresholdY&quot; : Threshold for the Move tracking mode, in meters &quot;MoveThresholdTheta&quot; : Theta Threshold for the Move tracking mode, in degrees &quot;MaxDistanceFullyEngaged&quot; : Maximum distance for someone to be tracked for FullyEngaged mode, in meters &quot;MaxDistanceNotFullyEngaged&quot; : Maximum distance for someone to be tracked for modes different from FullyEngaged, in meters &quot;MaxHumanSearchTime&quot; : Maximum time to find a human after observing stimulus, in seconds &quot;DeltaPitchComfortZone&quot; : Pitch width of the comfort zone, in degree &quot;CenterPitchComfortZone&quot; : Pitch center of the confort zone, in degree &quot;SoundHeight&quot; : Default Height for sound detection, in meters &quot;MoveSpeed&quot; : Speed of the robot moves &quot;MC_Interactive_MinTime&quot; : Minimum time between 2 contextual moves (when the robot is tracking somebody) &quot;MC_Interactive_MaxOffsetTime&quot; : Maximum time that we can add to MC_Interactive_MinTime (when the robot is tracking somebody) &quot;MC_Interactive_DistanceXY&quot; : Maximum offset distance in X and Y that the robot can apply when he tracks somebody &quot;MC_Interactive_MinTheta&quot; : Minimum theta that the robot can apply when he tracks somebody &quot;MC_Interactive_MaxTheta&quot; : Maximum theta that the robot can apply when he tracks somebody &quot;MC_Interactive_DistanceHumanRobot&quot; : Distance between the human and the robot &quot;MC_Interactive_MaxDistanceHumanRobot&quot; : Maximum distance human robot to allow the robot to move (in MoveContextually mode) </param>
            <param name="arg1_newVal">&quot;LookStimulusSpeed&quot; : Float in range [0.01;1] &quot;LookBackSpeed&quot; : Float in range [0.01;1] &quot;NobodyFoundTimeOut&quot; : Float &gt; 0 &quot;MinTimeTracking&quot; : Float in range [0;20] &quot;TimeSleepBeforeResumeMS&quot; : Int &gt; 0 &quot;TimeOutResetHead&quot; : Float in range [0;30] &quot;AmplitudeYawTracking&quot; : Float in range [10;120] &quot;FramerateTracking&quot; : Int in range [1;33] &quot;PeoplePerceptionPeriod&quot; : Int &gt; 1 &quot;SlowPeoplePerceptionPeriod&quot; : Int &gt; 1 &quot;HeadThreshold&quot; : Float in range [0;180] &quot;BodyRotationThreshold&quot; : Float in range [-180;180] &quot;BodyRotationThresholdNao&quot; : Float in range [-180;180] &quot;MoveDistanceX&quot; : Float in range [-5;5] &quot;MoveDistanceY&quot; : Float in range [-5;5] &quot;MoveAngleTheta&quot; : Float in range [-180;180] &quot;MoveThresholdX&quot; : Float in range [0;5] &quot;MoveThresholdY&quot; : Float in range [0;5] &quot;MoveThresholdTheta&quot; : Float in range [-180;180] &quot;MaxDistanceFullyEngaged&quot; : Float in range [0.5;5] &quot;MaxDistanceNotFullyEngaged&quot; : Float in range [0.5;5] &quot;MaxHumanSearchTime&quot; : Float in range [0.1;10] &quot;DeltaPitchComfortZone&quot; : Float in range [0;90] &quot;CenterPitchComfortZone&quot; : Float in range [-90;90] &quot;SoundHeight&quot; : Float in range [0;2] &quot;MoveSpeed&quot; : Float in range [0.1;0.55] &quot;MC_Interactive_MinTime&quot; : Int in range [0;100] &quot;MC_Interactive_MaxOffsetTime&quot; : Int in range [0;100] &quot;MC_Interactive_DistanceXY&quot; : Float in range [0;1] &quot;MC_Interactive_MinTheta&quot; : Float in range [-40;0] &quot;MC_Interactive_MaxTheta&quot; : Float in range [0;40] &quot;MC_Interactive_DistanceHumanRobot&quot; : Float in range [0.1;2] &quot;MC_Interactive_MaxDistanceHumanRobot&quot; : Float in range [0.1;3] </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.ResetAllParameters">
            <summary>Reset all parameters, including enabled/disabled stimulus.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.ResetAllParametersAsync">
            <summary>Reset all parameters, including enabled/disabled stimulus.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetParameter(System.String)">
            <summary>Get the specified parameter.</summary>
            <param name="arg0_paramName">&quot;LookStimulusSpeed&quot; : Speed of head moves when looking at a stimulus, as fraction of max speed &quot;LookBackSpeed&quot; : Speed of head moves when looking back to previous position, as fraction of max speed &quot;NobodyFoundTimeOut&quot; : timeout to send HumanLost event when no blob is found, in seconds &quot;MinTimeTracking&quot; : Minimum Time for the robot to be focused on someone, without listening to other stimuli, in seconds &quot;TimeSleepBeforeResumeMS&quot; : Slept time before automatically resuming BasicAwareness when an automatic pause has been made, in milliseconds &quot;TimeOutResetHead&quot; : Timeout to reset the head, in seconds &quot;AmplitudeYawTracking&quot; : max absolute value for head yaw in tracking, in degrees &quot;FramerateTracking&quot; : Framerate for FastPersonTracking and FindPersonHead, in frame per second &quot;PeoplePerceptionPeriod&quot; : Period for people perception, in milliseconds &quot;SlowPeoplePerceptionPeriod&quot; : Period for people perception in FullyEngaged mode, in milliseconds &quot;HeadThreshold&quot; : Yaw threshold for tracking, in degrees &quot;BodyRotationThreshold&quot; : Angular threshold for BodyRotation tracking mode, in degrees &quot;BodyRotationThresholdNao&quot; : Angular threshold for BodyRotation tracking mode on Nao, in degrees &quot;MoveDistanceX&quot; : X Distance for the Move tracking mode, in meters &quot;MoveDistanceY&quot; : Y Distance for the Move tracking mode, in meters &quot;MoveAngleTheta&quot; : Angle for the Move tracking mode, in degrees &quot;MoveThresholdX&quot; : Threshold for the Move tracking mode, in meters &quot;MoveThresholdY&quot; : Threshold for the Move tracking mode, in meters &quot;MoveThresholdTheta&quot; : Theta Threshold for the Move tracking mode, in degrees &quot;MaxDistanceFullyEngaged&quot; : Maximum distance for someone to be tracked for FullyEngaged mode, in meters &quot;MaxDistanceNotFullyEngaged&quot; : Maximum distance for someone to be tracked for modes different from FullyEngaged, in meters &quot;MaxHumanSearchTime&quot; : Maximum time to find a human after observing stimulus, in seconds &quot;DeltaPitchComfortZone&quot; : Pitch width of the comfort zone, in degree &quot;CenterPitchComfortZone&quot; : Pitch center of the confort zone, in degree &quot;SoundHeight&quot; : Default Height for sound detection, in meters &quot;MoveSpeed&quot; : Speed of the robot moves &quot;MC_Interactive_MinTime&quot; : Minimum time between 2 contextual moves (when the robot is tracking somebody) &quot;MC_Interactive_MaxOffsetTime&quot; : Maximum time that we can add to MC_Interactive_MinTime (when the robot is tracking somebody) &quot;MC_Interactive_DistanceXY&quot; : Maximum offset distance in X and Y that the robot can apply when he tracks somebody &quot;MC_Interactive_MinTheta&quot; : Minimum theta that the robot can apply when he tracks somebody &quot;MC_Interactive_MaxTheta&quot; : Maximum theta that the robot can apply when he tracks somebody &quot;MC_Interactive_DistanceHumanRobot&quot; : Distance between the human and the robot &quot;MC_Interactive_MaxDistanceHumanRobot&quot; : Maximum distance human robot to allow the robot to move (in MoveContextually mode) </param>
            <returns>ALValue format for required parameter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetParameterAsync(System.String)">
            <summary>Get the specified parameter.</summary>
            <param name="arg0_paramName">&quot;LookStimulusSpeed&quot; : Speed of head moves when looking at a stimulus, as fraction of max speed &quot;LookBackSpeed&quot; : Speed of head moves when looking back to previous position, as fraction of max speed &quot;NobodyFoundTimeOut&quot; : timeout to send HumanLost event when no blob is found, in seconds &quot;MinTimeTracking&quot; : Minimum Time for the robot to be focused on someone, without listening to other stimuli, in seconds &quot;TimeSleepBeforeResumeMS&quot; : Slept time before automatically resuming BasicAwareness when an automatic pause has been made, in milliseconds &quot;TimeOutResetHead&quot; : Timeout to reset the head, in seconds &quot;AmplitudeYawTracking&quot; : max absolute value for head yaw in tracking, in degrees &quot;FramerateTracking&quot; : Framerate for FastPersonTracking and FindPersonHead, in frame per second &quot;PeoplePerceptionPeriod&quot; : Period for people perception, in milliseconds &quot;SlowPeoplePerceptionPeriod&quot; : Period for people perception in FullyEngaged mode, in milliseconds &quot;HeadThreshold&quot; : Yaw threshold for tracking, in degrees &quot;BodyRotationThreshold&quot; : Angular threshold for BodyRotation tracking mode, in degrees &quot;BodyRotationThresholdNao&quot; : Angular threshold for BodyRotation tracking mode on Nao, in degrees &quot;MoveDistanceX&quot; : X Distance for the Move tracking mode, in meters &quot;MoveDistanceY&quot; : Y Distance for the Move tracking mode, in meters &quot;MoveAngleTheta&quot; : Angle for the Move tracking mode, in degrees &quot;MoveThresholdX&quot; : Threshold for the Move tracking mode, in meters &quot;MoveThresholdY&quot; : Threshold for the Move tracking mode, in meters &quot;MoveThresholdTheta&quot; : Theta Threshold for the Move tracking mode, in degrees &quot;MaxDistanceFullyEngaged&quot; : Maximum distance for someone to be tracked for FullyEngaged mode, in meters &quot;MaxDistanceNotFullyEngaged&quot; : Maximum distance for someone to be tracked for modes different from FullyEngaged, in meters &quot;MaxHumanSearchTime&quot; : Maximum time to find a human after observing stimulus, in seconds &quot;DeltaPitchComfortZone&quot; : Pitch width of the comfort zone, in degree &quot;CenterPitchComfortZone&quot; : Pitch center of the confort zone, in degree &quot;SoundHeight&quot; : Default Height for sound detection, in meters &quot;MoveSpeed&quot; : Speed of the robot moves &quot;MC_Interactive_MinTime&quot; : Minimum time between 2 contextual moves (when the robot is tracking somebody) &quot;MC_Interactive_MaxOffsetTime&quot; : Maximum time that we can add to MC_Interactive_MinTime (when the robot is tracking somebody) &quot;MC_Interactive_DistanceXY&quot; : Maximum offset distance in X and Y that the robot can apply when he tracks somebody &quot;MC_Interactive_MinTheta&quot; : Minimum theta that the robot can apply when he tracks somebody &quot;MC_Interactive_MaxTheta&quot; : Maximum theta that the robot can apply when he tracks somebody &quot;MC_Interactive_DistanceHumanRobot&quot; : Distance between the human and the robot &quot;MC_Interactive_MaxDistanceHumanRobot&quot; : Maximum distance human robot to allow the robot to move (in MoveContextually mode) </param>
            <returns>ALValue format for required parameter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetEngagementMode(System.String)">
            <summary>Set engagement mode.</summary>
            <param name="arg0_modeName">Name of the mode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetEngagementModeAsync(System.String)">
            <summary>Set engagement mode.</summary>
            <param name="arg0_modeName">Name of the mode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetEngagementMode">
            <summary>Set engagement mode.</summary>
            <returns>Name of current engagement mode as a string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetEngagementModeAsync">
            <summary>Set engagement mode.</summary>
            <returns>Name of current engagement mode as a string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setCustomEngagementMode(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Set engagement mode.</summary>
            <param name="arg0_checkStimWhenFocused">when it is tracking someone, true makes the robot check a stimulus to see if it corresponds to a human, false makes it go back to the current track human just after watching in the stim direction (as in SemiEngaged mode)</param>
            <param name="arg1_stimuliWhenNotTracking">stimuli enabled when the robot is tracking, as a stimuli names list</param>
            <param name="arg2_stimuliWhenTracking">stimuli enabled when the robot is not tracking, as a stimuli names list</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setCustomEngagementModeAsync(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Set engagement mode.</summary>
            <param name="arg0_checkStimWhenFocused">when it is tracking someone, true makes the robot check a stimulus to see if it corresponds to a human, false makes it go back to the current track human just after watching in the stim direction (as in SemiEngaged mode)</param>
            <param name="arg1_stimuliWhenNotTracking">stimuli enabled when the robot is tracking, as a stimuli names list</param>
            <param name="arg2_stimuliWhenTracking">stimuli enabled when the robot is not tracking, as a stimuli names list</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetTrackingMode(System.String)">
            <summary>Set tracking mode.</summary>
            <param name="arg0_modeName">Name of the mode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.SetTrackingModeAsync(System.String)">
            <summary>Set tracking mode.</summary>
            <param name="arg0_modeName">Name of the mode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetTrackingMode">
            <summary>Set tracking mode.</summary>
            <returns>Name of current tracking mode as a string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.GetTrackingModeAsync">
            <summary>Set tracking mode.</summary>
            <returns>Name of current tracking mode as a string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.EngagePerson(System.Int32)">
            <summary>Force Engage Person.</summary>
            <param name="arg0_engagePerson">ID of the person as found in PeoplePerception.</param>
            <returns>true if the robot succeeded to engage the person, else false.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.EngagePersonAsync(System.Int32)">
            <summary>Force Engage Person.</summary>
            <param name="arg0_engagePerson">ID of the person as found in PeoplePerception.</param>
            <returns>true if the robot succeeded to engage the person, else false.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setContextualMoveType(System.String)">
            <summary>Set a new contextual moves type.</summary>
            <param name="arg0_contextualMove">The contextual move, can be 'forward', 'backward', 'sides' and 'random'.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setContextualMoveTypeAsync(System.String)">
            <summary>Set a new contextual moves type.</summary>
            <param name="arg0_contextualMove">The contextual move, can be 'forward', 'backward', 'sides' and 'random'.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.TriggerStimulus(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Trigger a custom stimulus.</summary>
            <param name="arg0_stimulusPosition">Position of the stimulus, in Frame World</param>
            <returns>If someone was found, return value is its ID, else it's -1</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness.TriggerStimulusAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Trigger a custom stimulus.</summary>
            <param name="arg0_stimulusPosition">Position of the stimulus, in Frame World</param>
            <returns>If someone was found, return value is its ID, else it's -1</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._pauseAwareness">
            <summary>DEPRECATED since 2.4: use pauseAwareness instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._pauseAwarenessAsync">
            <summary>DEPRECATED since 2.4: use pauseAwareness instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._resumeAwareness">
            <summary>DEPRECATED since 2.4: use resumeAwareness instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._resumeAwarenessAsync">
            <summary>DEPRECATED since 2.4: use resumeAwareness instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._isAwarenessPaused">
            <summary>DEPRECATED since 2.4: use isAwarenessPaused instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._isAwarenessPausedAsync">
            <summary>DEPRECATED since 2.4: use isAwarenessPaused instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._useLedDebug(System.Boolean)">
            <summary>Use leds for debug</summary>
            <param name="arg0_useLeds">Boolean value: true to use leds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._useLedDebugAsync(System.Boolean)">
            <summary>Use leds for debug</summary>
            <param name="arg0_useLeds">Boolean value: true to use leds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setLedGroup(System.String)">
            <summary>Set Led group</summary>
            <param name="arg0_ledGroupName">Name of the led group.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setLedGroupAsync(System.String)">
            <summary>Set Led group</summary>
            <param name="arg0_ledGroupName">Name of the led group.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._displayRobotViewDebug(System.Boolean)">
            <summary>Use debug display in robot view</summary>
            <param name="arg0_useDisplay">Boolean value: true to use debug display in robot view.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._displayRobotViewDebugAsync(System.Boolean)">
            <summary>Use debug display in robot view</summary>
            <param name="arg0_useDisplay">Boolean value: true to use debug display in robot view.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._getParametersInfo">
            <summary>Get parameters documentation</summary>
            <returns>Parameters info as string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._getParametersInfoAsync">
            <summary>Get parameters documentation</summary>
            <returns>Parameters info as string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setEnableStimuliFromBehind(System.Boolean)">
            <summary>Allow the robot to detect stimuli coming from behind and to turnthe base up to 180 degrees to watch them. If it's disabled, thestimuli from behind won't be taken into account.</summary>
            <param name="arg0_enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setEnableStimuliFromBehindAsync(System.Boolean)">
            <summary>Allow the robot to detect stimuli coming from behind and to turnthe base up to 180 degrees to watch them. If it's disabled, thestimuli from behind won't be taken into account.</summary>
            <param name="arg0_enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._getEnableStimuliFromBehind">
            <summary>To know if the robot can detect stimuli from behind</summary>
            <returns>Boolean value: true if stimuli from behind are enabled, else false.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._getEnableStimuliFromBehindAsync">
            <summary>To know if the robot can detect stimuli from behind</summary>
            <returns>Boolean value: true if stimuli from behind are enabled, else false.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setEnableCheckLowStimuli(System.Boolean)">
            <summary>Allow the robot to check downwards for low stimuli if nobody's found.</summary>
            <param name="arg0_enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._setEnableCheckLowStimuliAsync(System.Boolean)">
            <summary>Allow the robot to check downwards for low stimuli if nobody's found.</summary>
            <param name="arg0_enable">true to enable, false to disable</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._getEnableCheckLowStimuli">
            <summary>To know if the robot can detect stimuli from behind</summary>
            <returns>Boolean value: true if low stimuli are enabled, else false.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._getEnableCheckLowStimuliAsync">
            <summary>To know if the robot can detect stimuli from behind</summary>
            <returns>Boolean value: true if low stimuli are enabled, else false.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._getHomeReferencePosition">
            <summary>Get the position of home</summary>
            <returns>Pose2D as vector: Pose2D of home.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._getHomeReferencePositionAsync">
            <summary>Get the position of home</summary>
            <returns>Pose2D as vector: Pose2D of home.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onPreferenceUpdated(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onPreferenceUpdatedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onPreferenceSynchronized(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBasicAwareness._onPreferenceSynchronizedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALDialog">
            <summary>ALDialog is the dialog module. It allows loading a dialog file (.top), starts/stops/loads/unloads the dialog</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDialog.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDialog.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDialog.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALDialog.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._wordRecognized(System.String,System.Object,System.String)">
            <summary>Callback when speech recognition recognized a word</summary>
            <param name="arg0_unsuned">callback unused parameter</param>
            <param name="arg1_value">word recognized value</param>
            <param name="arg2_message">unused message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._wordRecognizedAsync(System.String,System.Object,System.String)">
            <summary>Callback when speech recognition recognized a word</summary>
            <param name="arg0_unsuned">callback unused parameter</param>
            <param name="arg1_value">word recognized value</param>
            <param name="arg2_message">unused message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetStoppable">
            <summary>Is engine stoppable</summary>
            <returns>Is engine stoppable</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetStoppableAsync">
            <summary>Is engine stoppable</summary>
            <returns>Is engine stoppable</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetStoppable(System.Boolean)">
            <summary>Is engine stoppable</summary>
            <param name="arg0_stoppable">set if engine can be stopped by user session</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetStoppableAsync(System.Boolean)">
            <summary>Is engine stoppable</summary>
            <param name="arg0_stoppable">set if engine can be stopped by user session</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RunTopics(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Is engine stoppable</summary>
            <param name="arg0_stoppable">set if engine can be stopped by user session</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RunTopicsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Is engine stoppable</summary>
            <param name="arg0_stoppable">set if engine can be stopped by user session</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StopTopics(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Is engine stoppable</summary>
            <param name="arg0_stoppable">set if engine can be stopped by user session</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StopTopicsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Is engine stoppable</summary>
            <param name="arg0_stoppable">set if engine can be stopped by user session</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setPhonetic(System.String,System.String,System.String)">
            <summary>Set sentence phonetic</summary>
            <param name="arg0_source">source sentence</param>
            <param name="arg1_source">source sentence</param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setPhoneticAsync(System.String,System.String,System.String)">
            <summary>Set sentence phonetic</summary>
            <param name="arg0_source">source sentence</param>
            <param name="arg1_source">source sentence</param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._pauseEngine(System.Boolean)">
            <summary>Pause/unpause dialog engine and asr</summary>
            <param name="arg0_enable">true to pause</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._pauseEngineAsync(System.Boolean)">
            <summary>Pause/unpause dialog engine and asr</summary>
            <param name="arg0_enable">true to pause</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Say(System.String,System.String)">
            <summary>say a sentence from a topic</summary>
            <param name="arg0_stoppable">set if engine can be stopped by user session</param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SayAsync(System.String,System.String)">
            <summary>say a sentence from a topic</summary>
            <param name="arg0_stoppable">set if engine can be stopped by user session</param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ResetLanguage">
            <summary>ResetLanguage</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ResetLanguageAsync">
            <summary>ResetLanguage</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.AddBlockingEvent(System.String)">
            <summary>The event will stop current TSS</summary>
            <param name="arg0_eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.AddBlockingEventAsync(System.String)">
            <summary>The event will stop current TSS</summary>
            <param name="arg0_eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RemoveBlockingEvent(System.String)">
            <summary>The event will removed from the blocking list</summary>
            <param name="arg0_eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RemoveBlockingEventAsync(System.String)">
            <summary>The event will removed from the blocking list</summary>
            <param name="arg0_eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.WordsRecognizedCallback(System.Object,System.Int32)">
            <summary>Asr callback for recognized words</summary>
            <param name="arg0_grammar">recognized grammar</param>
            <param name="arg1_utteranceSize">Utterance size</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.WordsRecognizedCallbackAsync(System.Object,System.Int32)">
            <summary>Asr callback for recognized words</summary>
            <param name="arg0_grammar">recognized grammar</param>
            <param name="arg1_utteranceSize">Utterance size</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EndOfUtteranceCallback">
            <summary>End of utterance asr callback</summary>
            <returns>true if reprocess buffer</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EndOfUtteranceCallbackAsync">
            <summary>End of utterance asr callback</summary>
            <returns>true if reprocess buffer</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._releaseEngine">
            <summary>Experimental: release engine after call of controlEngine</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._releaseEngineAsync">
            <summary>Experimental: release engine after call of controlEngine</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._controlEngine(System.String,System.String)">
            <summary>Experimental: controlEngine and say a tag</summary>
            <param name="arg0_topicName">topic name</param>
            <param name="arg1_tagName">tag name</param>
            <returns>Robot answer list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._controlEngineAsync(System.String,System.String)">
            <summary>Experimental: controlEngine and say a tag</summary>
            <param name="arg0_topicName">topic name</param>
            <param name="arg1_tagName">tag name</param>
            <returns>Robot answer list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._hasPreference">
            <summary>hasPreference</summary>
            <returns>true if has preference</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._hasPreferenceAsync">
            <summary>hasPreference</summary>
            <returns>true if has preference</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._eventReceived(System.String,System.Object,System.String)">
            <summary>Callback when dialog received a event</summary>
            <param name="arg0_eventName">event name received</param>
            <param name="arg1_eventValue">event value</param>
            <param name="arg2_message">unused event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._eventReceivedAsync(System.String,System.Object,System.String)">
            <summary>Callback when dialog received a event</summary>
            <param name="arg0_eventName">event name received</param>
            <param name="arg1_eventValue">event value</param>
            <param name="arg2_message">unused event message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._statusChanged(System.String,System.Object,System.String)">
            <summary>Callback when ASR status changes</summary>
            <param name="arg0_internalCallBackEvent">unused</param>
            <param name="arg1_internalCallbackValue">unused</param>
            <param name="arg2_message">unused</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._statusChangedAsync(System.String,System.Object,System.String)">
            <summary>Callback when ASR status changes</summary>
            <param name="arg0_internalCallBackEvent">unused</param>
            <param name="arg1_internalCallbackValue">unused</param>
            <param name="arg2_message">unused</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GotoTag(System.String,System.String)">
            <summary>Callback when ASR status changes</summary>
            <param name="arg0_topicName">topic name</param>
            <param name="arg1_tagName">tag name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GotoTagAsync(System.String,System.String)">
            <summary>Callback when ASR status changes</summary>
            <param name="arg0_topicName">topic name</param>
            <param name="arg1_tagName">tag name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.NoPick(System.String)">
            <summary>noPick</summary>
            <param name="arg0_topicName">Topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.NoPickAsync(System.String)">
            <summary>noPick</summary>
            <param name="arg0_topicName">Topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._connectionChanged(System.String,System.Object,System.String)">
            <summary>Callback when remote connection changes</summary>
            <param name="arg0_internalCallBackEvent">unused</param>
            <param name="arg1_internalCallbackValue">unused</param>
            <param name="arg2_message">unused</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._connectionChangedAsync(System.String,System.Object,System.String)">
            <summary>Callback when remote connection changes</summary>
            <param name="arg0_internalCallBackEvent">unused</param>
            <param name="arg1_internalCallbackValue">unused</param>
            <param name="arg2_message">unused</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CompileAll">
            <summary>compile all for ASR</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CompileAllAsync">
            <summary>compile all for ASR</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CompileBundle(System.String)">
            <summary>compile all for ASR</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CompileBundleAsync(System.String)">
            <summary>compile all for ASR</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CreateContext(System.String,System.String,System.String)">
            <summary>Create a context</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CreateContextAsync(System.String,System.String,System.String)">
            <summary>Create a context</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.LoadTopic(System.String)">
            <summary>Load a topic</summary>
            <param name="arg0_topicPath">topic full path and filename</param>
            <returns>Topic path and filename</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.LoadTopicAsync(System.String)">
            <summary>Load a topic</summary>
            <param name="arg0_topicPath">topic full path and filename</param>
            <returns>Topic path and filename</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.LoadTopicContent(System.String)">
            <summary>Load a topic</summary>
            <param name="arg0_topicContent">topic content</param>
            <returns>Topic name</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.LoadTopicContentAsync(System.String)">
            <summary>Load a topic</summary>
            <param name="arg0_topicContent">topic content</param>
            <returns>Topic name</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.DeactivateTopic(System.String)">
            <summary>Activate a topic</summary>
            <param name="arg0_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.DeactivateTopicAsync(System.String)">
            <summary>Activate a topic</summary>
            <param name="arg0_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ActivateTopic(System.String)">
            <summary>Activate a topic</summary>
            <param name="arg0_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ActivateTopicAsync(System.String)">
            <summary>Activate a topic</summary>
            <param name="arg0_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UnloadTopic(System.String)">
            <summary>unload a dialog</summary>
            <param name="arg0_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.UnloadTopicAsync(System.String)">
            <summary>unload a dialog</summary>
            <param name="arg0_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ForceOutput">
            <summary>Get a proposal</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ForceOutputAsync">
            <summary>Get a proposal</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ForceInput(System.String)">
            <summary>Give a sentence to the dialog and get the answer</summary>
            <param name="arg0_input">input string that simulate humain sentence</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ForceInputAsync(System.String)">
            <summary>Give a sentence to the dialog and get the answer</summary>
            <param name="arg0_input">input string that simulate humain sentence</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Tell(System.String)">
            <summary>Give a sentence to the dialog and get the answer</summary>
            <param name="arg0_input">input string that simulate humain sentence</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.TellAsync(System.String)">
            <summary>Give a sentence to the dialog and get the answer</summary>
            <param name="arg0_input">input string that simulate humain sentence</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetASRConfidenceThreshold(System.Single)">
            <summary>Set the minimum confidence required to recognize words. Better to use confidence by asr model</summary>
            <param name="arg0_threshold">input string that simulate humain sentence</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetASRConfidenceThresholdAsync(System.Single)">
            <summary>Set the minimum confidence required to recognize words. Better to use confidence by asr model</summary>
            <param name="arg0_threshold">input string that simulate humain sentence</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetASRConfidenceThreshold">
            <summary>Get the minimum confidence required to recognize words</summary>
            <returns>current asr confidence</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetASRConfidenceThresholdAsync">
            <summary>Get the minimum confidence required to recognize words</summary>
            <returns>current asr confidence</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConfidenceThreshold(System.String,System.Single)">
            <summary>Set the confidence threshold</summary>
            <param name="arg0_strategy">Name of the concept</param>
            <param name="arg1_confidence">Language of the concept</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConfidenceThresholdAsync(System.String,System.Single)">
            <summary>Set the confidence threshold</summary>
            <param name="arg0_strategy">Name of the concept</param>
            <param name="arg1_confidence">Language of the concept</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConfidenceThreshold(System.String,System.Single,System.String)">
            <summary>Set the confidence threshold</summary>
            <param name="arg0_strategy">Name of the concept</param>
            <param name="arg1_confidence">Language of the concept</param>
            <param name="arg2_language">language of the threshold</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConfidenceThresholdAsync(System.String,System.Single,System.String)">
            <summary>Set the confidence threshold</summary>
            <param name="arg0_strategy">Name of the concept</param>
            <param name="arg1_confidence">Language of the concept</param>
            <param name="arg2_language">language of the threshold</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetAllConfidenceThresholds">
            <summary>Get all the confidence thresholds</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetAllConfidenceThresholdsAsync">
            <summary>Get all the confidence thresholds</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetConfidenceThreshold(System.String,System.String)">
            <summary>Get all the confidence thresholds</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetConfidenceThresholdAsync(System.String,System.String)">
            <summary>Get all the confidence thresholds</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RemoveAllLanguageThresholds">
            <summary>Remove all language specific confidence thresholds</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RemoveAllLanguageThresholdsAsync">
            <summary>Remove all language specific confidence thresholds</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setConfidence(System.String,System.Single)">
            <summary>Set the minimum confidence required to recognize words for a strategy</summary>
            <param name="arg0_strategy">BNF or SLM</param>
            <param name="arg1_threshold">threshold [0,1]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setConfidenceAsync(System.String,System.Single)">
            <summary>Set the minimum confidence required to recognize words for a strategy</summary>
            <param name="arg0_strategy">BNF or SLM</param>
            <param name="arg1_threshold">threshold [0,1]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._getConfidence(System.String)">
            <summary>Get the minimum confidence required to recognize words of a strategy</summary>
            <param name="arg0_strategy">BNF or SLM</param>
            <returns>current asr confidence for model</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._getConfidenceAsync(System.String)">
            <summary>Get the minimum confidence required to recognize words of a strategy</summary>
            <param name="arg0_strategy">BNF or SLM</param>
            <returns>current asr confidence for model</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.OpenSession(System.Int32)">
            <summary>Open a session</summary>
            <param name="arg0_id">user id</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.OpenSessionAsync(System.Int32)">
            <summary>Open a session</summary>
            <param name="arg0_id">user id</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._getBackend">
            <summary>Get backend</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._getBackendAsync">
            <summary>Get backend</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._openTestSession(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>Open a test session</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._openTestSessionAsync(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>Open a test session</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._closeTestSession">
            <summary>close a test session</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._closeTestSessionAsync">
            <summary>close a test session</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._runTotTest(System.String)">
            <summary>Open a test session</summary>
            <param name="arg0_tot">tot file to test</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._runTotTestAsync(System.String)">
            <summary>Open a test session</summary>
            <param name="arg0_tot">tot file to test</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._runTotTest(System.String,System.String)">
            <summary>Open a test session</summary>
            <param name="arg0_tot">tot file to test</param>
            <param name="arg1_wavMode">input wav mode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._runTotTestAsync(System.String,System.String)">
            <summary>Open a test session</summary>
            <param name="arg0_tot">tot file to test</param>
            <param name="arg1_wavMode">input wav mode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CloseSession">
            <summary>Close the current session</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CloseSessionAsync">
            <summary>Close the current session</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CloseTestSession">
            <summary>Close the test session</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.CloseTestSessionAsync">
            <summary>Close the test session</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._generateBNF(System.String,System.String,System.String,System.String)">
            <summary>deprecated</summary>
            <param name="arg0_name">name</param>
            <param name="arg1_topic">topic</param>
            <param name="arg2_language">language</param>
            <param name="arg3_destination">destination</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._generateBNFAsync(System.String,System.String,System.String,System.String)">
            <summary>deprecated</summary>
            <param name="arg0_name">name</param>
            <param name="arg1_topic">topic</param>
            <param name="arg2_language">language</param>
            <param name="arg3_destination">destination</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetDelay(System.String,System.Int32)">
            <summary>change event's delay</summary>
            <param name="arg0_eventName">Event name</param>
            <param name="arg1_Delay">Delay in second</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetDelayAsync(System.String,System.Int32)">
            <summary>change event's delay</summary>
            <param name="arg0_eventName">Event name</param>
            <param name="arg1_Delay">Delay in second</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetNumberOfScopes(System.Int32)">
            <summary>Set how many scopes remains open</summary>
            <param name="arg0_numberOfScope">number of scope</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetNumberOfScopesAsync(System.Int32)">
            <summary>Set how many scopes remains open</summary>
            <param name="arg0_numberOfScope">number of scope</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConcept(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Set the content of a dynamic concept</summary>
            <param name="arg0_conceptName">Name of the concept</param>
            <param name="arg1_language">Language of the concept</param>
            <param name="arg2_content">content of the concept</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConceptAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Set the content of a dynamic concept</summary>
            <param name="arg0_conceptName">Name of the concept</param>
            <param name="arg1_language">Language of the concept</param>
            <param name="arg2_content">content of the concept</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConcept(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Set the content of a dynamic concept</summary>
            <param name="arg0_conceptName">Name of the concept</param>
            <param name="arg1_language">Language of the concept</param>
            <param name="arg2_content">content of the concept</param>
            <param name="arg3_store">determine if the concept will be save in the database</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConceptAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Set the content of a dynamic concept</summary>
            <param name="arg0_conceptName">Name of the concept</param>
            <param name="arg1_language">Language of the concept</param>
            <param name="arg2_content">content of the concept</param>
            <param name="arg3_store">determine if the concept will be save in the database</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConceptKeepInCache(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>set the content of a dynamic concept</summary>
            <param name="arg0_conceptName">concept name</param>
            <param name="arg1_language">language</param>
            <param name="arg2_content">concept content</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetConceptKeepInCacheAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>set the content of a dynamic concept</summary>
            <param name="arg0_conceptName">concept name</param>
            <param name="arg1_language">language</param>
            <param name="arg2_content">concept content</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.AddToConcept(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>add to the content of a dynamic concept</summary>
            <param name="arg0_conceptName">Name of the concept</param>
            <param name="arg1_language">Language of the concept</param>
            <param name="arg2_content">content of the concept</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.AddToConceptAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>add to the content of a dynamic concept</summary>
            <param name="arg0_conceptName">Name of the concept</param>
            <param name="arg1_language">Language of the concept</param>
            <param name="arg2_content">content of the concept</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetConcept(System.String,System.String)">
            <summary>get the content of a dynamic concept</summary>
            <param name="arg0_conceptName">Name of the concept</param>
            <param name="arg1_language">Language of the concept</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetConceptAsync(System.String,System.String)">
            <summary>get the content of a dynamic concept</summary>
            <param name="arg0_conceptName">Name of the concept</param>
            <param name="arg1_language">Language of the concept</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setPushMode(System.Int32)">
            <summary>Set push mode. Frequence of robot question</summary>
            <param name="arg0_pushMode">Push mode from 0 to 4</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setPushModeAsync(System.Int32)">
            <summary>Set push mode. Frequence of robot question</summary>
            <param name="arg0_pushMode">Push mode from 0 to 4</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableTriggerSentences(System.Boolean)">
            <summary>enableTriggerSentences</summary>
            <param name="arg0_enableTriggerSentences">Enable trigger sentences if true</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableTriggerSentencesAsync(System.Boolean)">
            <summary>enableTriggerSentences</summary>
            <param name="arg0_enableTriggerSentences">Enable trigger sentences if true</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableCategory(System.Boolean)">
            <summary>enableCategory</summary>
            <param name="arg0_enableCategory">Enable category if true</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableCategoryAsync(System.Boolean)">
            <summary>enableCategory</summary>
            <param name="arg0_enableCategory">Enable category if true</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StartPush">
            <summary>Start push mode</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StartPushAsync">
            <summary>Start push mode</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StopPush">
            <summary>Stop push mode</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StopPushAsync">
            <summary>Stop push mode</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetAnimatedSpeechConfiguration(System.Object)">
            <summary>Set the configuration of animated speech for the current dialog.</summary>
            <param name="arg0_animatedSpeechConfiguration">See animated speech documentation</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetAnimatedSpeechConfigurationAsync(System.Object)">
            <summary>Set the configuration of animated speech for the current dialog.</summary>
            <param name="arg0_animatedSpeechConfiguration">See animated speech documentation</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetAnimatedSpeechConfiguration">
            <summary>Get the configuration of animated speech for the current dialog.</summary>
            <returns>See animated speech documentation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetAnimatedSpeechConfigurationAsync">
            <summary>Get the configuration of animated speech for the current dialog.</summary>
            <returns>See animated speech documentation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ApplicationBlackList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Black list a list of application</summary>
            <param name="arg0_applicationList">List of applications that cannot be launched by dialog</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ApplicationBlackListAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Black list a list of application</summary>
            <param name="arg0_applicationList">List of applications that cannot be launched by dialog</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsContentNeedsUpdate">
            <summary>True if new content was installed</summary>
            <returns>True if content was updated since last compilation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsContentNeedsUpdateAsync">
            <summary>True if new content was installed</summary>
            <returns>True if content was updated since last compilation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._addDialogFromTopicBox(System.String,System.String)">
            <summary>private method to be able to set in specific include dir</summary>
            <param name="arg0_topicPathName">Topic path and filename</param>
            <param name="arg1_includeDirectory">Root of the behavior</param>
            <returns>Topic name (not filename)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._addDialogFromTopicBoxAsync(System.String,System.String)">
            <summary>private method to be able to set in specific include dir</summary>
            <param name="arg0_topicPathName">Topic path and filename</param>
            <param name="arg1_includeDirectory">Root of the behavior</param>
            <returns>Topic name (not filename)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._cleanEventStack">
            <summary>Clean event stack</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._cleanEventStackAsync">
            <summary>Clean event stack</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._updateAIClient(System.String)">
            <summary>Connect to custom AI client</summary>
            <param name="arg0_libraryPath">library path</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._updateAIClientAsync(System.String)">
            <summary>Connect to custom AI client</summary>
            <param name="arg0_libraryPath">library path</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._addTopicsInGroup(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Create a user group</summary>
            <param name="arg0_groupName">User group name</param>
            <param name="arg1_topicNameList">Topic to add in group</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._addTopicsInGroupAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Create a user group</summary>
            <param name="arg0_groupName">User group name</param>
            <param name="arg1_topicNameList">Topic to add in group</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._activateGroup(System.String)">
            <summary>Group to activate</summary>
            <param name="arg0_groupName">group name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._activateGroupAsync(System.String)">
            <summary>Group to activate</summary>
            <param name="arg0_groupName">group name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._deactivateGroup(System.String)">
            <summary>private method to be able to set in specific include dir</summary>
            <param name="arg0_groupName">group name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._deactivateGroupAsync(System.String)">
            <summary>private method to be able to set in specific include dir</summary>
            <param name="arg0_groupName">group name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._suggestNextTopic(System.String,System.Int32)">
            <summary>suggest next topic</summary>
            <param name="arg0_topicName">group name</param>
            <param name="arg1_suggestionValidity">Suggestion validity in second</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._suggestNextTopicAsync(System.String,System.Int32)">
            <summary>suggest next topic</summary>
            <param name="arg0_topicName">group name</param>
            <param name="arg1_suggestionValidity">Suggestion validity in second</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._suggestUserNextTopic(System.String,System.Int32,System.Int32)">
            <summary>suggest next topic</summary>
            <param name="arg0_topicName">group name</param>
            <param name="arg1_suggestionValidity">Suggestion validity in second</param>
            <param name="arg2_userID">Suggestion validity for userID</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._suggestUserNextTopicAsync(System.String,System.Int32,System.Int32)">
            <summary>suggest next topic</summary>
            <param name="arg0_topicName">group name</param>
            <param name="arg1_suggestionValidity">Suggestion validity in second</param>
            <param name="arg2_userID">Suggestion validity for userID</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._preloadMain">
            <summary>preload main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._preloadMainAsync">
            <summary>preload main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._mainLanguage(System.String)">
            <summary>Define only language to use</summary>
            <param name="arg0_languageName">monoLanguageName</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._mainLanguageAsync(System.String)">
            <summary>Define only language to use</summary>
            <param name="arg0_languageName">monoLanguageName</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._runMainNoActivation">
            <summary>run main dialog without speaking</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._runMainNoActivationAsync">
            <summary>run main dialog without speaking</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._runMain">
            <summary>run main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._runMainAsync">
            <summary>run main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._startDialog(System.String)">
            <summary>run main dialog</summary>
            <param name="arg0_engagementMode">engagementMode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._startDialogAsync(System.String)">
            <summary>run main dialog</summary>
            <param name="arg0_engagementMode">engagementMode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setEngagementMode(System.String)">
            <summary>change engagement mode</summary>
            <param name="arg0_engagementMode">engagementMode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setEngagementModeAsync(System.String)">
            <summary>change engagement mode</summary>
            <param name="arg0_engagementMode">engagementMode</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Pause(System.Boolean)">
            <summary>change engagement mode</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.PauseAsync(System.Boolean)">
            <summary>change engagement mode</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._endPause">
            <summary>change engagement mode</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._endPauseAsync">
            <summary>change engagement mode</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RunDialog">
            <summary>run main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RunDialogAsync">
            <summary>run main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._resetPreload">
            <summary>reset preload settings</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._resetPreloadAsync">
            <summary>reset preload settings</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._stopMain">
            <summary>stop main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._stopMainAsync">
            <summary>stop main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StopDialog">
            <summary>stop main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.StopDialogAsync">
            <summary>stop main dialog</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._loadStrategyConfiguration(System.String)">
            <summary>load a strategy configuration</summary>
            <param name="arg0_strategyFile">Strategy path and filename</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._loadStrategyConfigurationAsync(System.String)">
            <summary>load a strategy configuration</summary>
            <param name="arg0_strategyFile">Strategy path and filename</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetVariablePath(System.String,System.String,System.String)">
            <summary>setVariablePath redifine a variable name on the fly</summary>
            <param name="arg0_topic">Source topic name</param>
            <param name="arg1_event">Event name</param>
            <param name="arg2_path">New event name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetVariablePathAsync(System.String,System.String,System.String)">
            <summary>setVariablePath redifine a variable name on the fly</summary>
            <param name="arg0_topic">Source topic name</param>
            <param name="arg1_event">Event name</param>
            <param name="arg2_path">New event name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._registerIO(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>register IO</summary>
            <param name="arg0_boxName">Box name</param>
            <param name="arg1_topicName">Topic name</param>
            <param name="arg2_inputList">Input list</param>
            <param name="arg3_outputList">Output list</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._registerIOAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>register IO</summary>
            <param name="arg0_boxName">Box name</param>
            <param name="arg1_topicName">Topic name</param>
            <param name="arg2_inputList">Input list</param>
            <param name="arg3_outputList">Output list</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._unregisterIO(System.String,System.String)">
            <summary>unregister IO</summary>
            <param name="arg0_boxName">Box name</param>
            <param name="arg1_topicName">Topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._unregisterIOAsync(System.String,System.String)">
            <summary>unregister IO</summary>
            <param name="arg0_boxName">Box name</param>
            <param name="arg1_topicName">Topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._messageIn(System.String,System.String,System.String,System.Object)">
            <summary>Send a message input</summary>
            <param name="arg0_boxName">Box name</param>
            <param name="arg1_topicName">Topic name</param>
            <param name="arg2_variableName">Variable name</param>
            <param name="arg3_value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._messageInAsync(System.String,System.String,System.String,System.Object)">
            <summary>Send a message input</summary>
            <param name="arg0_boxName">Box name</param>
            <param name="arg1_topicName">Topic name</param>
            <param name="arg2_variableName">Variable name</param>
            <param name="arg3_value">Value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetLanguage(System.String)">
            <summary>setLanguage</summary>
            <param name="arg0_Language">Set dialog language (frf, enu, jpj...)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetLanguageAsync(System.String)">
            <summary>setLanguage</summary>
            <param name="arg0_Language">Set dialog language (frf, enu, jpj...)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguage">
            <summary>getLanguage</summary>
            <returns>get the dialog language</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageAsync">
            <summary>getLanguage</summary>
            <returns>get the dialog language</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._startUpdate(System.String,System.Object,System.String)">
            <summary>startUpdate</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._startUpdateAsync(System.String,System.Object,System.String)">
            <summary>startUpdate</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._startApp(System.String,System.Object,System.String)">
            <summary>startUpdate</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._startAppAsync(System.String,System.Object,System.String)">
            <summary>startUpdate</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._packageInstalled(System.String,System.Object,System.String)">
            <summary>packageInstalled</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._packageInstalledAsync(System.String,System.Object,System.String)">
            <summary>packageInstalled</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.DialogAnswered(System.String,System.Object,System.String)">
            <summary>dialogAnswered</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.DialogAnsweredAsync(System.String,System.Object,System.String)">
            <summary>dialogAnswered</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._compilationFinished(System.String,System.Object,System.String)">
            <summary>compilationFinished</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._compilationFinishedAsync(System.String,System.Object,System.String)">
            <summary>compilationFinished</summary>
            <param name="arg0_variableName">variable name</param>
            <param name="arg1_variableValue">variable value</param>
            <param name="arg2_message">message</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetFocus(System.String)">
            <summary>Give focus to a dialog</summary>
            <param name="arg0_topicName">Topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.SetFocusAsync(System.String)">
            <summary>Give focus to a dialog</summary>
            <param name="arg0_topicName">Topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetFocus">
            <summary>Give focus to a dialog</summary>
            <returns>Current focus name</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetFocusAsync">
            <summary>Give focus to a dialog</summary>
            <returns>Current focus name</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GotoTopic(System.String)">
            <summary>Set the focus to a topic and make a proposal</summary>
            <param name="arg0_topicName">Topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GotoTopicAsync(System.String)">
            <summary>Set the focus to a topic and make a proposal</summary>
            <param name="arg0_topicName">Topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enableOneBNFActivated(System.Boolean)">
            <summary>Enable AI System</summary>
            <param name="arg0_enableFullBNF">Add all possible sentences in speech recognition</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enableOneBNFActivatedAsync(System.Boolean)">
            <summary>Enable AI System</summary>
            <param name="arg0_enableFullBNF">Add all possible sentences in speech recognition</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enableAISystem(System.Boolean)">
            <summary>Enable AI System</summary>
            <param name="arg0_enableAISystem">Enable AI system</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enableAISystemAsync(System.Boolean)">
            <summary>Enable AI System</summary>
            <param name="arg0_enableAISystem">Enable AI system</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.AddFallback(System.String,System.String)">
            <summary>Add a fallback plugin</summary>
            <param name="arg0_language">The language of the plugin</param>
            <param name="arg1_name">The name of the plugin</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.AddFallbackAsync(System.String,System.String)">
            <summary>Add a fallback plugin</summary>
            <param name="arg0_language">The language of the plugin</param>
            <param name="arg1_name">The name of the plugin</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RemoveFallback(System.String,System.String)">
            <summary>Remove a fallback plugin</summary>
            <param name="arg0_language">The language of the plugin</param>
            <param name="arg1_name">The name of the plugin</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RemoveFallbackAsync(System.String,System.String)">
            <summary>Remove a fallback plugin</summary>
            <param name="arg0_language">The language of the plugin</param>
            <param name="arg1_name">The name of the plugin</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._loadPrecompiledFile(System.String,System.String,System.String)">
            <summary>Load precompiled file</summary>
            <param name="arg0_filepath">File path and filename</param>
            <param name="arg1_bundleName">Bundle name</param>
            <param name="arg2_language">Language name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._loadPrecompiledFileAsync(System.String,System.String,System.String)">
            <summary>Load precompiled file</summary>
            <param name="arg0_filepath">File path and filename</param>
            <param name="arg1_bundleName">Bundle name</param>
            <param name="arg2_language">Language name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._loadSLM(System.String,System.String)">
            <summary>Load SLM</summary>
            <param name="arg0_SLMFile">SLM path and filename</param>
            <param name="arg1_language">Language name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._loadSLMAsync(System.String,System.String)">
            <summary>Load SLM</summary>
            <param name="arg0_SLMFile">SLM path and filename</param>
            <param name="arg1_language">Language name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLoadedTopics(System.String)">
            <summary>List loaded topics</summary>
            <param name="arg0_language">Language name</param>
            <returns>List of loaded topics</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLoadedTopicsAsync(System.String)">
            <summary>List loaded topics</summary>
            <param name="arg0_language">Language name</param>
            <returns>List of loaded topics</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetAllLoadedTopics">
            <summary>List loaded topics independent of language</summary>
            <returns>List of loaded topics</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetAllLoadedTopicsAsync">
            <summary>List loaded topics independent of language</summary>
            <returns>List of loaded topics</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetActivatedTopics">
            <summary>Get activated topics</summary>
            <returns>List of activated topics</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetActivatedTopicsAsync">
            <summary>Get activated topics</summary>
            <returns>List of activated topics</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setBehaviorEvent(System.String)">
            <summary>fast behavior start</summary>
            <param name="arg0_Event">Event name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setBehaviorEventAsync(System.String)">
            <summary>fast behavior start</summary>
            <param name="arg0_Event">Event name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._fastModelActivation(System.Boolean)">
            <summary>triggers and proposal are activated in the model at compilation time</summary>
            <param name="arg0_enable">Enable fast activation</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._fastModelActivationAsync(System.Boolean)">
            <summary>triggers and proposal are activated in the model at compilation time</summary>
            <param name="arg0_enable">Enable fast activation</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._byPassFastApproximateMatching(System.Boolean)">
            <summary>byPass fast approximative matching</summary>
            <param name="arg0_fastApproximative">enable fast approximative matching</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._byPassFastApproximateMatchingAsync(System.Boolean)">
            <summary>byPass fast approximative matching</summary>
            <param name="arg0_fastApproximative">enable fast approximative matching</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ActivateTag(System.String,System.String)">
            <summary>activate a tag</summary>
            <param name="arg0_tagName">tag name</param>
            <param name="arg1_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ActivateTagAsync(System.String,System.String)">
            <summary>activate a tag</summary>
            <param name="arg0_tagName">tag name</param>
            <param name="arg1_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.DeactivateTag(System.String,System.String)">
            <summary>deactivate a tag</summary>
            <param name="arg0_tagName">tag name</param>
            <param name="arg1_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.DeactivateTagAsync(System.String,System.String)">
            <summary>deactivate a tag</summary>
            <param name="arg0_tagName">tag name</param>
            <param name="arg1_topicName">topic name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._fallback(System.String,System.String)">
            <summary>fallback (experimentatl)</summary>
            <param name="arg0_Question">User question</param>
            <param name="arg1_Language">Language</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._fallbackAsync(System.String,System.String)">
            <summary>fallback (experimentatl)</summary>
            <param name="arg0_Question">User question</param>
            <param name="arg1_Language">Language</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ResetAll">
            <summary>Reset all engine</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ResetAllAsync">
            <summary>Reset all engine</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setSynchronicity(System.Boolean)">
            <summary>set Synchronicity</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setSynchronicityAsync(System.Boolean)">
            <summary>set Synchronicity</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._getSynchronicity">
            <summary>get Synchronicity</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._getSynchronicityAsync">
            <summary>get Synchronicity</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.InsertUserData(System.String,System.String,System.Int32)">
            <summary>insert user data into dialog database</summary>
            <param name="arg0_variableName">Variable name</param>
            <param name="arg1_variableValue">Variable value</param>
            <param name="arg2_UserID">User ID</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.InsertUserDataAsync(System.String,System.String,System.Int32)">
            <summary>insert user data into dialog database</summary>
            <param name="arg0_variableName">Variable name</param>
            <param name="arg1_variableValue">Variable value</param>
            <param name="arg2_UserID">User ID</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._magicGet(System.String)">
            <summary>get user data from dialog database</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._magicGetAsync(System.String)">
            <summary>get user data from dialog database</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetUserData(System.String,System.Int32)">
            <summary>get user data from dialog database</summary>
            <param name="arg0_variableName">Variable name</param>
            <param name="arg1_UserID">User ID</param>
            <returns>Value</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetUserDataAsync(System.String,System.Int32)">
            <summary>get user data from dialog database</summary>
            <param name="arg0_variableName">Variable name</param>
            <param name="arg1_UserID">User ID</param>
            <returns>Value</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetUserDataList(System.Int32)">
            <summary>get user data list from dialog database</summary>
            <param name="arg0_UserID">User ID</param>
            <returns>Variable list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetUserDataListAsync(System.Int32)">
            <summary>get user data list from dialog database</summary>
            <param name="arg0_UserID">User ID</param>
            <returns>Variable list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetUserList">
            <summary>get user list from dialog database</summary>
            <returns>User list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetUserListAsync">
            <summary>get user list from dialog database</summary>
            <returns>User list</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RemoveUserData(System.Int32)">
            <summary>remove a user from the database</summary>
            <param name="arg0_UserID">User ID</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.RemoveUserDataAsync(System.Int32)">
            <summary>remove a user from the database</summary>
            <param name="arg0_UserID">User ID</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ClearConcepts">
            <summary>clear concepts in DB</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ClearConceptsAsync">
            <summary>clear concepts in DB</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._speechDetected">
            <summary>callback</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._speechDetectedAsync">
            <summary>callback</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableSendingLogToCloud(System.Boolean)">
            <summary>let the robot send log the cloud</summary>
            <param name="arg0_EnableLog">Enable log</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableSendingLogToCloudAsync(System.Boolean)">
            <summary>let the robot send log the cloud</summary>
            <param name="arg0_EnableLog">Enable log</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._encryptLog(System.Boolean)">
            <summary>encrypt the logs sent tothe cloud</summary>
            <param name="arg0_EnableLog">Remove user log</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._encryptLogAsync(System.Boolean)">
            <summary>encrypt the logs sent tothe cloud</summary>
            <param name="arg0_EnableLog">Remove user log</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsSendingLogToCloud">
            <summary>check if the robot is sending the log to the cloud</summary>
            <returns>True if currently logging</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.IsSendingLogToCloudAsync">
            <summary>check if the robot is sending the log to the cloud</summary>
            <returns>True if currently logging</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._isEncryptingLog">
            <summary>check if the robot is encrypting the log sent to the cloud</summary>
            <returns>True if currently encrypt logging</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._isEncryptingLogAsync">
            <summary>check if the robot is encrypting the log sent to the cloud</summary>
            <returns>True if currently encrypt logging</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableLogAudio(System.Boolean)">
            <summary>enable sending log audio (recorded conversation) to the cloud</summary>
            <param name="arg0"></param>
            <returns>Enable audio log</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableLogAudioAsync(System.Boolean)">
            <summary>enable sending log audio (recorded conversation) to the cloud</summary>
            <param name="arg0"></param>
            <returns>Enable audio log</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setDeletionCost(System.Single)">
            <summary>The deletion cost (deleting from the sentence to match the model)</summary>
            <param name="arg0_MatchingDeletionCost">Deletion cost</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setDeletionCostAsync(System.Single)">
            <summary>The deletion cost (deleting from the sentence to match the model)</summary>
            <param name="arg0_MatchingDeletionCost">Deletion cost</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setInsertionCost(System.Single)">
            <summary>The insertion cost (inserting in the sentence to match the model)</summary>
            <param name="arg0_MatchingInsertCost">Insert cost</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setInsertionCostAsync(System.Single)">
            <summary>The insertion cost (inserting in the sentence to match the model)</summary>
            <param name="arg0_MatchingInsertCost">Insert cost</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setSubstitutionCost(System.Single)">
            <summary>The substitution cost</summary>
            <param name="arg0_MatchingSubstitutionCost">Substitution cost</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setSubstitutionCostAsync(System.Single)">
            <summary>The substitution cost</summary>
            <param name="arg0_MatchingSubstitutionCost">Substitution cost</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setStarCost(System.Single)">
            <summary>The cost of matching an open element (such as _*)</summary>
            <param name="arg0_MatchingStarCost">Wildcard cost</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setStarCostAsync(System.Single)">
            <summary>The cost of matching an open element (such as _*)</summary>
            <param name="arg0_MatchingStarCost">Wildcard cost</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setApproximateMatchingThreshold(System.Single)">
            <summary>The approximate matching threshold</summary>
            <param name="arg0_MatchingThreshold">Matching threshold</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setApproximateMatchingThresholdAsync(System.Single)">
            <summary>The approximate matching threshold</summary>
            <param name="arg0_MatchingThreshold">Matching threshold</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._useAcrobaticMatching(System.Boolean)">
            <summary>Tell to the model to use acrobatic matching</summary>
            <param name="arg0_EnableAccrobatic">Enable accrobatic matching</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._useAcrobaticMatchingAsync(System.Boolean)">
            <summary>Tell to the model to use acrobatic matching</summary>
            <param name="arg0_EnableAccrobatic">Enable accrobatic matching</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enableStatisticalMatching(System.Boolean)">
            <summary>Tell to the model to use statistical matching</summary>
            <param name="arg0_EnableSemantic">Enable semantic matching</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enableStatisticalMatchingAsync(System.Boolean)">
            <summary>Tell to the model to use statistical matching</summary>
            <param name="arg0_EnableSemantic">Enable semantic matching</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enablePhoneticMatching(System.Boolean)">
            <summary>Tell to the model to use phonetic matching</summary>
            <param name="arg0_EnablePhonetic">Enable phonetic matching</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enablePhoneticMatchingAsync(System.Boolean)">
            <summary>Tell to the model to use phonetic matching</summary>
            <param name="arg0_EnablePhonetic">Enable phonetic matching</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setSemanticModel(System.String,System.String)">
            <summary>Specify the directory and language of the statistical model</summary>
            <param name="arg0_semanticPath">Semantic matching data path</param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setSemanticModelAsync(System.String,System.String)">
            <summary>Specify the directory and language of the statistical model</summary>
            <param name="arg0_semanticPath">Semantic matching data path</param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._isOnePassEnabled">
            <summary>Is one pass enabled</summary>
            <returns>Enable only one speech recognition</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._isOnePassEnabledAsync">
            <summary>Is one pass enabled</summary>
            <returns>Enable only one speech recognition</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setSLMUpperThreshold(System.Single)">
            <summary>set SLM High treshold</summary>
            <param name="arg0_SLMUpper">SLM Upper Threshold</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setSLMUpperThresholdAsync(System.Single)">
            <summary>set SLM High treshold</summary>
            <param name="arg0_SLMUpper">SLM Upper Threshold</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enableSerialization(System.Boolean)">
            <summary>enable use of serialized models</summary>
            <param name="arg0_enableSerialization">Enable serialization</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._enableSerializationAsync(System.Boolean)">
            <summary>enable use of serialized models</summary>
            <param name="arg0_enableSerialization">Enable serialization</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.DeleteSerializationFiles">
            <summary>delete serializations files .ser .ini .bnf .lcf</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.DeleteSerializationFilesAsync">
            <summary>delete serializations files .ser .ini .bnf .lcf</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.Mute(System.Boolean)">
            <summary>mute dialog</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.MuteAsync(System.Boolean)">
            <summary>mute dialog</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._copyInputConcepts(System.Boolean)">
            <summary>Set if the input concepts are copied</summary>
            <param name="arg0_copyInput">False to optimize</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._copyInputConceptsAsync(System.Boolean)">
            <summary>Set if the input concepts are copied</summary>
            <param name="arg0_copyInput">False to optimize</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._copyOutputConcepts(System.Boolean)">
            <summary>Set if the input concepts are copied</summary>
            <param name="arg0_copyOutput">False to optimize</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._copyOutputConceptsAsync(System.Boolean)">
            <summary>Set if the input concepts are copied</summary>
            <param name="arg0_copyOutput">False to optimize</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GenerateSentences(System.String,System.String,System.String)">
            <summary>Generate sentences</summary>
            <param name="arg0_destination">file destination</param>
            <param name="arg1_topic">source topic</param>
            <param name="arg2_language">source language</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GenerateSentencesAsync(System.String,System.String,System.String)">
            <summary>Generate sentences</summary>
            <param name="arg0_destination">file destination</param>
            <param name="arg1_topic">source topic</param>
            <param name="arg2_language">source language</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setLengthForAfterStarOptimization(System.Int32)">
            <summary>Set the sentence length to apply -after star optimization- in matching</summary>
            <param name="arg0_length">set length</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setLengthForAfterStarOptimizationAsync(System.Int32)">
            <summary>Set the sentence length to apply -after star optimization- in matching</summary>
            <param name="arg0_length">set length</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setLengthForBeforeStarOptimization(System.Int32)">
            <summary>Set the sentence length to apply -before star optimization- in matching</summary>
            <param name="arg0_length">set length</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setLengthForBeforeStarOptimizationAsync(System.Int32)">
            <summary>Set the sentence length to apply -before star optimization- in matching</summary>
            <param name="arg0_length">set length</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._onUserSessionFocused(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._onUserSessionFocusedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._onUserDeleted(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._onUserDeletedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._us_getUserData(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._us_getUserDataAsync(System.String,System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setUserSessionObeyed(System.Boolean)">
            <summary>Query if dialog sessions are controlled by ALUserSession</summary>
            <param name="arg0_is_obeyed">Bool. True if dialog should open/close sessions according to ALUserSession</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._setUserSessionObeyedAsync(System.Boolean)">
            <summary>Query if dialog sessions are controlled by ALUserSession</summary>
            <param name="arg0_is_obeyed">Bool. True if dialog should open/close sessions according to ALUserSession</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._isUserSessionObeyed">
            <summary>Query if dialog sessions are controlled by ALUserSession</summary>
            <returns>Bool. True if dialog will open/close sessions according to ALUserSession</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog._isUserSessionObeyedAsync">
            <summary>Query if dialog sessions are controlled by ALUserSession</summary>
            <returns>Bool. True if dialog will open/close sessions according to ALUserSession</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageListISOToNU">
            <summary>get language map ISO to NU format</summary>
            <returns>get language map ISO to NU format</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageListISOToNUAsync">
            <summary>get language map ISO to NU format</summary>
            <returns>get language map ISO to NU format</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageListNUToISO">
            <summary>get language map NU to ISO format</summary>
            <returns>get language map NU to ISO format</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageListNUToISOAsync">
            <summary>get language map NU to ISO format</summary>
            <returns>get language map NU to ISO format</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageListLongToNU">
            <summary>get language map Long to NU format</summary>
            <returns>get language map Long to NU format</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageListLongToNUAsync">
            <summary>get language map Long to NU format</summary>
            <returns>get language map Long to NU format</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageListNUToLong">
            <summary>get language map NU to Long format</summary>
            <returns>get language map NU to Long format</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.GetLanguageListNUToLongAsync">
            <summary>get language map NU to Long format</summary>
            <returns>get language map NU to Long format</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ConvertNUToLong(System.String)">
            <summary>convert language from NU format to Long format</summary>
            <param name="arg0_Language">language in NU format</param>
            <returns>language in Long format </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ConvertNUToLongAsync(System.String)">
            <summary>convert language from NU format to Long format</summary>
            <param name="arg0_Language">language in NU format</param>
            <returns>language in Long format </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ConvertLongToNU(System.String)">
            <summary>convert language from Long format to NU format</summary>
            <param name="arg0_Language">language in Long format</param>
            <returns>language in NU format </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ConvertLongToNUAsync(System.String)">
            <summary>convert language from Long format to NU format</summary>
            <param name="arg0_Language">language in Long format</param>
            <returns>language in NU format </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ConvertISOToNU(System.String)">
            <summary>convert language from ISO format to NU format</summary>
            <param name="arg0_Language">language in ISO format</param>
            <returns>language in NU format </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ConvertISOToNUAsync(System.String)">
            <summary>convert language from ISO format to NU format</summary>
            <param name="arg0_Language">language in ISO format</param>
            <returns>language in NU format </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ConvertNUToISO(System.String)">
            <summary>convert language from NU format to ISO format</summary>
            <param name="arg0_Language">language in NU format</param>
            <returns>language in ISO format </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.ConvertNUToISOAsync(System.String)">
            <summary>convert language from NU format to ISO format</summary>
            <param name="arg0_Language">language in NU format</param>
            <returns>language in ISO format </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableSimulatedApps(System.Boolean)">
            <summary>Define if applications will be launched or not</summary>
            <param name="arg0_simulateApps">set simulated apps</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDialog.EnableSimulatedAppsAsync(System.Boolean)">
            <summary>Define if applications will be launched or not</summary>
            <param name="arg0_simulateApps">set simulated apps</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALListeningMovement">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALListeningMovement.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALListeningMovement.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALListeningMovement.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALListeningMovement.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.SetEnabled(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.SetEnabledAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.IsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.IsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.IsRunning">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement.IsRunningAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement._setEnabled(System.Boolean,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement._setEnabledAsync(System.Boolean,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement._isEnabled(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALListeningMovement._isEnabledAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSpeakingMovement">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSpeakingMovement.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSpeakingMovement.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSpeakingMovement.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.SetEnabled(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.SetEnabledAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsRunning">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.IsRunningAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.SetMode(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.SetModeAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.GetMode">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.GetModeAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.AddTagsToWords(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.AddTagsToWordsAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.ResetTagsToWords">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement.ResetTagsToWordsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement._reset">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement._resetAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement._getConfig">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSpeakingMovement._getConfigAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALAnimationPlayer">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAnimationPlayer.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAnimationPlayer.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALAnimationPlayer.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALAnimationPlayer.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.AddTagForAnimations(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.AddTagForAnimationsAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.DeclarePathForTags(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.DeclarePathForTagsAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._declarePathForTagsPermanently(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._declarePathForTagsPermanentlyAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.Reset">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.ResetAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getPathsForTags">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getPathsForTagsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getTags">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getTagsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getTags(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getTagsAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getAnimations">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getAnimationsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getAnimations(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getAnimationsAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getAnimationsForTag(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getAnimationsForTagAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getAnimationsForTag(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer._getAnimationsForTagAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.Run(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RunAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RunTag(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RunTagAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RunTag(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALAnimationPlayer.RunTagAsync(System.String,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALMotion">
            <summary>ALMotion provides methods that help make Nao move. It contains commands for manipulating joint angles, joint stiffness, and a higher level API for controling walks.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMotion.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMotion.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMotion.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALMotion.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WakeUp">
            <summary>The robot will wake up: set Motor ON and go to initial position if needed</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WakeUpAsync">
            <summary>The robot will wake up: set Motor ON and go to initial position if needed</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Rest">
            <summary>The robot will rest: go to a relax and safe position and set Motor OFF</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.RestAsync">
            <summary>The robot will rest: go to a relax and safe position and set Motor OFF</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Rest(System.String)">
            <summary>The robot will rest: go to a relax and safe position on the chain and set Motor OFF</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.RestAsync(System.String)">
            <summary>The robot will rest: go to a relax and safe position on the chain and set Motor OFF</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._rest(System.String)">
            <summary>The robot will rest: go to a relax and safe position on the chain and set Motor OFF</summary>
            <param name="arg0_chainName">The name of the chain to rest.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._restAsync(System.String)">
            <summary>The robot will rest: go to a relax and safe position on the chain and set Motor OFF</summary>
            <param name="arg0_chainName">The name of the chain to rest.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._stopChain(System.String)">
            <summary>The robot will immediately unstiffness the chain.</summary>
            <param name="arg0_chainName">The name of the chain to rest. Can be &quot;LArm&quot;, &quot;RArm&quot;, or &quot;Arms&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._stopChainAsync(System.String)">
            <summary>The robot will immediately unstiffness the chain.</summary>
            <param name="arg0_chainName">The name of the chain to rest. Can be &quot;LArm&quot;, &quot;RArm&quot;, or &quot;Arms&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._restReflex(System.String,System.Object)">
            <summary>The robot propose several adapted rest.</summary>
            <param name="arg0_whyString">A string describing the root cause of the request.</param>
            <param name="arg1_stateList">An ALValue [[[name list], a string or array of angles], ...].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._restReflexAsync(System.String,System.Object)">
            <summary>The robot propose several adapted rest.</summary>
            <param name="arg0_whyString">A string describing the root cause of the request.</param>
            <param name="arg1_stateList">An ALValue [[[name list], a string or array of angles], ...].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._blockedLegReflex">
            <summary>Go to a stable rest posture given the blocked joints</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._blockedLegReflexAsync">
            <summary>Go to a stable rest posture given the blocked joints</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._shutdown">
            <summary>The robot will rest: wakeUp is not allowed anymore.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._shutdownAsync">
            <summary>The robot will rest: wakeUp is not allowed anymore.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._isChainGoToOrInRest(System.String)">
            <summary>Returns true if the chain is going to rest or is already in rest</summary>
            <param name="arg0_chainName">The chain name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._isChainGoToOrInRestAsync(System.String)">
            <summary>Returns true if the chain is going to rest or is already in rest</summary>
            <param name="arg0_chainName">The chain name</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setMotionPosture(System.String,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Set the reference posture for fallmanager, stand init, idle posture, breath, etc.</summary>
            <param name="arg0_postureName">The posture name</param>
            <param name="arg1_bodyAngles">The body angles. Use getBodyNames api with parameter JointActuators.</param>
            <returns>Success to set the desired motion posture.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setMotionPostureAsync(System.String,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Set the reference posture for fallmanager, stand init, idle posture, breath, etc.</summary>
            <param name="arg0_postureName">The posture name</param>
            <param name="arg1_bodyAngles">The body angles. Use getBodyNames api with parameter JointActuators.</param>
            <returns>Success to set the desired motion posture.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionPosture(System.String)">
            <summary></summary>
            <param name="arg0_postureName">The posture name</param>
            <returns>Use getBodyNames api with parameter JointActuators.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionPostureAsync(System.String)">
            <summary></summary>
            <param name="arg0_postureName">The posture name</param>
            <returns>Use getBodyNames api with parameter JointActuators.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionPostureList">
            <summary></summary>
            <returns>All the postures in motion posture library</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionPostureListAsync">
            <summary></summary>
            <returns>All the postures in motion posture library</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.RobotIsWakeUp">
            <summary>return true if the robot is already wakeUp</summary>
            <returns>True if the robot is already wakeUp.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.RobotIsWakeUpAsync">
            <summary>return true if the robot is already wakeUp</summary>
            <returns>True if the robot is already wakeUp.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StiffnessInterpolation(System.Object,System.Object,System.Object)">
            <summary>Interpolates one or multiple joints to a target stiffness or along timed trajectories of stiffness. This is a blocking call.</summary>
            <param name="arg0_names">Name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_stiffnessLists">An stiffness, list of stiffnesses or list of list of stiffnesses</param>
            <param name="arg2_timeLists">A time, list of times or list of list of times.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StiffnessInterpolationAsync(System.Object,System.Object,System.Object)">
            <summary>Interpolates one or multiple joints to a target stiffness or along timed trajectories of stiffness. This is a blocking call.</summary>
            <param name="arg0_names">Name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_stiffnessLists">An stiffness, list of stiffnesses or list of list of stiffnesses</param>
            <param name="arg2_timeLists">A time, list of times or list of list of times.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetStiffnesses(System.Object,System.Object)">
            <summary>Sets the stiffness of one or more joints. This is a non-blocking call.</summary>
            <param name="arg0_names">Names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_stiffnesses">One or more stiffnesses between zero and one.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetStiffnessesAsync(System.Object,System.Object)">
            <summary>Sets the stiffness of one or more joints. This is a non-blocking call.</summary>
            <param name="arg0_names">Names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_stiffnesses">One or more stiffnesses between zero and one.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setStiffnesses(System.Object,System.Object)">
            <summary>Sets the stiffness of one or more joints. This is a non-blocking call.</summary>
            <param name="arg0_names">Names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_stiffnesses">One or more stiffnesses between zero and one.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setStiffnessesAsync(System.Object,System.Object)">
            <summary>Sets the stiffness of one or more joints. This is a non-blocking call.</summary>
            <param name="arg0_names">Names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_stiffnesses">One or more stiffnesses between zero and one.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setSafeStiffnesses(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32},System.Single)">
            <summary>Set the custom stiffnesses to maintain on the given joints and actuators to ensure safety. </summary>
            <param name="arg0_jointIndexes">Vector of joint indexes</param>
            <param name="arg1_actuatorIndexes">Vector of actuator indexes</param>
            <param name="arg2_stiffness">The stiffness to maintain between zero and one.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setSafeStiffnessesAsync(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32},System.Single)">
            <summary>Set the custom stiffnesses to maintain on the given joints and actuators to ensure safety. </summary>
            <param name="arg0_jointIndexes">Vector of joint indexes</param>
            <param name="arg1_actuatorIndexes">Vector of actuator indexes</param>
            <param name="arg2_stiffness">The stiffness to maintain between zero and one.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._disableSafeStiffnesses(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>Disable the safe stiffnesses set for the given joints and actuators.</summary>
            <param name="arg0_jointIndexes">Vector of joint indexes</param>
            <param name="arg1_actuatorIndexes">Vector of actuator indexes</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._disableSafeStiffnessesAsync(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>Disable the safe stiffnesses set for the given joints and actuators.</summary>
            <param name="arg0_jointIndexes">Vector of joint indexes</param>
            <param name="arg1_actuatorIndexes">Vector of actuator indexes</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetStiffnesses(System.Object)">
            <summary>Gets stiffness of a joint or group of joints</summary>
            <param name="arg0_jointName">Name of the joints, chains, &quot;Body&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <returns>One or more stiffnesses. 1.0 indicates maximum stiffness. 0.0 indicated minimum stiffness</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetStiffnessesAsync(System.Object)">
            <summary>Gets stiffness of a joint or group of joints</summary>
            <param name="arg0_jointName">Name of the joints, chains, &quot;Body&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <returns>One or more stiffnesses. 1.0 indicates maximum stiffness. 0.0 indicated minimum stiffness</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AngleInterpolation(System.Object,System.Object,System.Object,System.Boolean)">
            <summary>Interpolates one or multiple joints to a target angle or along timed trajectories. This is a blocking call.</summary>
            <param name="arg0_names">Name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <param name="arg1_angleLists">An angle, list of angles or list of list of angles in radians</param>
            <param name="arg2_timeLists">A time, list of times or list of list of times in seconds</param>
            <param name="arg3_isAbsolute">If true, the movement is described in absolute angles, else the angles are relative to the current angle.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AngleInterpolationAsync(System.Object,System.Object,System.Object,System.Boolean)">
            <summary>Interpolates one or multiple joints to a target angle or along timed trajectories. This is a blocking call.</summary>
            <param name="arg0_names">Name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <param name="arg1_angleLists">An angle, list of angles or list of list of angles in radians</param>
            <param name="arg2_timeLists">A time, list of times or list of list of times in seconds</param>
            <param name="arg3_isAbsolute">If true, the movement is described in absolute angles, else the angles are relative to the current angle.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AngleInterpolationWithSpeed(System.Object,System.Object,System.Single)">
            <summary>Interpolates one or multiple joints to a target angle, using a fraction of max speed. Only one target angle is allowed for each joint. This is a blocking call.</summary>
            <param name="arg0_names">Name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_targetAngles">An angle, or list of angles in radians</param>
            <param name="arg2_maxSpeedFraction">A fraction.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AngleInterpolationWithSpeedAsync(System.Object,System.Object,System.Single)">
            <summary>Interpolates one or multiple joints to a target angle, using a fraction of max speed. Only one target angle is allowed for each joint. This is a blocking call.</summary>
            <param name="arg0_names">Name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_targetAngles">An angle, or list of angles in radians</param>
            <param name="arg2_maxSpeedFraction">A fraction.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AngleInterpolationBezier(System.Collections.Generic.IEnumerable{System.String},System.Object,System.Object)">
            <summary>Interpolates a sequence of timed angles for several motors using bezier control points. This is a blocking call.</summary>
            <param name="arg0_jointNames">A vector of joint names</param>
            <param name="arg1_times">An ragged ALValue matrix of floats. Each line corresponding to a motor, and column element to a control point.</param>
            <param name="arg2_controlPoints">An ALValue array of arrays each containing [float angle, Handle1, Handle2], where Handle is [int InterpolationType, float dAngle, float dTime] descibing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceeding the point, the second describes the curve following the point.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AngleInterpolationBezierAsync(System.Collections.Generic.IEnumerable{System.String},System.Object,System.Object)">
            <summary>Interpolates a sequence of timed angles for several motors using bezier control points. This is a blocking call.</summary>
            <param name="arg0_jointNames">A vector of joint names</param>
            <param name="arg1_times">An ragged ALValue matrix of floats. Each line corresponding to a motor, and column element to a control point.</param>
            <param name="arg2_controlPoints">An ALValue array of arrays each containing [float angle, Handle1, Handle2], where Handle is [int InterpolationType, float dAngle, float dTime] descibing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceeding the point, the second describes the curve following the point.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Animation(System.Collections.Generic.IEnumerable{System.String},System.Object,System.Object,System.Object,System.Object)">
            <summary>Interpolates a sequence of timed angles for several motors using bezier control points. This is a blocking call.</summary>
            <param name="arg0_jointNames">A vector of joint names</param>
            <param name="arg1_times">An ragged ALValue matrix of floats. Each line corresponding to a motor, and column element to a control point.</param>
            <param name="arg2_controlPoints">An ALValue array of arrays each containing [float angle, Handle1, Handle2], where Handle is [int InterpolationType, float dAngle, float dTime] descibing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceeding the point, the second describes the curve following the point.</param>
            <param name="arg3_isAbsolute">A bool or a vector of bool. If true, the movement is described in absolute angles, else the angles are relative to the current angle.</param>
            <param name="arg4_supportSequence">An alvalue containing a list of [nameEffector, timeList, isActiveList].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AnimationAsync(System.Collections.Generic.IEnumerable{System.String},System.Object,System.Object,System.Object,System.Object)">
            <summary>Interpolates a sequence of timed angles for several motors using bezier control points. This is a blocking call.</summary>
            <param name="arg0_jointNames">A vector of joint names</param>
            <param name="arg1_times">An ragged ALValue matrix of floats. Each line corresponding to a motor, and column element to a control point.</param>
            <param name="arg2_controlPoints">An ALValue array of arrays each containing [float angle, Handle1, Handle2], where Handle is [int InterpolationType, float dAngle, float dTime] descibing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceeding the point, the second describes the curve following the point.</param>
            <param name="arg3_isAbsolute">A bool or a vector of bool. If true, the movement is described in absolute angles, else the angles are relative to the current angle.</param>
            <param name="arg4_supportSequence">An alvalue containing a list of [nameEffector, timeList, isActiveList].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetAngles(System.Object,System.Object,System.Single)">
            <summary>Sets angles. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <param name="arg1_angles">One or more angles in radians</param>
            <param name="arg2_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetAnglesAsync(System.Object,System.Object,System.Single)">
            <summary>Sets angles. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <param name="arg1_angles">One or more angles in radians</param>
            <param name="arg2_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetAngles(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Sets angles. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <param name="arg1_angles">One or more angles in radians</param>
            <param name="arg2_fractionMaxSpeeds">The vector of fraction of maximum speed to use</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetAnglesAsync(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Sets angles. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <param name="arg1_angles">One or more angles in radians</param>
            <param name="arg2_fractionMaxSpeeds">The vector of fraction of maximum speed to use</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ChangeAngles(System.Object,System.Object,System.Single)">
            <summary>Changes Angles. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_changes">One or more changes in radians</param>
            <param name="arg2_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ChangeAnglesAsync(System.Object,System.Object,System.Single)">
            <summary>Changes Angles. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <param name="arg1_changes">One or more changes in radians</param>
            <param name="arg2_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetAngles(System.Object,System.Boolean)">
            <summary>Gets the angles of the joints</summary>
            <param name="arg0_names">Names the joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <param name="arg1_useSensors">If true, sensor angles will be returned</param>
            <returns>Joint angles in radians.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetAnglesAsync(System.Object,System.Boolean)">
            <summary>Gets the angles of the joints</summary>
            <param name="arg0_names">Names the joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <param name="arg1_useSensors">If true, sensor angles will be returned</param>
            <returns>Joint angles in radians.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.OpenHand(System.String)">
            <summary>NAO stiffens the motors of desired hand. Then, he opens the hand, then cuts motor current to conserve energy. This is a blocking call.</summary>
            <param name="arg0_handName">The name of the hand. Could be: &quot;RHand or &quot;LHand&quot;</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.OpenHandAsync(System.String)">
            <summary>NAO stiffens the motors of desired hand. Then, he opens the hand, then cuts motor current to conserve energy. This is a blocking call.</summary>
            <param name="arg0_handName">The name of the hand. Could be: &quot;RHand or &quot;LHand&quot;</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.CloseHand(System.String)">
            <summary>NAO stiffens the motors of desired hand. Then, he closes the hand, then cuts motor current to conserve energy. This is a blocking call.</summary>
            <param name="arg0_handName">The name of the hand. Could be: &quot;RHand&quot; or &quot;LHand&quot;</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.CloseHandAsync(System.String)">
            <summary>NAO stiffens the motors of desired hand. Then, he closes the hand, then cuts motor current to conserve energy. This is a blocking call.</summary>
            <param name="arg0_handName">The name of the hand. Could be: &quot;RHand&quot; or &quot;LHand&quot;</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Move(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given velocity. This is a non-blocking call.</summary>
            <param name="arg0_x">The velocity along x axis [m.s-1].</param>
            <param name="arg1_y">The velocity along y axis [m.s-1].</param>
            <param name="arg2_theta">The velocity around z axis [rd.s-1].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveAsync(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given velocity. This is a non-blocking call.</summary>
            <param name="arg0_x">The velocity along x axis [m.s-1].</param>
            <param name="arg1_y">The velocity along y axis [m.s-1].</param>
            <param name="arg2_theta">The velocity around z axis [rd.s-1].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.Move(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given velocity. This is a non-blocking call.</summary>
            <param name="arg0_x">The velocity along x axis [m.s-1].</param>
            <param name="arg1_y">The velocity along y axis [m.s-1].</param>
            <param name="arg2_theta">The velocity around z axis [rd.s-1].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given velocity. This is a non-blocking call.</summary>
            <param name="arg0_x">The velocity along x axis [m.s-1].</param>
            <param name="arg1_y">The velocity along y axis [m.s-1].</param>
            <param name="arg2_theta">The velocity around z axis [rd.s-1].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveToward(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given normalized velocity. This is a non-blocking call.</summary>
            <param name="arg0_x">The normalized velocity along x axis (between -1 and 1).</param>
            <param name="arg1_y">The normalized velocity along y axis (between -1 and 1).</param>
            <param name="arg2_theta">The normalized velocity around z axis (between -1 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveTowardAsync(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given normalized velocity. This is a non-blocking call.</summary>
            <param name="arg0_x">The normalized velocity along x axis (between -1 and 1).</param>
            <param name="arg1_y">The normalized velocity along y axis (between -1 and 1).</param>
            <param name="arg2_theta">The normalized velocity around z axis (between -1 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveToward(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given normalized velocity. This is a non-blocking call.</summary>
            <param name="arg0_x">The normalized velocity along x axis (between -1 and 1).</param>
            <param name="arg1_y">The normalized velocity along y axis (between -1 and 1).</param>
            <param name="arg2_theta">The normalized velocity around z axis (between -1 and 1).</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveTowardAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given normalized velocity. This is a non-blocking call.</summary>
            <param name="arg0_x">The normalized velocity along x axis (between -1 and 1).</param>
            <param name="arg1_y">The normalized velocity along y axis (between -1 and 1).</param>
            <param name="arg2_theta">The normalized velocity around z axis (between -1 and 1).</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single)">
            <summary>DEPRECATED. Use moveToward() function instead.</summary>
            <param name="arg0_x">Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0]</param>
            <param name="arg1_y">Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0]</param>
            <param name="arg2_theta">Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0]</param>
            <param name="arg3_frequency">Fraction of MaxStepFrequency [0.0 to 1.0]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetWalkTargetVelocityAsync(System.Single,System.Single,System.Single,System.Single)">
            <summary>DEPRECATED. Use moveToward() function instead.</summary>
            <param name="arg0_x">Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0]</param>
            <param name="arg1_y">Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0]</param>
            <param name="arg2_theta">Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0]</param>
            <param name="arg3_frequency">Fraction of MaxStepFrequency [0.0 to 1.0]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single,System.Object)">
            <summary>DEPRECATED. Use moveToward() function instead.</summary>
            <param name="arg0_x">Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0]</param>
            <param name="arg1_y">Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0]</param>
            <param name="arg2_theta">Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0]</param>
            <param name="arg3_frequency">Fraction of MaxStepFrequency [0.0 to 1.0]</param>
            <param name="arg4_feetGaitConfig">An ALValue with the custom gait configuration for both feet</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetWalkTargetVelocityAsync(System.Single,System.Single,System.Single,System.Single,System.Object)">
            <summary>DEPRECATED. Use moveToward() function instead.</summary>
            <param name="arg0_x">Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0]</param>
            <param name="arg1_y">Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0]</param>
            <param name="arg2_theta">Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0]</param>
            <param name="arg3_frequency">Fraction of MaxStepFrequency [0.0 to 1.0]</param>
            <param name="arg4_feetGaitConfig">An ALValue with the custom gait configuration for both feet</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single,System.Object,System.Object)">
            <summary>DEPRECATED. Use moveToward() function instead.</summary>
            <param name="arg0_x">Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0]</param>
            <param name="arg1_y">Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0]</param>
            <param name="arg2_theta">Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0]</param>
            <param name="arg3_frequency">Fraction of MaxStepFrequency [0.0 to 1.0]</param>
            <param name="arg4_leftFootMoveConfig">An ALValue with custom move configuration for the left foot</param>
            <param name="arg5_rightFootMoveConfig">An ALValue with custom move configuration for the right foot</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetWalkTargetVelocityAsync(System.Single,System.Single,System.Single,System.Single,System.Object,System.Object)">
            <summary>DEPRECATED. Use moveToward() function instead.</summary>
            <param name="arg0_x">Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0]</param>
            <param name="arg1_y">Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0]</param>
            <param name="arg2_theta">Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0]</param>
            <param name="arg3_frequency">Fraction of MaxStepFrequency [0.0 to 1.0]</param>
            <param name="arg4_leftFootMoveConfig">An ALValue with custom move configuration for the left foot</param>
            <param name="arg5_rightFootMoveConfig">An ALValue with custom move configuration for the right foot</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveTo(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given position. This is a non-blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveToAsync(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given position. This is a non-blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given position in fixed time. This is a non-blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <param name="arg3_time">The time to reach the target position [s].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveToAsync(System.Single,System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given position in fixed time. This is a non-blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <param name="arg3_time">The time to reach the target position [s].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveTo(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given position. This is a non-blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveToAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given position. This is a non-blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveTo(System.Single,System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given position in fixed time. This is a non-blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <param name="arg3_time">The time to reach the target position [s].</param>
            <param name="arg4_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveToAsync(System.Single,System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given position in fixed time. This is a non-blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <param name="arg3_time">The time to reach the target position [s].</param>
            <param name="arg4_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveTo(System.Object)">
            <summary>Makes the robot move to the given relative positions. This is a blocking call.</summary>
            <param name="arg0_controlPoint">An ALValue with the control points in FRAME_ROBOT.Each control point is relative to the previous one. [[x1, y1, theta1], ..., [xN, yN, thetaN]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveToAsync(System.Object)">
            <summary>Makes the robot move to the given relative positions. This is a blocking call.</summary>
            <param name="arg0_controlPoint">An ALValue with the control points in FRAME_ROBOT.Each control point is relative to the previous one. [[x1, y1, theta1], ..., [xN, yN, thetaN]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveTo(System.Object,System.Object)">
            <summary>Makes the robot move to the given relative positions. This is a blocking call.</summary>
            <param name="arg0_controlPoint">An ALValue with all the control points in FRAME_ROBOT.Each control point is relative to the previous one. [[x1, y1, theta1], ..., [xN, yN, thetaN]</param>
            <param name="arg1_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveToAsync(System.Object,System.Object)">
            <summary>Makes the robot move to the given relative positions. This is a blocking call.</summary>
            <param name="arg0_controlPoint">An ALValue with all the control points in FRAME_ROBOT.Each control point is relative to the previous one. [[x1, y1, theta1], ..., [xN, yN, thetaN]</param>
            <param name="arg1_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._moveToPod(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given position, without taking into account ENABLE_MOVE_PROTECTION config</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._moveToPodAsync(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given position, without taking into account ENABLE_MOVE_PROTECTION config</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._moveToPod(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given position, without taking into account ENABLE_MOVE_PROTECTION config</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._moveToPodAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given position, without taking into account ENABLE_MOVE_PROTECTION config</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The position around z axis [rd].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._followPath(System.Object,System.Object)">
            <summary>Makes the robot follow a given path. This is a non-blocking call.</summary>
            <param name="arg0_path">An ALValue describing a 2D path.</param>
            <param name="arg1_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._followPathAsync(System.Object,System.Object)">
            <summary>Makes the robot follow a given path. This is a non-blocking call.</summary>
            <param name="arg0_path">An ALValue describing a 2D path.</param>
            <param name="arg1_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._followPath(System.Object)">
            <summary>Makes the robot follow a given path. This is a non-blocking call.</summary>
            <param name="arg0_path">An ALValue describing a 2D path.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._followPathAsync(System.Object)">
            <summary>Makes the robot follow a given path. This is a non-blocking call.</summary>
            <param name="arg0_path">An ALValue describing a 2D path.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._followPathInWorld(System.Object,System.Object,System.Object)">
            <summary>Makes the robot follow a given path, in world frame. This is a non-blocking call.</summary>
            <param name="arg0_poseStart">A Pose2D setting the start frame of the path, in World.</param>
            <param name="arg1_path">An ALValue describing a 2D Path.</param>
            <param name="arg2_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._followPathInWorldAsync(System.Object,System.Object,System.Object)">
            <summary>Makes the robot follow a given path, in world frame. This is a non-blocking call.</summary>
            <param name="arg0_poseStart">A Pose2D setting the start frame of the path, in World.</param>
            <param name="arg1_path">An ALValue describing a 2D Path.</param>
            <param name="arg2_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._followPathInWorld(System.Object,System.Object)">
            <summary>Makes the robot follow a given path, in world frame. This is a non-blocking call.</summary>
            <param name="arg0_poseStart">A Pose2D setting the start frame of the path, in World.</param>
            <param name="arg1_path">An ALValue describing a 2D Path.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._followPathInWorldAsync(System.Object,System.Object)">
            <summary>Makes the robot follow a given path, in world frame. This is a non-blocking call.</summary>
            <param name="arg0_poseStart">A Pose2D setting the start frame of the path, in World.</param>
            <param name="arg1_path">An ALValue describing a 2D Path.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setFollowPathSpeedFactor(System.Single)">
            <summary>Changes the reference speed for trajectory following</summary>
            <param name="arg0_speedFactor">Between 0 and 1, relative to max speed</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setFollowPathSpeedFactorAsync(System.Single)">
            <summary>Changes the reference speed for trajectory following</summary>
            <param name="arg0_speedFactor">Between 0 and 1, relative to max speed</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._moveAlong(System.Object)">
            <summary>Move along a trajectory</summary>
            <param name="arg0_trajectory">An ALValue describing a trajectory.</param>
            <returns>The id of the trajectory that was started, as an int</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._moveAlongAsync(System.Object)">
            <summary>Move along a trajectory</summary>
            <param name="arg0_trajectory">An ALValue describing a trajectory.</param>
            <returns>The id of the trajectory that was started, as an int</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._moveAlong(System.Object,System.Single)">
            <summary>Move along a trajectory</summary>
            <param name="arg0_trajectory">An ALValue describing a trajectory.</param>
            <param name="arg1_scaleFactor">A float between 0 and 1 scaling the trajectory.</param>
            <returns>The id of the trajectory that was started, as an int</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._moveAlongAsync(System.Object,System.Single)">
            <summary>Move along a trajectory</summary>
            <param name="arg0_trajectory">An ALValue describing a trajectory.</param>
            <param name="arg1_scaleFactor">A float between 0 and 1 scaling the trajectory.</param>
            <returns>The id of the trajectory that was started, as an int</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getTrajectoryId">
            <summary>Get the id of the current trajectory, if any</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getTrajectoryIdAsync">
            <summary>Get the id of the current trajectory, if any</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._stopAndStitchMoveAlong">
            <summary>Stop current trajectory, then resync</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._stopAndStitchMoveAlongAsync">
            <summary>Stop current trajectory, then resync</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRemainingPath(System.Single)">
            <summary>Get a vector of samples along the current path</summary>
            <param name="arg0_sampleStep">Distance between two samples, in m</param>
            <returns>vector of samples along trajectory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRemainingPathAsync(System.Single)">
            <summary>Get a vector of samples along the current path</summary>
            <param name="arg0_sampleStep">Distance between two samples, in m</param>
            <returns>vector of samples along trajectory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRemainingTrajectory(System.Single,System.Single)">
            <summary>Get a vector of samples along the current trajectory</summary>
            <param name="arg0_timeStep">Time between two samples, in s</param>
            <param name="arg1_preview">Duration of the preview, in s</param>
            <returns>vector of samples along trajectory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRemainingTrajectoryAsync(System.Single,System.Single)">
            <summary>Get a vector of samples along the current trajectory</summary>
            <param name="arg0_timeStep">Time between two samples, in s</param>
            <param name="arg1_preview">Duration of the preview, in s</param>
            <returns>vector of samples along trajectory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getTrajectoryCompletion">
            <summary>Get the ratio of executed trajectory, between 0 and 1</summary>
            <returns>float between 0 and 1</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getTrajectoryCompletionAsync">
            <summary>Get the ratio of executed trajectory, between 0 and 1</summary>
            <returns>float between 0 and 1</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkTo(System.Single,System.Single,System.Single)">
            <summary>DEPRECATED. Use moveTo() function instead.</summary>
            <param name="arg0_x">Distance along the X axis in meters.</param>
            <param name="arg1_y">Distance along the Y axis in meters.</param>
            <param name="arg2_theta">Rotation around the Z axis in radians [-3.1415 to 3.1415].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkToAsync(System.Single,System.Single,System.Single)">
            <summary>DEPRECATED. Use moveTo() function instead.</summary>
            <param name="arg0_x">Distance along the X axis in meters.</param>
            <param name="arg1_y">Distance along the Y axis in meters.</param>
            <param name="arg2_theta">Rotation around the Z axis in radians [-3.1415 to 3.1415].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkTo(System.Single,System.Single,System.Single,System.Object)">
            <summary>DEPRECATED. Use moveTo() function instead.</summary>
            <param name="arg0_x">Distance along the X axis in meters.</param>
            <param name="arg1_y">Distance along the Y axis in meters.</param>
            <param name="arg2_theta">Rotation around the Z axis in radians [-3.1415 to 3.1415].</param>
            <param name="arg3_feetGaitConfig">An ALValue with the custom gait configuration for both feet.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkToAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>DEPRECATED. Use moveTo() function instead.</summary>
            <param name="arg0_x">Distance along the X axis in meters.</param>
            <param name="arg1_y">Distance along the Y axis in meters.</param>
            <param name="arg2_theta">Rotation around the Z axis in radians [-3.1415 to 3.1415].</param>
            <param name="arg3_feetGaitConfig">An ALValue with the custom gait configuration for both feet.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkTo(System.Object)">
            <summary>DEPRECATED. Use moveTo() function instead.</summary>
            <param name="arg0_controlPoint">An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkToAsync(System.Object)">
            <summary>DEPRECATED. Use moveTo() function instead.</summary>
            <param name="arg0_controlPoint">An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkTo(System.Object,System.Object)">
            <summary>DEPRECATED. Use moveTo() function instead.</summary>
            <param name="arg0_controlPoint">An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN]</param>
            <param name="arg1_feetGaitConfig">An ALValue with the custom gait configuration for both feet</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkToAsync(System.Object,System.Object)">
            <summary>DEPRECATED. Use moveTo() function instead.</summary>
            <param name="arg0_controlPoint">An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN]</param>
            <param name="arg1_feetGaitConfig">An ALValue with the custom gait configuration for both feet</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetFootSteps(System.Collections.Generic.IEnumerable{System.String},System.Object,System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
            <summary>Makes Nao do foot step planner. This is a non-blocking call.</summary>
            <param name="arg0_legName">name of the leg to move('LLeg'or 'RLeg')</param>
            <param name="arg1_footSteps">[x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta]</param>
            <param name="arg2_timeList">time list of each foot step</param>
            <param name="arg3_clearExisting">Clear existing foot steps.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetFootStepsAsync(System.Collections.Generic.IEnumerable{System.String},System.Object,System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
            <summary>Makes Nao do foot step planner. This is a non-blocking call.</summary>
            <param name="arg0_legName">name of the leg to move('LLeg'or 'RLeg')</param>
            <param name="arg1_footSteps">[x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta]</param>
            <param name="arg2_timeList">time list of each foot step</param>
            <param name="arg3_clearExisting">Clear existing foot steps.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetFootStepsWithSpeed(System.Collections.Generic.IEnumerable{System.String},System.Object,System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
            <summary>Makes Nao do foot step planner with speed. This is a blocking call.</summary>
            <param name="arg0_legName">name of the leg to move('LLeg'or 'RLeg')</param>
            <param name="arg1_footSteps">[x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta]</param>
            <param name="arg2_fractionMaxSpeed">speed of each foot step. Must be between 0 and 1.</param>
            <param name="arg3_clearExisting">Clear existing foot steps.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetFootStepsWithSpeedAsync(System.Collections.Generic.IEnumerable{System.String},System.Object,System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
            <summary>Makes Nao do foot step planner with speed. This is a blocking call.</summary>
            <param name="arg0_legName">name of the leg to move('LLeg'or 'RLeg')</param>
            <param name="arg1_footSteps">[x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta]</param>
            <param name="arg2_fractionMaxSpeed">speed of each foot step. Must be between 0 and 1.</param>
            <param name="arg3_clearExisting">Clear existing foot steps.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetFootSteps">
            <summary>Get the foot steps. This is a non-blocking call.</summary>
            <returns>Give two list of foot steps. The first one give the unchangeable foot step. The second list give the changeable foot steps. Il you use setFootSteps or setFootStepsWithSpeed with clearExisting parmater equal true, walk engine execute unchangeable foot step and remove the other.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetFootStepsAsync">
            <summary>Get the foot steps. This is a non-blocking call.</summary>
            <returns>Give two list of foot steps. The first one give the unchangeable foot step. The second list give the changeable foot steps. Il you use setFootSteps or setFootStepsWithSpeed with clearExisting parmater equal true, walk engine execute unchangeable foot step and remove the other.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkInit">
            <summary>DEPRECATED. Use moveInit function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkInitAsync">
            <summary>DEPRECATED. Use moveInit function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveInit">
            <summary>Initialize the move process. Check the robot pose and take a right posture. This is blocking called.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveInitAsync">
            <summary>Initialize the move process. Check the robot pose and take a right posture. This is blocking called.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WaitUntilWalkIsFinished">
            <summary>DEPRECATED. Use waitUntilMoveIsFinished function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WaitUntilWalkIsFinishedAsync">
            <summary>DEPRECATED. Use waitUntilMoveIsFinished function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WaitUntilMoveIsFinished">
            <summary>Waits until the move process is finished: This method can be used to block your script/code execution until the move task is totally finished.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WaitUntilMoveIsFinishedAsync">
            <summary>Waits until the move process is finished: This method can be used to block your script/code execution until the move task is totally finished.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkIsActive">
            <summary>DEPRECATED. Use moveIsActive function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WalkIsActiveAsync">
            <summary>DEPRECATED. Use moveIsActive function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveIsActive">
            <summary>Check if the move process is actif.</summary>
            <returns>True if move is active</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.MoveIsActiveAsync">
            <summary>Check if the move process is actif.</summary>
            <returns>True if move is active</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StopWalk">
            <summary>DEPRECATED. Use stopMove function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StopWalkAsync">
            <summary>DEPRECATED. Use stopMove function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StopMove">
            <summary>Stop Move task safely as fast as possible. The move task is ended less brutally than killMove but more quickly than move(0.0, 0.0, 0.0).This is a blocking call.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.StopMoveAsync">
            <summary>Stop Move task safely as fast as possible. The move task is ended less brutally than killMove but more quickly than move(0.0, 0.0, 0.0).This is a blocking call.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetFootGaitConfig(System.String)">
            <summary>DEPRECATED. Use getMoveConfig function instead.Gets the foot Gait config (&quot;MaxStepX&quot;, &quot;MaxStepY&quot;, &quot;MaxStepTheta&quot;,  &quot;MaxStepFrequency&quot;, &quot;StepHeight&quot;, &quot;TorsoWx&quot;, &quot;TorsoWy&quot;) </summary>
            <param name="arg0_config">a string should be &quot;Max&quot;, &quot;Min&quot;, &quot;Default&quot;</param>
            <returns>An ALvalue with the following form :[[&quot;MaxStepX&quot;, value], [&quot;MaxStepY&quot;, value], [&quot;MaxStepTheta&quot;, value], [&quot;MaxStepFrequency&quot;, value], [&quot;StepHeight&quot;, value], [&quot;TorsoWx&quot;, value], [&quot;TorsoWy&quot;, value]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetFootGaitConfigAsync(System.String)">
            <summary>DEPRECATED. Use getMoveConfig function instead.Gets the foot Gait config (&quot;MaxStepX&quot;, &quot;MaxStepY&quot;, &quot;MaxStepTheta&quot;,  &quot;MaxStepFrequency&quot;, &quot;StepHeight&quot;, &quot;TorsoWx&quot;, &quot;TorsoWy&quot;) </summary>
            <param name="arg0_config">a string should be &quot;Max&quot;, &quot;Min&quot;, &quot;Default&quot;</param>
            <returns>An ALvalue with the following form :[[&quot;MaxStepX&quot;, value], [&quot;MaxStepY&quot;, value], [&quot;MaxStepTheta&quot;, value], [&quot;MaxStepFrequency&quot;, value], [&quot;StepHeight&quot;, value], [&quot;TorsoWx&quot;, value], [&quot;TorsoWy&quot;, value]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMoveConfig(System.String)">
            <summary>Gets the move config.</summary>
            <param name="arg0_config">a string should be &quot;Max&quot;, &quot;Min&quot;, &quot;Default&quot;</param>
            <returns>An ALvalue with the move config</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMoveConfigAsync(System.String)">
            <summary>Gets the move config.</summary>
            <param name="arg0_config">a string should be &quot;Max&quot;, &quot;Min&quot;, &quot;Default&quot;</param>
            <returns>An ALvalue with the move config</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetRobotPosition(System.Boolean)">
            <summary>Gets the World Absolute Robot Position.</summary>
            <param name="arg0_useSensors">If true, use the sensor values</param>
            <returns>A vector containing the World Absolute Robot Position. (Absolute Position X, Absolute Position Y, Absolute Angle Z)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetRobotPositionAsync(System.Boolean)">
            <summary>Gets the World Absolute Robot Position.</summary>
            <param name="arg0_useSensors">If true, use the sensor values</param>
            <returns>A vector containing the World Absolute Robot Position. (Absolute Position X, Absolute Position Y, Absolute Angle Z)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetNextRobotPosition">
            <summary>Gets the World Absolute next Robot Position.In fact in the walk algorithm some foot futur foot step are incompressible due to preview control, so this function give the next robot position which is incompressible.If the robot doesn't walk this function is equivalent to getRobotPosition(false)</summary>
            <returns>A vector containing the World Absolute next Robot position.(Absolute Position X, Absolute Position Y, Absolute Angle Z)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetNextRobotPositionAsync">
            <summary>Gets the World Absolute next Robot Position.In fact in the walk algorithm some foot futur foot step are incompressible due to preview control, so this function give the next robot position which is incompressible.If the robot doesn't walk this function is equivalent to getRobotPosition(false)</summary>
            <returns>A vector containing the World Absolute next Robot position.(Absolute Position X, Absolute Position Y, Absolute Angle Z)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getStopMovePosition">
            <summary>Get the relative position of the robot if stop move is called now.</summary>
            <returns>A vector containing the Relative Position. (Position X, Position Y, Angle Z)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getStopMovePositionAsync">
            <summary>Get the relative position of the robot if stop move is called now.</summary>
            <returns>A vector containing the Relative Position. (Position X, Position Y, Angle Z)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetRobotVelocity">
            <summary>Gets the World Absolute Robot Velocity.</summary>
            <returns>A vector containing the World Absolute Robot Velocity. (Absolute Velocity Translation X [m.s-1], Absolute Velocity Translation Y[m.s-1], Absolute Velocity Rotation WZ [rd.s-1])</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetRobotVelocityAsync">
            <summary>Gets the World Absolute Robot Velocity.</summary>
            <returns>A vector containing the World Absolute Robot Velocity. (Absolute Velocity Translation X [m.s-1], Absolute Velocity Translation Y[m.s-1], Absolute Velocity Rotation WZ [rd.s-1])</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCumulatedDisplacement">
            <summary>Get the absolute cumulated displacement since robot is up, in robot frame.</summary>
            <returns>A vector containing the absolute cumulated displacement, in robot frame. (Absolute Displacement X [m], Absolute Displacement Y[m], Absolute Displacement Theta [rd])</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCumulatedDisplacementAsync">
            <summary>Get the absolute cumulated displacement since robot is up, in robot frame.</summary>
            <returns>A vector containing the absolute cumulated displacement, in robot frame. (Absolute Displacement X [m], Absolute Displacement Y[m], Absolute Displacement Theta [rd])</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetWalkArmsEnabled">
            <summary>DEPRECATED. Gets if Arms Motions are enabled during the Walk Process.</summary>
            <returns>True Arm Motions are controlled by the Walk Task.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetWalkArmsEnabledAsync">
            <summary>DEPRECATED. Gets if Arms Motions are enabled during the Walk Process.</summary>
            <returns>True Arm Motions are controlled by the Walk Task.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetWalkArmsEnabled(System.Boolean,System.Boolean)">
            <summary>DEPRECATED. Sets if Arms Motions are enabled during the Walk Process.</summary>
            <param name="arg0_leftArmEnabled">if true Left Arm motions are controlled by the Walk Task</param>
            <param name="arg1_rightArmEnabled">if true Right Arm mMotions are controlled by the Walk Task</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetWalkArmsEnabledAsync(System.Boolean,System.Boolean)">
            <summary>DEPRECATED. Sets if Arms Motions are enabled during the Walk Process.</summary>
            <param name="arg0_leftArmEnabled">if true Left Arm motions are controlled by the Walk Task</param>
            <param name="arg1_rightArmEnabled">if true Right Arm mMotions are controlled by the Walk Task</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMoveArmsEnabled(System.String)">
            <summary>Gets if Arms Motions are enabled during the Move Process.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;LArm&quot;, &quot;RArm&quot; or &quot;Arms&quot;</param>
            <returns>For LArm and RArm true if the corresponding arm is enabled. For Arms, true if both are enabled. False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMoveArmsEnabledAsync(System.String)">
            <summary>Gets if Arms Motions are enabled during the Move Process.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;LArm&quot;, &quot;RArm&quot; or &quot;Arms&quot;</param>
            <returns>For LArm and RArm true if the corresponding arm is enabled. For Arms, true if both are enabled. False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetMoveArmsEnabled(System.Boolean,System.Boolean)">
            <summary>Sets if Arms Motions are enabled during the Move Process.</summary>
            <param name="arg0_leftArmEnabled">if true Left Arm motions are controlled by the Move Task</param>
            <param name="arg1_rightArmEnabled">if true Right Arm mMotions are controlled by the Move Task</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetMoveArmsEnabledAsync(System.Boolean,System.Boolean)">
            <summary>Sets if Arms Motions are enabled during the Move Process.</summary>
            <param name="arg0_leftArmEnabled">if true Left Arm motions are controlled by the Move Task</param>
            <param name="arg1_rightArmEnabled">if true Right Arm mMotions are controlled by the Move Task</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PositionInterpolation(System.String,System.Int32,System.Object,System.Int32,System.Object,System.Boolean)">
            <summary>DEPRECATED. Use positionInterpolations function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_path">Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_durations">Vector of times in seconds corresponding to the path points</param>
            <param name="arg5_isAbsolute">If true, the movement is absolute else relative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PositionInterpolationAsync(System.String,System.Int32,System.Object,System.Int32,System.Object,System.Boolean)">
            <summary>DEPRECATED. Use positionInterpolations function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_path">Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_durations">Vector of times in seconds corresponding to the path points</param>
            <param name="arg5_isAbsolute">If true, the movement is absolute else relative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PositionInterpolations(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>DEPRECATED. Use the other positionInterpolations function instead.</summary>
            <param name="arg0_effectorNames">Vector of chain names. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_taskSpaceForAllPaths">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_paths">Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_axisMasks">Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_relativeTimes">Vector of times in seconds corresponding to the path points</param>
            <param name="arg5_isAbsolute">If true, the movement is absolute else relative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PositionInterpolationsAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>DEPRECATED. Use the other positionInterpolations function instead.</summary>
            <param name="arg0_effectorNames">Vector of chain names. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_taskSpaceForAllPaths">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_paths">Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_axisMasks">Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_relativeTimes">Vector of times in seconds corresponding to the path points</param>
            <param name="arg5_isAbsolute">If true, the movement is absolute else relative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PositionInterpolations(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>Moves end-effectors to the given positions and orientations over time. This is a blocking call.</summary>
            <param name="arg0_effectorNames">Vector of chain names. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_taskSpaceForAllPaths">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_paths">Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_axisMasks">Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_relativeTimes">Vector of times in seconds corresponding to the path points</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.PositionInterpolationsAsync(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>Moves end-effectors to the given positions and orientations over time. This is a blocking call.</summary>
            <param name="arg0_effectorNames">Vector of chain names. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_taskSpaceForAllPaths">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_paths">Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_axisMasks">Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_relativeTimes">Vector of times in seconds corresponding to the path points</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetPosition(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Int32)">
            <summary>Moves an end-effector to DEPRECATED. Use setPositions function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;,&quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_position">6D position array (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetPositionAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Int32)">
            <summary>Moves an end-effector to DEPRECATED. Use setPositions function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;,&quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_position">6D position array (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetPositions(System.Object,System.Object,System.Object,System.Single,System.Object)">
            <summary>Moves multiple end-effectors to the given position and orientation position6d. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of effector.</param>
            <param name="arg1_spaces">The task frame or task frames {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_positions">Position6D arrays</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetPositionsAsync(System.Object,System.Object,System.Object,System.Single,System.Object)">
            <summary>Moves multiple end-effectors to the given position and orientation position6d. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of effector.</param>
            <param name="arg1_spaces">The task frame or task frames {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_positions">Position6D arrays</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ChangePosition(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Int32)">
            <summary>DEPRECATED. Use setPositions function instead.</summary>
            <param name="arg0_effectorName">Name of the effector.</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_positionChange">6D position change array (xd, yd, zd, wxd, wyd, wzd) in meters and radians</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ChangePositionAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Int32)">
            <summary>DEPRECATED. Use setPositions function instead.</summary>
            <param name="arg0_effectorName">Name of the effector.</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_positionChange">6D position change array (xd, yd, zd, wxd, wyd, wzd) in meters and radians</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetPosition(System.String,System.Int32,System.Boolean)">
            <summary>Gets a Position relative to the FRAME. Axis definition: the x axis is positive toward Nao's front, the y from right to left and the z is vertical. The angle convention of Position6D is Rot_z(wz).Rot_y(wy).Rot_x(wx).</summary>
            <param name="arg0_name">Name of the item. Could be: Head, LArm, RArm, LLeg, RLeg, Torso, CameraTop, CameraBottom, MicroFront, MicroRear, MicroLeft, MicroRight, Accelerometer, Gyrometer, Laser, LFsrFR, LFsrFL, LFsrRR, LFsrRL, RFsrFR, RFsrFL, RFsrRR, RFsrRL, USSensor1, USSensor2, USSensor3, USSensor4. Use getSensorNames for the list of sensors supported on your robot.</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_useSensorValues">If true, the sensor values will be used to determine the position.</param>
            <returns>Vector containing the Position6D using meters and radians (x, y, z, wx, wy, wz)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetPositionAsync(System.String,System.Int32,System.Boolean)">
            <summary>Gets a Position relative to the FRAME. Axis definition: the x axis is positive toward Nao's front, the y from right to left and the z is vertical. The angle convention of Position6D is Rot_z(wz).Rot_y(wy).Rot_x(wx).</summary>
            <param name="arg0_name">Name of the item. Could be: Head, LArm, RArm, LLeg, RLeg, Torso, CameraTop, CameraBottom, MicroFront, MicroRear, MicroLeft, MicroRight, Accelerometer, Gyrometer, Laser, LFsrFR, LFsrFL, LFsrRR, LFsrRL, RFsrFR, RFsrFL, RFsrRR, RFsrRL, USSensor1, USSensor2, USSensor3, USSensor4. Use getSensorNames for the list of sensors supported on your robot.</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_useSensorValues">If true, the sensor values will be used to determine the position.</param>
            <returns>Vector containing the Position6D using meters and radians (x, y, z, wx, wy, wz)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.TransformInterpolation(System.String,System.Int32,System.Object,System.Int32,System.Object,System.Boolean)">
            <summary>DEPRECATED. Use the other transformInterpolations function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;,&quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_path">Vector of Transform arrays</param>
            <param name="arg3_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_duration">Vector of times in seconds corresponding to the path points</param>
            <param name="arg5_isAbsolute">If true, the movement is absolute else relative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.TransformInterpolationAsync(System.String,System.Int32,System.Object,System.Int32,System.Object,System.Boolean)">
            <summary>DEPRECATED. Use the other transformInterpolations function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;,&quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_path">Vector of Transform arrays</param>
            <param name="arg3_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_duration">Vector of times in seconds corresponding to the path points</param>
            <param name="arg5_isAbsolute">If true, the movement is absolute else relative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.TransformInterpolations(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>DEPRECATED. Use the other transformInterpolations function instead.</summary>
            <param name="arg0_effectorNames">Vector of chain names. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_taskSpaceForAllPaths">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_paths">Vector of transforms arrays.</param>
            <param name="arg3_axisMasks">Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_relativeTimes">Vector of times in seconds corresponding to the path points</param>
            <param name="arg5_isAbsolute">If true, the movement is absolute else relative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.TransformInterpolationsAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>DEPRECATED. Use the other transformInterpolations function instead.</summary>
            <param name="arg0_effectorNames">Vector of chain names. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_taskSpaceForAllPaths">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_paths">Vector of transforms arrays.</param>
            <param name="arg3_axisMasks">Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_relativeTimes">Vector of times in seconds corresponding to the path points</param>
            <param name="arg5_isAbsolute">If true, the movement is absolute else relative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.TransformInterpolations(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>Moves end-effectors to the given positions and orientations over time. This is a blocking call.</summary>
            <param name="arg0_effectorNames">Vector of chain names. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_taskSpaceForAllPaths">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_paths">Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_axisMasks">Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_relativeTimes">Vector of times in seconds corresponding to the path points</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.TransformInterpolationsAsync(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>Moves end-effectors to the given positions and orientations over time. This is a blocking call.</summary>
            <param name="arg0_effectorNames">Vector of chain names. Could be: &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot; </param>
            <param name="arg1_taskSpaceForAllPaths">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_paths">Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians</param>
            <param name="arg3_axisMasks">Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <param name="arg4_relativeTimes">Vector of times in seconds corresponding to the path points</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetTransform(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Int32)">
            <summary>Moves an end-effector to DEPRECATED. Use setTransforms function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;,&quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_transform">Transform arrays</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetTransformAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Int32)">
            <summary>Moves an end-effector to DEPRECATED. Use setTransforms function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;,&quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_transform">Transform arrays</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetTransforms(System.Object,System.Object,System.Object,System.Single,System.Object)">
            <summary>Moves multiple end-effectors to the given position and orientation transforms. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of effector.</param>
            <param name="arg1_spaces">The task frame or task frames {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_transforms">Transform arrays</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetTransformsAsync(System.Object,System.Object,System.Object,System.Single,System.Object)">
            <summary>Moves multiple end-effectors to the given position and orientation transforms. This is a non-blocking call.</summary>
            <param name="arg0_names">The name or names of effector.</param>
            <param name="arg1_spaces">The task frame or task frames {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_transforms">Transform arrays</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ChangeTransform(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Int32)">
            <summary>DEPRECATED. Use setTransforms function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;,&quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_transform">Transform arrays</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.ChangeTransformAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Int32)">
            <summary>DEPRECATED. Use setTransforms function instead.</summary>
            <param name="arg0_chainName">Name of the chain. Could be: &quot;Head&quot;, &quot;LArm&quot;,&quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_transform">Transform arrays</param>
            <param name="arg3_fractionMaxSpeed">The fraction of maximum speed to use</param>
            <param name="arg4_axisMask">Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetTransform(System.String,System.Int32,System.Boolean)">
            <summary>Gets an Homogenous Transform relative to the FRAME. Axis definition: the x axis is positive toward Nao's front, the y from right to left and the z is vertical.</summary>
            <param name="arg0_name">Name of the item. Could be: any joint or chain or sensor (Head, LArm, RArm, LLeg, RLeg, Torso, HeadYaw, ..., CameraTop, CameraBottom, MicroFront, MicroRear, MicroLeft, MicroRight, Accelerometer, Gyrometer, Laser, LFsrFR, LFsrFL, LFsrRR, LFsrRL, RFsrFR, RFsrFL, RFsrRR, RFsrRL, USSensor1, USSensor2, USSensor3, USSensor4. Use getSensorNames for the list of sensors supported on your robot.</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_useSensorValues">If true, the sensor values will be used to determine the position.</param>
            <returns>Vector of 16 floats corresponding to the values of the matrix, line by line.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetTransformAsync(System.String,System.Int32,System.Boolean)">
            <summary>Gets an Homogenous Transform relative to the FRAME. Axis definition: the x axis is positive toward Nao's front, the y from right to left and the z is vertical.</summary>
            <param name="arg0_name">Name of the item. Could be: any joint or chain or sensor (Head, LArm, RArm, LLeg, RLeg, Torso, HeadYaw, ..., CameraTop, CameraBottom, MicroFront, MicroRear, MicroLeft, MicroRight, Accelerometer, Gyrometer, Laser, LFsrFR, LFsrFL, LFsrRR, LFsrRL, RFsrFR, RFsrFL, RFsrRR, RFsrRL, USSensor1, USSensor2, USSensor3, USSensor4. Use getSensorNames for the list of sensors supported on your robot.</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_useSensorValues">If true, the sensor values will be used to determine the position.</param>
            <returns>Vector of 16 floats corresponding to the values of the matrix, line by line.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getSensorTransformAtTime(System.String,System.UInt64)">
            <summary>Gets an Homogenous Transform in World. </summary>
            <param name="arg0_sensorName">Name of the sensor</param>
            <param name="arg1_time">A qi::ClockTimePoint</param>
            <returns>Vector of 16 floats corresponding to the values of the matrix, line by line.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getSensorTransformAtTimeAsync(System.String,System.UInt64)">
            <summary>Gets an Homogenous Transform in World. </summary>
            <param name="arg0_sensorName">Name of the sensor</param>
            <param name="arg1_time">A qi::ClockTimePoint</param>
            <returns>Vector of 16 floats corresponding to the values of the matrix, line by line.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbEnable(System.Boolean)">
            <summary>UserFriendly Whole Body API: enable Whole Body Balancer. It's a Generalized Inverse Kinematics which deals with cartesian control, balance, redundancy and task priority. The main goal is to generate and stabilized consistent motions without precomputed trajectories and adapt nao's behaviour to the situation. The generalized inverse kinematic problem takes in account equality constraints (keep foot fix), inequality constraints (joint limits, balance, ...) and quadratic minimization (cartesian / articular desired trajectories). We solve each step a quadratic programming on the robot.</summary>
            <param name="arg0_isEnabled">Active / Disactive Whole Body Balancer.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbEnableAsync(System.Boolean)">
            <summary>UserFriendly Whole Body API: enable Whole Body Balancer. It's a Generalized Inverse Kinematics which deals with cartesian control, balance, redundancy and task priority. The main goal is to generate and stabilized consistent motions without precomputed trajectories and adapt nao's behaviour to the situation. The generalized inverse kinematic problem takes in account equality constraints (keep foot fix), inequality constraints (joint limits, balance, ...) and quadratic minimization (cartesian / articular desired trajectories). We solve each step a quadratic programming on the robot.</summary>
            <param name="arg0_isEnabled">Active / Disactive Whole Body Balancer.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._enableAutoBalance(System.Boolean)">
            <summary>Enable autobalance on your robot.</summary>
            <param name="arg0_isEnabled">Enable or Disable autobalance.</param>
            <returns>Success to enable autobalance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._enableAutoBalanceAsync(System.Boolean)">
            <summary>Enable autobalance on your robot.</summary>
            <param name="arg0_isEnabled">Enable or Disable autobalance.</param>
            <returns>Success to enable autobalance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._changeSupportMode(System.Boolean,System.String)">
            <summary>Change the support mode to keep balance on a define leg..</summary>
            <param name="arg0_isEnabled">Active / Disactive Whole Body Balancer.</param>
            <param name="arg1_name">The name of the support leg (&quot;Legs&quot;, &quot;LLeg&quot; or &quot;RLeg&quot;.</param>
            <returns>Successfully changed support mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._changeSupportModeAsync(System.Boolean,System.String)">
            <summary>Change the support mode to keep balance on a define leg..</summary>
            <param name="arg0_isEnabled">Active / Disactive Whole Body Balancer.</param>
            <param name="arg1_name">The name of the support leg (&quot;Legs&quot;, &quot;LLeg&quot; or &quot;RLeg&quot;.</param>
            <returns>Successfully changed support mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbFootState(System.String,System.String)">
            <summary>UserFriendly Whole Body API: set the foot state: fixed foot, constrained in a plane or free.</summary>
            <param name="arg0_stateName">Name of the foot state. &quot;Fixed&quot; set the foot fixed. &quot;Plane&quot; constrained the Foot in the plane. &quot;Free&quot; set the foot free.</param>
            <param name="arg1_supportLeg">Name of the foot. &quot;LLeg&quot;, &quot;RLeg&quot; or &quot;Legs&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbFootStateAsync(System.String,System.String)">
            <summary>UserFriendly Whole Body API: set the foot state: fixed foot, constrained in a plane or free.</summary>
            <param name="arg0_stateName">Name of the foot state. &quot;Fixed&quot; set the foot fixed. &quot;Plane&quot; constrained the Foot in the plane. &quot;Free&quot; set the foot free.</param>
            <param name="arg1_supportLeg">Name of the foot. &quot;LLeg&quot;, &quot;RLeg&quot; or &quot;Legs&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbEnableBalanceConstraint(System.Boolean,System.String)">
            <summary>UserFriendly Whole Body API: enable to keep balance in support polygon.</summary>
            <param name="arg0_isEnable">Enable Robot to keep balance.</param>
            <param name="arg1_supportLeg">Name of the support leg: &quot;Legs&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbEnableBalanceConstraintAsync(System.Boolean,System.String)">
            <summary>UserFriendly Whole Body API: enable to keep balance in support polygon.</summary>
            <param name="arg0_isEnable">Enable Robot to keep balance.</param>
            <param name="arg1_supportLeg">Name of the support leg: &quot;Legs&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbGoToBalance(System.String,System.Single)">
            <summary>Advanced Whole Body API: &quot;Com&quot; go to a desired support polygon. This is a blocking call.</summary>
            <param name="arg0_supportLeg">Name of the support leg: &quot;Legs&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;.</param>
            <param name="arg1_duration">Time in seconds. Must be upper 0.5 s.</param>
            <returns>A boolean of the success of the go to balance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbGoToBalanceAsync(System.String,System.Single)">
            <summary>Advanced Whole Body API: &quot;Com&quot; go to a desired support polygon. This is a blocking call.</summary>
            <param name="arg0_supportLeg">Name of the support leg: &quot;Legs&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;.</param>
            <param name="arg1_duration">Time in seconds. Must be upper 0.5 s.</param>
            <returns>A boolean of the success of the go to balance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbGoToBalanceWithSpeed(System.String,System.Single)">
            <summary>Advanced Whole Body API: &quot;Com&quot; go to a desired support polygon. This is a blocking call.</summary>
            <param name="arg0_supportLeg">Name of the support leg: &quot;Legs&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;.</param>
            <param name="arg1_fractionMaxSpeed">The fraction of maximum speed to use.</param>
            <returns>A boolean of the success of the go to balance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbGoToBalanceWithSpeedAsync(System.String,System.Single)">
            <summary>Advanced Whole Body API: &quot;Com&quot; go to a desired support polygon. This is a blocking call.</summary>
            <param name="arg0_supportLeg">Name of the support leg: &quot;Legs&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;.</param>
            <param name="arg1_fractionMaxSpeed">The fraction of maximum speed to use.</param>
            <returns>A boolean of the success of the go to balance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbEnableEffectorControl(System.String,System.Boolean)">
            <summary>UserFriendly Whole Body API: enable whole body cartesian control of an effector.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;Head&quot;, &quot;LArm&quot; or &quot;RArm&quot;. Nao goes to posture init. He manages his balance and keep foot fix. &quot;Head&quot; is controlled in rotation. &quot;LArm&quot; and &quot;RArm&quot; are controlled in position.</param>
            <param name="arg1_isEnabled">Active / Disactive Effector Control.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbEnableEffectorControlAsync(System.String,System.Boolean)">
            <summary>UserFriendly Whole Body API: enable whole body cartesian control of an effector.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;Head&quot;, &quot;LArm&quot; or &quot;RArm&quot;. Nao goes to posture init. He manages his balance and keep foot fix. &quot;Head&quot; is controlled in rotation. &quot;LArm&quot; and &quot;RArm&quot; are controlled in position.</param>
            <param name="arg1_isEnabled">Active / Disactive Effector Control.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbSetEffectorControl(System.String,System.Object)">
            <summary>UserFriendly Whole Body API: set new target for controlled effector. This is a non-blocking call.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;Head&quot;, &quot;LArm&quot; or &quot;RArm&quot;. Nao goes to posture init. He manages his balance and keep foot fix. &quot;Head&quot; is controlled in rotation. &quot;LArm&quot; and &quot;RArm&quot; are controlled in position.</param>
            <param name="arg1_targetCoordinate">&quot;Head&quot; is controlled in rotation (WX, WY, WZ). &quot;LArm&quot; and &quot;RArm&quot; are controlled in position (X, Y, Z). TargetCoordinate must be absolute and expressed in FRAME_ROBOT. If the desired position/orientation is unfeasible, target is resize to the nearest feasible motion.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbSetEffectorControlAsync(System.String,System.Object)">
            <summary>UserFriendly Whole Body API: set new target for controlled effector. This is a non-blocking call.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;Head&quot;, &quot;LArm&quot; or &quot;RArm&quot;. Nao goes to posture init. He manages his balance and keep foot fix. &quot;Head&quot; is controlled in rotation. &quot;LArm&quot; and &quot;RArm&quot; are controlled in position.</param>
            <param name="arg1_targetCoordinate">&quot;Head&quot; is controlled in rotation (WX, WY, WZ). &quot;LArm&quot; and &quot;RArm&quot; are controlled in position (X, Y, Z). TargetCoordinate must be absolute and expressed in FRAME_ROBOT. If the desired position/orientation is unfeasible, target is resize to the nearest feasible motion.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbEnableEffectorOptimization(System.String,System.Boolean)">
            <summary>Advanced Whole Body API: enable to control an effector as an optimization.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_isActive">if true, the effector control is taken in acount in the optimization criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.WbEnableEffectorOptimizationAsync(System.String,System.Boolean)">
            <summary>Advanced Whole Body API: enable to control an effector as an optimization.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_isActive">if true, the effector control is taken in acount in the optimization criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbGetBalanceState">
            <summary>UserFriendly Whole Body API: get Whole Body Balance State.</summary>
            <returns>Name of the Whole Body Balance State (&quot;None&quot;, &quot;LLeg&quot;, &quot;RLeg&quot; or &quot;Legs&quot;). </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbGetBalanceStateAsync">
            <summary>UserFriendly Whole Body API: get Whole Body Balance State.</summary>
            <returns>Name of the Whole Body Balance State (&quot;None&quot;, &quot;LLeg&quot;, &quot;RLeg&quot; or &quot;Legs&quot;). </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbIsActive">
            <summary>UserFriendly Whole Body API: get Whole Body is active.</summary>
            <returns>Get Whole Body is active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbIsActiveAsync">
            <summary>UserFriendly Whole Body API: get Whole Body is active.</summary>
            <returns>Get Whole Body is active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbDefaultConfiguration">
            <summary>UserFriendly Whole Body API: reset the default Whole Body Configuration.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbDefaultConfigurationAsync">
            <summary>UserFriendly Whole Body API: reset the default Whole Body Configuration.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbGetFootState(System.String)">
            <summary>UserFriendly Whole Body API: get the foot state: fixed foot, constrained in a plane or free.</summary>
            <param name="arg0_supportLeg">Name of the foot. &quot;LLeg&quot;, &quot;RLeg&quot; or &quot;Legs&quot;.</param>
            <returns>Name of the foot state. &quot;Fixed&quot; set the foot fixed. &quot;Plane&quot; constrained the Foot in the plane. &quot;Free&quot; set the foot free.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbGetFootStateAsync(System.String)">
            <summary>UserFriendly Whole Body API: get the foot state: fixed foot, constrained in a plane or free.</summary>
            <param name="arg0_supportLeg">Name of the foot. &quot;LLeg&quot;, &quot;RLeg&quot; or &quot;Legs&quot;.</param>
            <returns>Name of the foot state. &quot;Fixed&quot; set the foot fixed. &quot;Plane&quot; constrained the Foot in the plane. &quot;Free&quot; set the foot free.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetJointWeighting(System.String,System.Single)">
            <summary>Advanced Whole Body API: weighting of Joint used in Whole Body Optimization criteria. It is the priority of Joint motion in front of all the other motion task in the quadratic programming optimization.</summary>
            <param name="arg0_jointNames">Name or names of joints, chains, &quot;Body&quot; or &quot;Joints&quot;.</param>
            <param name="arg1_weightings">Weight used in the Whole Body Articular Optimization.Limits : 0 &amp;lt; weighting &amp;lt;= 1000.0. &quot;articularControl&quot; default value : 1000.0.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetJointWeightingAsync(System.String,System.Single)">
            <summary>Advanced Whole Body API: weighting of Joint used in Whole Body Optimization criteria. It is the priority of Joint motion in front of all the other motion task in the quadratic programming optimization.</summary>
            <param name="arg0_jointNames">Name or names of joints, chains, &quot;Body&quot; or &quot;Joints&quot;.</param>
            <param name="arg1_weightings">Weight used in the Whole Body Articular Optimization.Limits : 0 &amp;lt; weighting &amp;lt;= 1000.0. &quot;articularControl&quot; default value : 1000.0.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetJointStiffness(System.String,System.Single)">
            <summary>Advanced Whole Body API: stiffness of Joint used in Whole Body Optimization criteria. It is the stiffness of Joint motion control used in the quadratic programming optimization.</summary>
            <param name="arg0_jointName">Name or names of joints, chains, &quot;Body&quot; or &quot;Joints&quot;.</param>
            <param name="arg1_stiffness">Stiffness used in the Whole Body Articular Optimization.Limits : 0 &amp;lt; stiffness &amp;lt;= 100.0.&quot;articularControl&quot; default value : 30.0.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetJointStiffnessAsync(System.String,System.Single)">
            <summary>Advanced Whole Body API: stiffness of Joint used in Whole Body Optimization criteria. It is the stiffness of Joint motion control used in the quadratic programming optimization.</summary>
            <param name="arg0_jointName">Name or names of joints, chains, &quot;Body&quot; or &quot;Joints&quot;.</param>
            <param name="arg1_stiffness">Stiffness used in the Whole Body Articular Optimization.Limits : 0 &amp;lt; stiffness &amp;lt;= 100.0.&quot;articularControl&quot; default value : 30.0.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetArticularLimitPreview(System.String,System.Int32)">
            <summary>Advanced Whole Body API: preview of Joint Inequality Constraint. It constraint the max joint velocity computed by the quadratic programming. If preview = 1, joint limits can be achieved in 1 step. If preview = 5, joint limits can be achieved in 5 steps. The more preview is, the less desired motion is realised. But the more preview is, the motion safety is increased.</summary>
            <param name="arg0_jointName">Name or names of joints, chains, &quot;Body&quot; or &quot;Joints&quot;.</param>
            <param name="arg1_preview">Preview used in the Whole Body Inequality Constraints. Between [1 50].articularControl&quot; default value : 1.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetArticularLimitPreviewAsync(System.String,System.Int32)">
            <summary>Advanced Whole Body API: preview of Joint Inequality Constraint. It constraint the max joint velocity computed by the quadratic programming. If preview = 1, joint limits can be achieved in 1 step. If preview = 5, joint limits can be achieved in 5 steps. The more preview is, the less desired motion is realised. But the more preview is, the motion safety is increased.</summary>
            <param name="arg0_jointName">Name or names of joints, chains, &quot;Body&quot; or &quot;Joints&quot;.</param>
            <param name="arg1_preview">Preview used in the Whole Body Inequality Constraints. Between [1 50].articularControl&quot; default value : 1.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbEnableEffectorConstraint(System.String,System.Boolean,System.Int32)">
            <summary>Advanced Whole Body API: enable to control an effector as a constraint.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_isActive">if true, the effector control is taken in acount in the optimization criteria.</param>
            <param name="arg2_axisMask">True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbEnableEffectorConstraintAsync(System.String,System.Boolean,System.Int32)">
            <summary>Advanced Whole Body API: enable to control an effector as a constraint.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_isActive">if true, the effector control is taken in acount in the optimization criteria.</param>
            <param name="arg2_axisMask">True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbGetEffectorConstraint(System.String)">
            <summary>Advanced Whole Body API: get effector constraint state.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <returns>[isActive, axisMask].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbGetEffectorConstraintAsync(System.String)">
            <summary>Advanced Whole Body API: get effector constraint state.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <returns>[isActive, axisMask].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbAxisMaskEffector(System.String,System.Boolean,System.Int32)">
            <summary>Advanced Whole Body API: enable to set the axis mask of an effector.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_isOptimized">if true, the optimized effector axis mask is setting, else it is the constrained effector axis mask.</param>
            <param name="arg2_axisMask">Axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbAxisMaskEffectorAsync(System.String,System.Boolean,System.Int32)">
            <summary>Advanced Whole Body API: enable to set the axis mask of an effector.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_isOptimized">if true, the optimized effector axis mask is setting, else it is the constrained effector axis mask.</param>
            <param name="arg2_axisMask">Axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbEnableJointOptimization(System.String,System.Boolean)">
            <summary>Advanced Whole Body API: enable to control a joint as an optimization.</summary>
            <param name="arg0_jointName"> &quot;Body&quot;, name of the chain (&quot;LLeg&quot;,...) or name of the joint : &quot;HeadYaw&quot;, &quot;LKneePitch&quot;.</param>
            <param name="arg1_isActive">if true, the joint control is taken in acount in the optimization criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbEnableJointOptimizationAsync(System.String,System.Boolean)">
            <summary>Advanced Whole Body API: enable to control a joint as an optimization.</summary>
            <param name="arg0_jointName"> &quot;Body&quot;, name of the chain (&quot;LLeg&quot;,...) or name of the joint : &quot;HeadYaw&quot;, &quot;LKneePitch&quot;.</param>
            <param name="arg1_isActive">if true, the joint control is taken in acount in the optimization criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbGetEffectorOptimization(System.String)">
            <summary>Advanced Whole Body API: get effector constraint state.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <returns>[isActive, axisMask].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbGetEffectorOptimizationAsync(System.String)">
            <summary>Advanced Whole Body API: get effector constraint state.</summary>
            <param name="arg0_effectorName">Name of the effector : &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <returns>[isActive, axisMask].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetEffectorWeight(System.String,System.Object)">
            <summary>Advanced Whole Body API: set Effector Weighting in the Whole Body Optimization. It is the priority of Effector motion in front of all the other motion task in the quadratic programming optimization.</summary>
            <param name="arg0_effectorName">&quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_weightingList">Weighting used in the Whole Body Cartesian Optimization. Limits : 0 &amp;lt; weighting &amp;lt;= 1000.0. Default value is 1000.0. We can give the 6 weights corresponding to the 6 degree of freedom of cartesian motion. (WeightX, WeightY, WeightZ, WeightWX, WeightWY, WeightWZ). We can give 2 weights corresponding to translation and rotation axis (WeightTranslation, WeightTranslation, WeightTranslation, WeightRotation, WeightRotation, WeightRotation). We can give 1 weight, it is the same weight for all the axis (Weight, Weight, Weight, Weight, Weight, Weight).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetEffectorWeightAsync(System.String,System.Object)">
            <summary>Advanced Whole Body API: set Effector Weighting in the Whole Body Optimization. It is the priority of Effector motion in front of all the other motion task in the quadratic programming optimization.</summary>
            <param name="arg0_effectorName">&quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_weightingList">Weighting used in the Whole Body Cartesian Optimization. Limits : 0 &amp;lt; weighting &amp;lt;= 1000.0. Default value is 1000.0. We can give the 6 weights corresponding to the 6 degree of freedom of cartesian motion. (WeightX, WeightY, WeightZ, WeightWX, WeightWY, WeightWZ). We can give 2 weights corresponding to translation and rotation axis (WeightTranslation, WeightTranslation, WeightTranslation, WeightRotation, WeightRotation, WeightRotation). We can give 1 weight, it is the same weight for all the axis (Weight, Weight, Weight, Weight, Weight, Weight).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetEffectorStiffness(System.String,System.Object)">
            <summary>Advanced Whole Body API: set Effector Stiffness in Cartesian Control.</summary>
            <param name="arg0_effectorName">&quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_stiffnessList">Stiffness used in the Whole Body Cartesian Optimization. Limits : 0 &amp;lt; stiffness &amp;lt;= 100.0. Default value is 10.0. We can give the 6 stiffnesses corresponding to the 6 degree of freedom of cartesian motion. (StiffnessX, StiffnessY, StiffnessZ, StiffnessWX, StiffnessWY, StiffnessWZ). We can give 2 weights corresponding to translation and rotation axis (StiffnessTranslation, StiffnessTranslation, StiffnessTranslation, StiffnessRotation, StiffnessRotation, StiffnessRotation). We can give 1 stiffness, it is the same stiffness for all the axis (Stiffness, Stiffness, Stiffness, Stiffness, Stiffness, Stiffness).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._wbSetEffectorStiffnessAsync(System.String,System.Object)">
            <summary>Advanced Whole Body API: set Effector Stiffness in Cartesian Control.</summary>
            <param name="arg0_effectorName">&quot;All&quot;, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Head&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;LLeg&quot;, &quot;RLeg&quot;, &quot;Torso&quot;, &quot;Com&quot;.</param>
            <param name="arg1_stiffnessList">Stiffness used in the Whole Body Cartesian Optimization. Limits : 0 &amp;lt; stiffness &amp;lt;= 100.0. Default value is 10.0. We can give the 6 stiffnesses corresponding to the 6 degree of freedom of cartesian motion. (StiffnessX, StiffnessY, StiffnessZ, StiffnessWX, StiffnessWY, StiffnessWZ). We can give 2 weights corresponding to translation and rotation axis (StiffnessTranslation, StiffnessTranslation, StiffnessTranslation, StiffnessRotation, StiffnessRotation, StiffnessRotation). We can give 1 stiffness, it is the same stiffness for all the axis (Stiffness, Stiffness, Stiffness, Stiffness, Stiffness, Stiffness).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetCollisionProtectionEnabled(System.String,System.Boolean)">
            <summary>Enable Anticollision protection of the arms of the robot. Use api isCollision to know if a chain is in collision and can be disactivated.</summary>
            <param name="arg0_pChainName">The chain name {&quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <param name="arg1_pEnable">Activate or disactivate the anticollision of the desired Chain.</param>
            <returns>A bool which return always true.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetCollisionProtectionEnabledAsync(System.String,System.Boolean)">
            <summary>Enable Anticollision protection of the arms of the robot. Use api isCollision to know if a chain is in collision and can be disactivated.</summary>
            <param name="arg0_pChainName">The chain name {&quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <param name="arg1_pEnable">Activate or disactivate the anticollision of the desired Chain.</param>
            <returns>A bool which return always true.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetCollisionProtectionEnabled(System.String)">
            <summary>Allow to know if the collision protection is activated on the given chain.</summary>
            <param name="arg0_pChainName">The chain name {&quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <returns>Return true is the collision protection of the given Arm is activated.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetCollisionProtectionEnabledAsync(System.String)">
            <summary>Allow to know if the collision protection is activated on the given chain.</summary>
            <param name="arg0_pChainName">The chain name {&quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <returns>Return true is the collision protection of the given Arm is activated.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetExternalCollisionProtectionEnabled(System.String,System.Boolean)">
            <summary>Enable Anticollision protection of the arms and base move  of the robot with external environment.</summary>
            <param name="arg0_pName">The name {&quot;All&quot;, &quot;Move&quot;, &quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <param name="arg1_pEnable">Activate or disactivate the anticollision of the desired name.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetExternalCollisionProtectionEnabledAsync(System.String,System.Boolean)">
            <summary>Enable Anticollision protection of the arms and base move  of the robot with external environment.</summary>
            <param name="arg0_pName">The name {&quot;All&quot;, &quot;Move&quot;, &quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <param name="arg1_pEnable">Activate or disactivate the anticollision of the desired name.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._enablePhysicalInteractionForChain(System.String,System.Boolean)">
            <summary>Enable/Disable physical interaction on a chain without disabling safety completely</summary>
            <param name="arg0_pChain">The chain name {&quot;LArm&quot;, &quot;RArm&quot;, &quot;Arms&quot;}</param>
            <param name="arg1_pEnabled">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._enablePhysicalInteractionForChainAsync(System.String,System.Boolean)">
            <summary>Enable/Disable physical interaction on a chain without disabling safety completely</summary>
            <param name="arg0_pChain">The chain name {&quot;LArm&quot;, &quot;RArm&quot;, &quot;Arms&quot;}</param>
            <param name="arg1_pEnabled">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetChainClosestObstaclePosition(System.String,System.Int32)">
            <summary>Gets chain closest obstacle Position .</summary>
            <param name="arg0_pName">The Chain name {&quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <returns>Vector containing the Position3D in meters (x, y, z)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetChainClosestObstaclePositionAsync(System.String,System.Int32)">
            <summary>Gets chain closest obstacle Position .</summary>
            <param name="arg0_pName">The Chain name {&quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <param name="arg1_space">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <returns>Vector containing the Position3D in meters (x, y, z)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetExternalCollisionProtectionEnabled(System.String)">
            <summary>Allow to know if the external collision protection is activated on the given name.</summary>
            <param name="arg0_pName">The name {&quot;All&quot;, &quot;Move&quot;, &quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <returns>Return true is the external collision protection of the given name is activated.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetExternalCollisionProtectionEnabledAsync(System.String)">
            <summary>Allow to know if the external collision protection is activated on the given name.</summary>
            <param name="arg0_pName">The name {&quot;All&quot;, &quot;Move&quot;, &quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <returns>Return true is the external collision protection of the given name is activated.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetOrthogonalSecurityDistance(System.Single)">
            <summary>Defines the orthogonal security distance used with external collision protection &quot;Move&quot;.</summary>
            <param name="arg0_securityDistance">The orthogonal security distance.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetOrthogonalSecurityDistanceAsync(System.Single)">
            <summary>Defines the orthogonal security distance used with external collision protection &quot;Move&quot;.</summary>
            <param name="arg0_securityDistance">The orthogonal security distance.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetOrthogonalSecurityDistance">
            <summary>Gets the current orthogonal security distance.</summary>
            <returns>The current orthogonal security distance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetOrthogonalSecurityDistanceAsync">
            <summary>Gets the current orthogonal security distance.</summary>
            <returns>The current orthogonal security distance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetTangentialSecurityDistance(System.Single)">
            <summary>Defines the tangential security distance used with external collision protection &quot;Move&quot;.</summary>
            <param name="arg0_securityDistance">The tangential security distance.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetTangentialSecurityDistanceAsync(System.Single)">
            <summary>Defines the tangential security distance used with external collision protection &quot;Move&quot;.</summary>
            <param name="arg0_securityDistance">The tangential security distance.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetTangentialSecurityDistance">
            <summary>Gets the current tangential security distance.</summary>
            <returns>The current tangential security distance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetTangentialSecurityDistanceAsync">
            <summary>Gets the current tangential security distance.</summary>
            <returns>The current tangential security distance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.IsCollision(System.String)">
            <summary>Give the collision state of a chain. If a chain has a collision state &quot;none&quot; or &quot;near&quot;, it could be desactivated. </summary>
            <param name="arg0_pChainName">The chain name {&quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <returns>A string which notice the collision state: &quot;none&quot; there are no collision, &quot;near&quot; the collision is taking in account in the anti-collision algorithm, &quot;collision&quot; the chain is in contact with an other body. If the chain asked is &quot;Arms&quot; the most unfavorable result is given. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.IsCollisionAsync(System.String)">
            <summary>Give the collision state of a chain. If a chain has a collision state &quot;none&quot; or &quot;near&quot;, it could be desactivated. </summary>
            <param name="arg0_pChainName">The chain name {&quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <returns>A string which notice the collision state: &quot;none&quot; there are no collision, &quot;near&quot; the collision is taking in account in the anti-collision algorithm, &quot;collision&quot; the chain is in contact with an other body. If the chain asked is &quot;Arms&quot; the most unfavorable result is given. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCollisionStateForObstacleSummary(System.String)">
            <summary>Allow to know if the collision protection is activated on the given chain  and if stiffness of all chain joint is stricly positif.</summary>
            <param name="arg0_pChainName">The chain name {&quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <returns>Return true is the collision protection of the given Arm is activated.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCollisionStateForObstacleSummaryAsync(System.String)">
            <summary>Allow to know if the collision protection is activated on the given chain  and if stiffness of all chain joint is stricly positif.</summary>
            <param name="arg0_pChainName">The chain name {&quot;LArm&quot; or &quot;RArm&quot;}.</param>
            <returns>Return true is the collision protection of the given Arm is activated.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCollisionNames">
            <summary>DEPRECATED: use _getCollisionShapes. Gets the list of collision supported on your robot.</summary>
            <returns>Vector of collision names, radius, parent joint name and parentjoint position.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCollisionNamesAsync">
            <summary>DEPRECATED: use _getCollisionShapes. Gets the list of collision supported on your robot.</summary>
            <returns>Vector of collision names, radius, parent joint name and parentjoint position.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCollisionShapes(System.String)">
            <summary>Gets the list of dynamic collisions in torso frame.</summary>
            <param name="arg0_pName">The name {&quot;static&quot; or &quot;dynamic&quot;}.</param>
            <returns>Vector of collisions name, radius, parent joint name andparent joint position.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCollisionShapesAsync(System.String)">
            <summary>Gets the list of dynamic collisions in torso frame.</summary>
            <param name="arg0_pName">The name {&quot;static&quot; or &quot;dynamic&quot;}.</param>
            <returns>Vector of collisions name, radius, parent joint name andparent joint position.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setCollisionShapes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Object,System.Object)">
            <summary>Set dynamic collision shape for people collision avoidance</summary>
            <param name="arg0_pNameList">A vector of names.</param>
            <param name="arg1_pPairList">A vector of names. &quot;All&quot;, &quot;Sphere&quot;, &quot;Pill&quot; or the collision nameof LArm or RArm.</param>
            <param name="arg2_pBodyList">A vector of body names. Dynamic collision is attached to this body.</param>
            <param name="arg3_pTypeList">A vector of names. &quot;Sphere&quot;, &quot;Plan&quot;, &quot;Pill&quot; or &quot;Tab&quot;.</param>
            <param name="arg4_pShapeList">A vector of shape data.</param>
            <param name="arg5_pPositionList">An ALValue containing a list of position of the shape.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setCollisionShapesAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Object,System.Object)">
            <summary>Set dynamic collision shape for people collision avoidance</summary>
            <param name="arg0_pNameList">A vector of names.</param>
            <param name="arg1_pPairList">A vector of names. &quot;All&quot;, &quot;Sphere&quot;, &quot;Pill&quot; or the collision nameof LArm or RArm.</param>
            <param name="arg2_pBodyList">A vector of body names. Dynamic collision is attached to this body.</param>
            <param name="arg3_pTypeList">A vector of names. &quot;Sphere&quot;, &quot;Plan&quot;, &quot;Pill&quot; or &quot;Tab&quot;.</param>
            <param name="arg4_pShapeList">A vector of shape data.</param>
            <param name="arg5_pPositionList">An ALValue containing a list of position of the shape.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setCollisionShapes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Object,System.Object)">
            <summary>Deprecated: Use setCollisionShapes with typeList. Set dynamic collision shape for people collision avoidance</summary>
            <param name="arg0_pNameList">A vector of names.</param>
            <param name="arg1_pPairList">A vector of names. &quot;All&quot;, &quot;Sphere&quot;, &quot;Pill&quot; or the collision nameof LArm or RArm.</param>
            <param name="arg2_pShapeList">A vector of shape data.</param>
            <param name="arg3_pPositionList">An ALValue containing a list of position of the shape.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setCollisionShapesAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Object,System.Object)">
            <summary>Deprecated: Use setCollisionShapes with typeList. Set dynamic collision shape for people collision avoidance</summary>
            <param name="arg0_pNameList">A vector of names.</param>
            <param name="arg1_pPairList">A vector of names. &quot;All&quot;, &quot;Sphere&quot;, &quot;Pill&quot; or the collision nameof LArm or RArm.</param>
            <param name="arg2_pShapeList">A vector of shape data.</param>
            <param name="arg3_pPositionList">An ALValue containing a list of position of the shape.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getDetectedCollisions(System.Single)">
            <summary>Gets the list of detected collisions supported on your robot.</summary>
            <param name="arg0_pMinimumDistance">Distance to take into account collision pair.</param>
            <returns>Vector of collisions: [nameShape1, nameShape2, distance].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getDetectedCollisionsAsync(System.Single)">
            <summary>Gets the list of detected collisions supported on your robot.</summary>
            <param name="arg0_pMinimumDistance">Distance to take into account collision pair.</param>
            <returns>Vector of collisions: [nameShape1, nameShape2, distance].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getDetectedCollisionsFull">
            <summary>Gets the list of detected collisions supported on your robot.</summary>
            <returns>Vector of collisions: [nameShape1, nameShape2, distance].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getDetectedCollisionsFullAsync">
            <summary>Gets the list of detected collisions supported on your robot.</summary>
            <returns>Vector of collisions: [nameShape1, nameShape2, distance].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getDangerousRegion">
            <summary>Gets the polygon checked for safety during move.</summary>
            <returns>A vector of Position2D.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getDangerousRegionAsync">
            <summary>Gets the polygon checked for safety during move.</summary>
            <returns>A vector of Position2D.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetFallManagerEnabled(System.Boolean)">
            <summary>Enable The fall manager protection for the robot. When a fall is detected the robot adopt a joint configuration to protect himself and cut the stiffness.. An memory event called &quot;robotHasFallen&quot; is generated when the fallManager have been activated.</summary>
            <param name="arg0_pEnable">Activate or disactivate the smart stiffness.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetFallManagerEnabledAsync(System.Boolean)">
            <summary>Enable The fall manager protection for the robot. When a fall is detected the robot adopt a joint configuration to protect himself and cut the stiffness.. An memory event called &quot;robotHasFallen&quot; is generated when the fallManager have been activated.</summary>
            <param name="arg0_pEnable">Activate or disactivate the smart stiffness.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetFallManagerEnabled">
            <summary>Give the state of the fall manager.</summary>
            <returns>Return true is the fall manager is activated. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetFallManagerEnabledAsync">
            <summary>Give the state of the fall manager.</summary>
            <returns>Return true is the fall manager is activated. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetPushRecoveryEnabled(System.Boolean)">
            <summary>Enable The push recovery protection for the robot. </summary>
            <param name="arg0_pEnable">Enable the push recovery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetPushRecoveryEnabledAsync(System.Boolean)">
            <summary>Enable The push recovery protection for the robot. </summary>
            <param name="arg0_pEnable">Enable the push recovery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setPushRecoveryEnabled(System.Boolean)">
            <summary>Enable The push recovery protection for the robot. </summary>
            <param name="arg0_pEnable">Enable the push recovery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setPushRecoveryEnabledAsync(System.Boolean)">
            <summary>Enable The push recovery protection for the robot. </summary>
            <param name="arg0_pEnable">Enable the push recovery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetPushRecoveryEnabled">
            <summary>Give the state of the push recovery.</summary>
            <returns>Return true is the push recovery is activated. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetPushRecoveryEnabledAsync">
            <summary>Give the state of the push recovery.</summary>
            <returns>Return true is the push recovery is activated. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetSmartStiffnessEnabled(System.Boolean)">
            <summary>Enable Smart Stiffness for all the joints (True by default), the update take one motion cycle for updating. The smart Stiffness is a gestion of joint maximum torque. More description is available on the red documentation of ALMotion module.</summary>
            <param name="arg0_pEnable">Activate or disactivate the smart stiffness.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetSmartStiffnessEnabledAsync(System.Boolean)">
            <summary>Enable Smart Stiffness for all the joints (True by default), the update take one motion cycle for updating. The smart Stiffness is a gestion of joint maximum torque. More description is available on the red documentation of ALMotion module.</summary>
            <param name="arg0_pEnable">Activate or disactivate the smart stiffness.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetSmartStiffnessEnabled">
            <summary>Give the state of the smart Stiffness.</summary>
            <returns>Return true is the smart Stiffnes is activated. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetSmartStiffnessEnabledAsync">
            <summary>Give the state of the smart Stiffness.</summary>
            <returns>Return true is the smart Stiffnes is activated. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetDiagnosisEffectEnabled(System.Boolean)">
            <summary>Enable or disable the diagnosis effect into ALMotion</summary>
            <param name="arg0_pEnable">Enable or disable the diagnosis effect.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetDiagnosisEffectEnabledAsync(System.Boolean)">
            <summary>Enable or disable the diagnosis effect into ALMotion</summary>
            <param name="arg0_pEnable">Enable or disable the diagnosis effect.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetDiagnosisEffectEnabled">
            <summary>Give the state of the diagnosis effect.</summary>
            <returns>Return true is the diagnosis reflex is activated. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetDiagnosisEffectEnabledAsync">
            <summary>Give the state of the diagnosis effect.</summary>
            <returns>Return true is the diagnosis reflex is activated. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetJointNames(System.String)">
            <summary>DEPRECATED. Use getBodyNames function instead.</summary>
            <param name="arg0_name">Name of a chain, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Body&quot;, &quot;Chains&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <returns>Vector of strings, one for each joint in the collection</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetJointNamesAsync(System.String)">
            <summary>DEPRECATED. Use getBodyNames function instead.</summary>
            <param name="arg0_name">Name of a chain, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Body&quot;, &quot;Chains&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <returns>Vector of strings, one for each joint in the collection</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetBodyNames(System.String)">
            <summary>Gets the names of all the joints and actuators in the collection.</summary>
            <param name="arg0_name">Name of a chain, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Body&quot;, &quot;Chains&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <returns>Vector of strings, one for each joint and actuator in the collection</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetBodyNamesAsync(System.String)">
            <summary>Gets the names of all the joints and actuators in the collection.</summary>
            <param name="arg0_name">Name of a chain, &quot;Arms&quot;, &quot;Legs&quot;, &quot;Body&quot;, &quot;Chains&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;.</param>
            <returns>Vector of strings, one for each joint and actuator in the collection</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetSensorNames">
            <summary>Gets the list of sensors supported on your robot.</summary>
            <returns>Vector of sensor names</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetSensorNamesAsync">
            <summary>Gets the list of sensors supported on your robot.</summary>
            <returns>Vector of sensor names</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetLimits(System.String)">
            <summary>Get the minAngle (rad), maxAngle (rad), and maxVelocity (rad.s-1) for a given joint or actuator in the body.</summary>
            <param name="arg0_name">Name of a joint, chain, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <returns>Array of ALValue arrays containing the minAngle, maxAngle, maxVelocity and maxTorque for all the bodies specified.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetLimitsAsync(System.String)">
            <summary>Get the minAngle (rad), maxAngle (rad), and maxVelocity (rad.s-1) for a given joint or actuator in the body.</summary>
            <param name="arg0_name">Name of a joint, chain, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <returns>Array of ALValue arrays containing the minAngle, maxAngle, maxVelocity and maxTorque for all the bodies specified.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getFullLimits(System.String)">
            <summary>Get the minAngle (rad), maxAngle (rad), and maxVelocity (rad.s-1) for a given joint or actuator in the body.</summary>
            <param name="arg0_name">Name of a joint, chain, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <returns>Array of ALValue arrays containing the minAngle, maxAngle, maxVelocity, maxTorque, Kc, reduction, efficiency and maxCurrent for all the bodies specified.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getFullLimitsAsync(System.String)">
            <summary>Get the minAngle (rad), maxAngle (rad), and maxVelocity (rad.s-1) for a given joint or actuator in the body.</summary>
            <param name="arg0_name">Name of a joint, chain, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <returns>Array of ALValue arrays containing the minAngle, maxAngle, maxVelocity, maxTorque, Kc, reduction, efficiency and maxCurrent for all the bodies specified.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMotionCycleTime">
            <summary>Get the motion cycle time in milliseconds.</summary>
            <returns>Expressed in milliseconds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMotionCycleTimeAsync">
            <summary>Get the motion cycle time in milliseconds.</summary>
            <returns>Expressed in milliseconds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionCycleNumber">
            <summary>Get the motion cycle number in int.</summary>
            <returns>Expressed in int.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionCycleNumberAsync">
            <summary>Get the motion cycle number in int.</summary>
            <returns>Expressed in int.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetRobotConfig">
            <summary>Get the robot configuration. DEPRECATED. use ALRobotModel</summary>
            <returns>ALValue arrays containing the robot parameter names and the robot parameter values.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetRobotConfigAsync">
            <summary>Get the robot configuration. DEPRECATED. use ALRobotModel</summary>
            <returns>ALValue arrays containing the robot parameter names and the robot parameter values.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetSummary">
            <summary>Returns a string representation of the Model's state</summary>
            <returns>A formated string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetSummaryAsync">
            <summary>Returns a string representation of the Model's state</summary>
            <returns>A formated string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getSummary">
            <summary>Returns a string representation of the Model's state</summary>
            <returns>A formated string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getSummaryAsync">
            <summary>Returns a string representation of the Model's state</summary>
            <returns>A formated string</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMass(System.String)">
            <summary>Gets the mass of a joint, chain, &quot;Body&quot; or &quot;Joints&quot;.</summary>
            <param name="arg0_pName">Name of the body which we want the mass. &quot;Body&quot;, &quot;Joints&quot; and &quot;Com&quot; give the total mass of nao. For the chain, it gives the total mass of the chain.</param>
            <returns>The mass in kg.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetMassAsync(System.String)">
            <summary>Gets the mass of a joint, chain, &quot;Body&quot; or &quot;Joints&quot;.</summary>
            <param name="arg0_pName">Name of the body which we want the mass. &quot;Body&quot;, &quot;Joints&quot; and &quot;Com&quot; give the total mass of nao. For the chain, it gives the total mass of the chain.</param>
            <returns>The mass in kg.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetCOM(System.String,System.Int32,System.Boolean)">
            <summary>Gets the COM of a joint, chain, &quot;Body&quot; or &quot;Joints&quot;.</summary>
            <param name="arg0_pName">Name of the body which we want the mass. In chain name case, this function give the com of the chain.</param>
            <param name="arg1_pSpace">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pUseSensorValues">If true, the sensor values will be used to determine the position.</param>
            <returns>The COM position (meter).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetCOMAsync(System.String,System.Int32,System.Boolean)">
            <summary>Gets the COM of a joint, chain, &quot;Body&quot; or &quot;Joints&quot;.</summary>
            <param name="arg0_pName">Name of the body which we want the mass. In chain name case, this function give the com of the chain.</param>
            <param name="arg1_pSpace">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pUseSensorValues">If true, the sensor values will be used to determine the position.</param>
            <returns>The COM position (meter).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetSupportPolygon(System.Int32,System.Boolean)">
            <summary>Gets the support polygon</summary>
            <param name="arg0_pSpace">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg1_pUseSensorValues">If true, the sensor values will be used to determine the position.</param>
            <returns>A vector containing the x,y coordinates of each of the outer points of the support polygon in specified frame.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetSupportPolygonAsync(System.Int32,System.Boolean)">
            <summary>Gets the support polygon</summary>
            <param name="arg0_pSpace">Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg1_pUseSensorValues">If true, the sensor values will be used to determine the position.</param>
            <returns>A vector containing the x,y coordinates of each of the outer points of the support polygon in specified frame.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getSupportPolygonBipedDebug(System.String)">
            <summary>Gets the support polygon</summary>
            <param name="arg0_pName">LLeg or RLeg</param>
            <returns>A vector containing the x,y coordinates of each of the outer points of the support polygon in specified frame.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getSupportPolygonBipedDebugAsync(System.String)">
            <summary>Gets the support polygon</summary>
            <param name="arg0_pName">LLeg or RLeg</param>
            <returns>A vector containing the x,y coordinates of each of the outer points of the support polygon in specified frame.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getTorque(System.Object,System.Boolean)">
            <summary>Gets the torque of the joints</summary>
            <param name="arg0_names">Names the joints, chains, &quot;Body&quot;, &quot;Joints&quot;. </param>
            <param name="arg1_useSensor">If true, return the sensor torque.</param>
            <returns>Torques in N.m.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getTorqueAsync(System.Object,System.Boolean)">
            <summary>Gets the torque of the joints</summary>
            <param name="arg0_names">Names the joints, chains, &quot;Body&quot;, &quot;Joints&quot;. </param>
            <param name="arg1_useSensor">If true, return the sensor torque.</param>
            <returns>Torques in N.m.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getInertia(System.String)">
            <summary>Gets the inertia matrice of a joint or &quot;Torso&quot;.</summary>
            <param name="arg0_pName">Name of the joint or &quot;Torso&quot;. Inertia is given in the COM of the body, in poseZero orientation.</param>
            <returns>The inertia matrix (kg.m2).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getInertiaAsync(System.String)">
            <summary>Gets the inertia matrice of a joint or &quot;Torso&quot;.</summary>
            <param name="arg0_pName">Name of the joint or &quot;Torso&quot;. Inertia is given in the COM of the body, in poseZero orientation.</param>
            <returns>The inertia matrix (kg.m2).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetMotionConfig(System.Object)">
            <summary>Internal Use.</summary>
            <param name="arg0_config">Internal: An array of ALValues [i][0]: name, [i][1]: value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetMotionConfigAsync(System.Object)">
            <summary>Internal Use.</summary>
            <param name="arg0_config">Internal: An array of ALValues [i][0]: name, [i][1]: value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._naoqiIsReadyCallback">
            <summary>Callback naoqi is ready.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._naoqiIsReadyCallbackAsync">
            <summary>Callback naoqi is ready.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._preferenceUpdatedCallback(System.String,System.Object,System.String)">
            <summary>Callback preferences changed.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._preferenceUpdatedCallbackAsync(System.String,System.Object,System.String)">
            <summary>Callback preferences changed.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._trackerLookAt(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Single},System.Object)">
            <summary>Interpolate with head with prediction.This function is mainly use by the tracker modules.</summary>
            <param name="arg0_pNames">list of Joints Names.</param>
            <param name="arg1_pTargetPositions">list of Joints angles.</param>
            <param name="arg2_pLimits">list of Joints limits.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._trackerLookAtAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Single},System.Object)">
            <summary>Interpolate with head with prediction.This function is mainly use by the tracker modules.</summary>
            <param name="arg0_pNames">list of Joints Names.</param>
            <param name="arg1_pTargetPositions">list of Joints angles.</param>
            <param name="arg2_pLimits">list of Joints limits.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._lookAtWb(System.Single,System.Single)">
            <summary>lookAt in Whole Body mode.</summary>
            <param name="arg0_pTargetWy">The target position wy in FRAME_ROBOT</param>
            <param name="arg1_pTargetWz">The target position wz in FRAME_ROBOT</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._lookAtWbAsync(System.Single,System.Single)">
            <summary>lookAt in Whole Body mode.</summary>
            <param name="arg0_pTargetWy">The target position wy in FRAME_ROBOT</param>
            <param name="arg1_pTargetWz">The target position wz in FRAME_ROBOT</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._lookAtWbWithSpeed(System.Single,System.Single,System.Single)">
            <summary>lookAt in Whole Body mode.</summary>
            <param name="arg0_pTargetWy">The target position wy in FRAME_ROBOT</param>
            <param name="arg1_pTargetWz">The target position wz in FRAME_ROBOT</param>
            <param name="arg2_pMaxSpeedFraction">fraction max speed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._lookAtWbWithSpeedAsync(System.Single,System.Single,System.Single)">
            <summary>lookAt in Whole Body mode.</summary>
            <param name="arg0_pTargetWy">The target position wy in FRAME_ROBOT</param>
            <param name="arg1_pTargetWz">The target position wz in FRAME_ROBOT</param>
            <param name="arg2_pMaxSpeedFraction">fraction max speed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._trackerPointAt(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Interpolate with hands with prediction.This function is mainly use by the tracker modules.</summary>
            <param name="arg0_pNames">list of Joints Names.</param>
            <param name="arg1_pTargetPositions">list of Joints angles.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._trackerPointAtAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Interpolate with hands with prediction.This function is mainly use by the tracker modules.</summary>
            <param name="arg0_pNames">list of Joints Names.</param>
            <param name="arg1_pTargetPositions">list of Joints angles.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._trackerWithSpeed(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single},System.Boolean,System.Boolean)">
            <summary>Interpolate with speed without prediction.</summary>
            <param name="arg0_pNames">list of Joints Names.</param>
            <param name="arg1_pTargetPositions">list of Joints angles.</param>
            <param name="arg2_pTimeSinceDetectionMs">The time in Ms since the target was detected</param>
            <param name="arg3_pMaxSpeedFraction">fraction max speed list.</param>
            <param name="arg4_pUseOfWholeBody">If true, the target is follow in cartesian space by the Head with whole Body constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._trackerWithSpeedAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single},System.Boolean,System.Boolean)">
            <summary>Interpolate with speed without prediction.</summary>
            <param name="arg0_pNames">list of Joints Names.</param>
            <param name="arg1_pTargetPositions">list of Joints angles.</param>
            <param name="arg2_pTimeSinceDetectionMs">The time in Ms since the target was detected</param>
            <param name="arg3_pMaxSpeedFraction">fraction max speed list.</param>
            <param name="arg4_pUseOfWholeBody">If true, the target is follow in cartesian space by the Head with whole Body constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._lookAt(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Single)">
            <summary>lookAt</summary>
            <param name="arg0_pTargetPosition">position 3D to look at.</param>
            <param name="arg1_pFrame">Target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pMaxSpeedFraction">fraction max speed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._lookAtAsync(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Single)">
            <summary>lookAt</summary>
            <param name="arg0_pTargetPosition">position 3D to look at.</param>
            <param name="arg1_pFrame">Target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pMaxSpeedFraction">fraction max speed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._lookAt(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Int32,System.Single)">
            <summary>lookAt</summary>
            <param name="arg0_pTargetPosition">position 3D to look at.</param>
            <param name="arg1_pFrame">Target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pEffectorId">effector id {Middle of eyes = 0, Camera Top = 1, Camera Bottom = 2}.</param>
            <param name="arg3_pMaxSpeedFraction">fraction max speed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._lookAtAsync(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Int32,System.Single)">
            <summary>lookAt</summary>
            <param name="arg0_pTargetPosition">position 3D to look at.</param>
            <param name="arg1_pFrame">Target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pEffectorId">effector id {Middle of eyes = 0, Camera Top = 1, Camera Bottom = 2}.</param>
            <param name="arg3_pMaxSpeedFraction">fraction max speed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._stopLookAt(System.Boolean)">
            <summary>Stop lookAt taskThis function is mainly use by the tracker modules.</summary>
            <param name="arg0_pWithSpeed">if True stop lookAtWithSpeed task.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._stopLookAtAsync(System.Boolean)">
            <summary>Stop lookAt taskThis function is mainly use by the tracker modules.</summary>
            <param name="arg0_pWithSpeed">if True stop lookAtWithSpeed task.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._stopPointAt(System.Boolean)">
            <summary>Stop PointAt taskThis function is mainly use by the tracker modules.</summary>
            <param name="arg0_pWithSpeed">if True stop pointAtWithSpeed task.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._stopPointAtAsync(System.Boolean)">
            <summary>Stop PointAt taskThis function is mainly use by the tracker modules.</summary>
            <param name="arg0_pWithSpeed">if True stop pointAtWithSpeed task.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._updateObstacles(System.Object,System.Object)">
            <summary>Update obstacles</summary>
            <param name="arg0_obstacles">List of closest obstacles [[x, y, z]...]</param>
            <param name="arg1_blindZones">List of blind zones [[Position2D, Position2D...]...]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._updateObstaclesAsync(System.Object,System.Object)">
            <summary>Update obstacles</summary>
            <param name="arg0_obstacles">List of closest obstacles [[x, y, z]...]</param>
            <param name="arg1_blindZones">List of blind zones [[Position2D, Position2D...]...]</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetBreathEnabled(System.String,System.Boolean)">
            <summary>This function starts or stops breathing animation on a chain.Chain name can be &quot;Body&quot;, &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;Legs&quot; or &quot;Head&quot;.Head breathing animation will work only if Leg animation is active.</summary>
            <param name="arg0_pChain">Chain name.</param>
            <param name="arg1_pIsEnabled">Enables / disables the chain.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetBreathEnabledAsync(System.String,System.Boolean)">
            <summary>This function starts or stops breathing animation on a chain.Chain name can be &quot;Body&quot;, &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;Legs&quot; or &quot;Head&quot;.Head breathing animation will work only if Leg animation is active.</summary>
            <param name="arg0_pChain">Chain name.</param>
            <param name="arg1_pIsEnabled">Enables / disables the chain.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetBreathEnabled(System.String)">
            <summary>This function gets the status of breathing animation on a chain.Chain name can be &quot;Body&quot;, &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;Legs&quot; or &quot;Head&quot;.</summary>
            <param name="arg0_pChain">Chain name.</param>
            <returns>True if breathing animation is enabled on the chain.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetBreathEnabledAsync(System.String)">
            <summary>This function gets the status of breathing animation on a chain.Chain name can be &quot;Body&quot;, &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;Legs&quot; or &quot;Head&quot;.</summary>
            <param name="arg0_pChain">Chain name.</param>
            <returns>True if breathing animation is enabled on the chain.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetBreathConfig(System.Object)">
            <summary>This function configures the breathing animation.</summary>
            <param name="arg0_pConfig">Breath configuration.An ALValue of the form [[&quot;Bpm&quot;, pBpm], [&quot;Amplitude&quot;, pAmplitude]].pBpm is a float between 10 and 50 setting the breathing frequency in beats per minute.pAmplitude is a float between 0 and 1 setting the amplitude of the breathing animation.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetBreathConfigAsync(System.Object)">
            <summary>This function configures the breathing animation.</summary>
            <param name="arg0_pConfig">Breath configuration.An ALValue of the form [[&quot;Bpm&quot;, pBpm], [&quot;Amplitude&quot;, pAmplitude]].pBpm is a float between 10 and 50 setting the breathing frequency in beats per minute.pAmplitude is a float between 0 and 1 setting the amplitude of the breathing animation.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetBreathConfig">
            <summary>This function gets the current breathing configuration.</summary>
            <returns>An ALValue of the form [[&quot;Bpm&quot;, bpm], [&quot;Amplitude&quot;, amplitude]].bpm is the breathing frequency in beats per minute.amplitude is the normalized amplitude of the breathing animation, between 0 and 1.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetBreathConfigAsync">
            <summary>This function gets the current breathing configuration.</summary>
            <returns>An ALValue of the form [[&quot;Bpm&quot;, bpm], [&quot;Amplitude&quot;, amplitude]].bpm is the breathing frequency in beats per minute.amplitude is the normalized amplitude of the breathing animation, between 0 and 1.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetIdlePostureEnabled(System.String,System.Boolean)">
            <summary>Starts or stops idle posture management on a chain.Chain name can be &quot;Body&quot;, &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;Legs&quot; or &quot;Head&quot;.</summary>
            <param name="arg0_pChain">Chain name.</param>
            <param name="arg1_pIsEnabled">Enables / disables the chain.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetIdlePostureEnabledAsync(System.String,System.Boolean)">
            <summary>Starts or stops idle posture management on a chain.Chain name can be &quot;Body&quot;, &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;Legs&quot; or &quot;Head&quot;.</summary>
            <param name="arg0_pChain">Chain name.</param>
            <param name="arg1_pIsEnabled">Enables / disables the chain.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetIdlePostureEnabled(System.String)">
            <summary>This function gets the status of idle posture management on a chain.Chain name can be &quot;Body&quot;, &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;Legs&quot; or &quot;Head&quot;.</summary>
            <param name="arg0_pChain">Chain name.</param>
            <returns>True if breathing animation is enabled on the chain.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetIdlePostureEnabledAsync(System.String)">
            <summary>This function gets the status of idle posture management on a chain.Chain name can be &quot;Body&quot;, &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;, &quot;Legs&quot; or &quot;Head&quot;.</summary>
            <param name="arg0_pChain">Chain name.</param>
            <returns>True if breathing animation is enabled on the chain.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetTaskList">
            <summary>Gets an ALValue structure describing the tasks in the Task List</summary>
            <returns>An ALValue containing an ALValue for each task. The inner ALValue contains: Name, MotionID</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.GetTaskListAsync">
            <summary>Gets an ALValue structure describing the tasks in the Task List</summary>
            <returns>An ALValue containing an ALValue for each task. The inner ALValue contains: Name, MotionID</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AreResourcesAvailable(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns true if all the desired resources are available. Only motion API's' blocking call takes resources.</summary>
            <param name="arg0_resourceNames">A vector of resource names such as joints. Use getBodyNames(&quot;Body&quot;) to have the list of the available joint for your robot.</param>
            <returns>True if the resources are available</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AreResourcesAvailableAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns true if all the desired resources are available. Only motion API's' blocking call takes resources.</summary>
            <param name="arg0_resourceNames">A vector of resource names such as joints. Use getBodyNames(&quot;Body&quot;) to have the list of the available joint for your robot.</param>
            <returns>True if the resources are available</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillTask(System.Int32)">
            <summary>Kills a motion task.</summary>
            <param name="arg0_motionTaskID">TaskID of the motion task you want to kill.</param>
            <returns>Return true if the specified motionTaskId has been killed.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillTaskAsync(System.Int32)">
            <summary>Kills a motion task.</summary>
            <param name="arg0_motionTaskID">TaskID of the motion task you want to kill.</param>
            <returns>Return true if the specified motionTaskId has been killed.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillTasksUsingResources(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Kills all tasks that use any of the resources given. Only motion API's' blocking call takes resources and can be killed. Use getBodyNames(&quot;Body&quot;) to have the list of the available joint for your robot.</summary>
            <param name="arg0_resourceNames">A vector of resource joint names</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillTasksUsingResourcesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Kills all tasks that use any of the resources given. Only motion API's' blocking call takes resources and can be killed. Use getBodyNames(&quot;Body&quot;) to have the list of the available joint for your robot.</summary>
            <param name="arg0_resourceNames">A vector of resource joint names</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillWalk">
            <summary>DEPRECATED. Use killMove function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillWalkAsync">
            <summary>DEPRECATED. Use killMove function instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillMove">
            <summary>Emergency Stop on Move task: This method will end the move task brutally, without attempting to return to a balanced state. The robot could easily fall.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillMoveAsync">
            <summary>Emergency Stop on Move task: This method will end the move task brutally, without attempting to return to a balanced state. The robot could easily fall.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillAll">
            <summary>Kills all tasks.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.KillAllAsync">
            <summary>Kills all tasks.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetEnableNotifications(System.Boolean)">
            <summary>Enable / Disable notifications.</summary>
            <param name="arg0_enable">If True enable notifications. If False disable notifications.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.SetEnableNotificationsAsync(System.Boolean)">
            <summary>Enable / Disable notifications.</summary>
            <param name="arg0_enable">If True enable notifications. If False disable notifications.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AreNotificationsEnabled">
            <summary>Return true if notifications are active.</summary>
            <returns>Return True if notifications are active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion.AreNotificationsEnabledAsync">
            <summary>Return true if notifications are active.</summary>
            <returns>Return True if notifications are active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getGroundCollision">
            <summary>Gets the list of collision with the ground.</summary>
            <returns>Vector of collision names and position in torso frame</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getGroundCollisionAsync">
            <summary>Gets the list of collision with the ground.</summary>
            <returns>Vector of collision names and position in torso frame</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getGroundCollisionForForceContact">
            <summary>Gets the list of collision with the ground.</summary>
            <returns>Vector of collision names and position in torso frame</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getGroundCollisionForForceContactAsync">
            <summary>Gets the list of collision with the ground.</summary>
            <returns>Vector of collision names and position in torso frame</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getGroundCollisionForFallManager">
            <summary>Gets the list of collision with the ground.</summary>
            <returns>Vector of collision names and position in torso frame</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getGroundCollisionForFallManagerAsync">
            <summary>Gets the list of collision with the ground.</summary>
            <returns>Vector of collision names and position in torso frame</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getGroundPlaneTf">
            <summary>Gets the ground plane transform in torso frame.</summary>
            <returns>the ground plane transform in torso frame</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getGroundPlaneTfAsync">
            <summary>Gets the ground plane transform in torso frame.</summary>
            <returns>the ground plane transform in torso frame</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getNormalForceContact">
            <summary>Gets the Normal Force Contact.</summary>
            <returns>Vector of normal Force contact</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getNormalForceContactAsync">
            <summary>Gets the Normal Force Contact.</summary>
            <returns>Vector of normal Force contact</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRealTorsoInWorld">
            <summary>It's a getPosition on Torso with inertial Information.This function is used in chorgraphe in 3D View</summary>
            <returns>a transform of the Torso position</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRealTorsoInWorldAsync">
            <summary>It's a getPosition on Torso with inertial Information.This function is used in chorgraphe in 3D View</summary>
            <returns>a transform of the Torso position</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRobotGroundConvexHullDebug">
            <summary></summary>
            <returns>Array of ALValue arrays containing the sphere position2D and radius.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRobotGroundConvexHullDebugAsync">
            <summary></summary>
            <returns>Array of ALValue arrays containing the sphere position2D and radius.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRobotGroundConvexHull">
            <summary>Get the robot convex hull projected on the ground in the ROBOT_FRAME.</summary>
            <returns>Array of ALValue arrays containing the position2D of each convex hull points.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getRobotGroundConvexHullAsync">
            <summary>Get the robot convex hull projected on the ground in the ROBOT_FRAME.</summary>
            <returns>Array of ALValue arrays containing the position2D of each convex hull points.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getJointIsMoving(System.Boolean)">
            <summary>Gets if the joints is moving</summary>
            <param name="arg0_useSensors">If true, sensor information will be returned</param>
            <returns>a vector of boolean.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getJointIsMovingAsync(System.Boolean)">
            <summary>Gets if the joints is moving</summary>
            <param name="arg0_useSensors">If true, sensor information will be returned</param>
            <returns>a vector of boolean.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getChainIsMoving(System.Boolean)">
            <summary>Gets if the chain is moving</summary>
            <param name="arg0_useSensors">If true, sensor information will be returned</param>
            <returns>a vector of boolean.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getChainIsMovingAsync(System.Boolean)">
            <summary>Gets if the chain is moving</summary>
            <param name="arg0_useSensors">If true, sensor information will be returned</param>
            <returns>a vector of boolean.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setAnimationModeEnabled(System.Boolean)">
            <summary>In fact, it's an hide way to allow the fall manager to disable the fall manager. Note, it's inverse (true set fall to false)</summary>
            <param name="arg0_pEnable">Activate or disactivate the animation Mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setAnimationModeEnabledAsync(System.Boolean)">
            <summary>In fact, it's an hide way to allow the fall manager to disable the fall manager. Note, it's inverse (true set fall to false)</summary>
            <param name="arg0_pEnable">Activate or disactivate the animation Mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionConfig(System.String)">
            <summary>Get the motion configuration.</summary>
            <param name="arg0_pName">&quot;All&quot;, &quot;State&quot;, &quot;Mode&quot;, &quot;Protection&quot;, &quot;Collision&quot;, &quot;Basic&quot;, &quot;Move&quot;, &quot;Tracker&quot;, &quot;Walk&quot;, &quot;OmniWheel&quot;, &quot;Log&quot;, &quot;RobotState&quot;, &quot;Duration&quot;, &quot;Control&quot;, &quot;SmartStiffness&quot;,&quot;WB&quot;, &quot;FallManager&quot;.</param>
            <returns>string contraining all the information.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionConfigAsync(System.String)">
            <summary>Get the motion configuration.</summary>
            <param name="arg0_pName">&quot;All&quot;, &quot;State&quot;, &quot;Mode&quot;, &quot;Protection&quot;, &quot;Collision&quot;, &quot;Basic&quot;, &quot;Move&quot;, &quot;Tracker&quot;, &quot;Walk&quot;, &quot;OmniWheel&quot;, &quot;Log&quot;, &quot;RobotState&quot;, &quot;Duration&quot;, &quot;Control&quot;, &quot;SmartStiffness&quot;,&quot;WB&quot;, &quot;FallManager&quot;.</param>
            <returns>string contraining all the information.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getSupportPolygonCenter">
            <summary>Gets the center of the support polygon in frame robot.</summary>
            <returns>A vector containing the x,y coordinates of the center of the support polygon</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getSupportPolygonCenterAsync">
            <summary>Gets the center of the support polygon in frame robot.</summary>
            <returns>A vector containing the x,y coordinates of the center of the support polygon</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getComWorld">
            <summary>Gets the support polygon</summary>
            <returns>A Position3D (x,y,z) coordinates of com in World Space</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getComWorldAsync">
            <summary>Gets the support polygon</summary>
            <returns>A Position3D (x,y,z) coordinates of com in World Space</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getWorldRotation">
            <summary>Gets the support polygon</summary>
            <returns>A Rotation3D (wx,wy,0) coresponding to world rotation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getWorldRotationAsync">
            <summary>Gets the support polygon</summary>
            <returns>A Rotation3D (wx,wy,0) coresponding to world rotation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._fall(System.Single)">
            <summary>Activate the fall task</summary>
            <param name="arg0_pFallAngle">The fall angle in degree.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._fallAsync(System.Single)">
            <summary>Activate the fall task</summary>
            <param name="arg0_pFallAngle">The fall angle in degree.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._balanceRecovery">
            <summary>Activate the omniwheel task to recover balance.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._balanceRecoveryAsync">
            <summary>Activate the omniwheel task to recover balance.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._relaxMotorsWhenSitting">
            <summary>A patch to avoid to consume too much current after a SitDown.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._relaxMotorsWhenSittingAsync">
            <summary>A patch to avoid to consume too much current after a SitDown.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._relax(System.Object,System.Single)">
            <summary>Relax a chain.</summary>
            <param name="arg0_chainName">The name of the chain to relax.</param>
            <param name="arg1_delayInSeconds">The duration the low stiffness time.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._relaxAsync(System.Object,System.Single)">
            <summary>Relax a chain.</summary>
            <param name="arg0_chainName">The name of the chain to relax.</param>
            <param name="arg1_delayInSeconds">The duration the low stiffness time.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._resetCartesianUnfeasible">
            <summary>Reset to false the bool Cartesian Unfeasible: used for testing motion.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._resetCartesianUnfeasibleAsync">
            <summary>Reset to false the bool Cartesian Unfeasible: used for testing motion.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setCartesianUnfeasible">
            <summary>et to true the bool Cartesian Unfeasible: used for testing motion.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setCartesianUnfeasibleAsync">
            <summary>et to true the bool Cartesian Unfeasible: used for testing motion.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCartesianUnfeasible">
            <summary>Get the Cartesian Unfeasible state since last reset: used for testing motion.</summary>
            <returns>True if there are one cartesian unfeasible during one motion cycle since last reset.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getCartesianUnfeasibleAsync">
            <summary>Get the Cartesian Unfeasible state since last reset: used for testing motion.</summary>
            <returns>True if there are one cartesian unfeasible during one motion cycle since last reset.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._saveWholeBodyDump">
            <summary>Save current whole body dump</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._saveWholeBodyDumpAsync">
            <summary>Save current whole body dump</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._resetNumJointCommandDiscontinuities">
            <summary>Reset the number of joint command discontinuous updates.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._resetNumJointCommandDiscontinuitiesAsync">
            <summary>Reset the number of joint command discontinuous updates.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getNumJointCommandDiscontinuities">
            <summary>Get the number of joint command discontinuous updates since last reset.</summary>
            <returns>The number of discontinuities since last reset.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getNumJointCommandDiscontinuitiesAsync">
            <summary>Get the number of joint command discontinuous updates since last reset.</summary>
            <returns>The number of discontinuities since last reset.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._resetMotionCommandModelToSensors(System.Object)">
            <summary>Usefull function to resynchronize ALMotion and DCM In fact we set motion command model with sensors information</summary>
            <param name="arg0_pName">Names the joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._resetMotionCommandModelToSensorsAsync(System.Object)">
            <summary>Usefull function to resynchronize ALMotion and DCM In fact we set motion command model with sensors information</summary>
            <param name="arg0_pName">Names the joints, chains, &quot;Body&quot;, &quot;JointActuators&quot;, &quot;Joints&quot; or &quot;Actuators&quot;. </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setSimulationModeEnabled(System.Boolean)">
            <summary>Usefull function to change motion mode to simulation</summary>
            <param name="arg0_pEnable">Enable or Disable motion simulation mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._setSimulationModeEnabledAsync(System.Boolean)">
            <summary>Usefull function to change motion mode to simulation</summary>
            <param name="arg0_pEnable">Enable or Disable motion simulation mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionToDCM">
            <summary>Get motion to dcm commands</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getMotionToDCMAsync">
            <summary>Get motion to dcm commands</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getBlindZones">
            <summary>Get the blind zones convex polygon.</summary>
            <returns>the blind zones [[[x, y], ..., [x, y]]...]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._getBlindZonesAsync">
            <summary>Get the blind zones convex polygon.</summary>
            <returns>the blind zones [[[x, y], ..., [x, y]]...]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._freeze(System.String,System.Single)">
            <summary>Freeze chain movement.</summary>
            <param name="arg0_pChainName">Name of the chain to freeze.</param>
            <param name="arg1_pDuration">Freeze duration in seconds.</param>
            <returns>A cancellable future to unfreeze the chain.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMotion._freezeAsync(System.String,System.Single)">
            <summary>Freeze chain movement.</summary>
            <param name="arg0_pChainName">Name of the chain to freeze.</param>
            <param name="arg1_pDuration">Freeze duration in seconds.</param>
            <returns>A cancellable future to unfreeze the chain.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALNavigation">
            <summary>Use ALNavigation module to make the robot go safely to the asked pose2D.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALNavigation.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALNavigation.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALNavigation.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALNavigation.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.NavigateTo(System.Single,System.Single)">
            <summary>Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.NavigateToAsync(System.Single,System.Single)">
            <summary>Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.NavigateTo(System.Single,System.Single,System.Object)">
            <summary>Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_config">Configuration ALValue. For example, [[&quot;SpeedFactor&quot;, 0.5]] sets speedFactor to 0.5</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.NavigateToAsync(System.Single,System.Single,System.Object)">
            <summary>Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_config">Configuration ALValue. For example, [[&quot;SpeedFactor&quot;, 0.5]] sets speedFactor to 0.5</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.NavigateTo(System.Single,System.Single,System.Single)">
            <summary>Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">Orientation of the robot (rad).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.NavigateToAsync(System.Single,System.Single,System.Single)">
            <summary>Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">Orientation of the robot (rad).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.NavigateTo(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">Orientation of the robot (rad).</param>
            <param name="arg3_config">Configuration ALValue. For example, [[&quot;SpeedFactor&quot;, 0.5]] sets speedFactor to 0.5</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.NavigateToAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">Orientation of the robot (rad).</param>
            <param name="arg3_config">Configuration ALValue. For example, [[&quot;SpeedFactor&quot;, 0.5]] sets speedFactor to 0.5</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveTo(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given position.This is a blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The angle around z axis [rad].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveToAsync(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given position.This is a blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The angle around z axis [rad].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveTo(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given position.This is a blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The angle around z axis [rad].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveToAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given position.This is a blocking call.</summary>
            <param name="arg0_x">The position along x axis [m].</param>
            <param name="arg1_y">The position along y axis [m].</param>
            <param name="arg2_theta">The angle around z axis [rad].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Move(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given speed in S.I. units. This is a blocking call.</summary>
            <param name="arg0_x">The speed along x axis [m.s-1].</param>
            <param name="arg1_y">The speed along y axis [m.s-1].</param>
            <param name="arg2_theta">The anglular speed around z axis [rad.s-1].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveAsync(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given speed in S.I. units. This is a blocking call.</summary>
            <param name="arg0_x">The speed along x axis [m.s-1].</param>
            <param name="arg1_y">The speed along y axis [m.s-1].</param>
            <param name="arg2_theta">The anglular speed around z axis [rad.s-1].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.Move(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given speed in S.I. units. This is a blocking call.</summary>
            <param name="arg0_x">The speed along x axis [m.s-1].</param>
            <param name="arg1_y">The speed along y axis [m.s-1].</param>
            <param name="arg2_theta">The anglular speed around z axis [rad.s-1].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given speed in S.I. units. This is a blocking call.</summary>
            <param name="arg0_x">The speed along x axis [m.s-1].</param>
            <param name="arg1_y">The speed along y axis [m.s-1].</param>
            <param name="arg2_theta">The anglular speed around z axis [rad.s-1].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveToward(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given speed in normalized speed fraction. This is a blocking call.</summary>
            <param name="arg0_x">The speed along x axis [0.0-1.0].</param>
            <param name="arg1_y">The speed along y axis [0.0-1.0].</param>
            <param name="arg2_theta">The anglular speed around z axis [0.0-1.0].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveTowardAsync(System.Single,System.Single,System.Single)">
            <summary>Makes the robot move at the given speed in normalized speed fraction. This is a blocking call.</summary>
            <param name="arg0_x">The speed along x axis [0.0-1.0].</param>
            <param name="arg1_y">The speed along y axis [0.0-1.0].</param>
            <param name="arg2_theta">The anglular speed around z axis [0.0-1.0].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveToward(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given speed in normalized speed fraction. This is a blocking call.</summary>
            <param name="arg0_x">The speed along x axis [0.0-1.0].</param>
            <param name="arg1_y">The speed along y axis [0.0-1.0].</param>
            <param name="arg2_theta">The anglular speed around z axis [0.0-1.0].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveTowardAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Makes the robot move at the given speed in normalized speed fraction. This is a blocking call.</summary>
            <param name="arg0_x">The speed along x axis [0.0-1.0].</param>
            <param name="arg1_y">The speed along y axis [0.0-1.0].</param>
            <param name="arg2_theta">The anglular speed around z axis [0.0-1.0].</param>
            <param name="arg3_moveConfig">An ALValue with custom move configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setNavigationConfig(System.Object)">
            <summary>Internal Use.</summary>
            <param name="arg0_config">Internal: An array of ALValues [i][0]: name, [i][1]: value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setNavigationConfigAsync(System.Object)">
            <summary>Internal Use.</summary>
            <param name="arg0_config">Internal: An array of ALValues [i][0]: name, [i][1]: value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.SetSecurityDistance(System.Single)">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.SetSecurityDistanceAsync(System.Single)">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetSecurityDistance">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.GetSecurityDistanceAsync">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StopNavigateTo">
            <summary>Stops the navigateTo.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StopNavigateToAsync">
            <summary>Stops the navigateTo.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._stopNavigateToWithoutStopMove">
            <summary>Stops the navigateTo but no stop move.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._stopNavigateToWithoutStopMoveAsync">
            <summary>Stops the navigateTo but no stop move.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setTangentialSecurityDistance(System.Single)">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setTangentialSecurityDistanceAsync(System.Single)">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getTangentialSecurityDistance">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getTangentialSecurityDistanceAsync">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getNavigateToStatus">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getNavigateToStatusAsync">
            <summary>Distance in meters fromwhich the robot should stop if there is an obstacle.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getObstacleData">
            <summary>Obstacles data.ALArray formatted as follow for each ALValue : [0]:familyName[1]:name[2]:Array containing [x, y] arrays of points in robot frame.Those obstacles are the one used by the secure navigator</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getObstacleDataAsync">
            <summary>Obstacles data.ALArray formatted as follow for each ALValue : [0]:familyName[1]:name[2]:Array containing [x, y] arrays of points in robot frame.Those obstacles are the one used by the secure navigator</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getOccupancyGrid(System.String)">
            <summary>Get the requested occupancy grid formatted as a ROS navigation stack message.</summary>
            <param name="arg0_client">Internal: 'Secure' for SecureNavigator or 'Local' for LocalNavigator.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getOccupancyGridAsync(System.String)">
            <summary>Get the requested occupancy grid formatted as a ROS navigation stack message.</summary>
            <param name="arg0_client">Internal: 'Secure' for SecureNavigator or 'Local' for LocalNavigator.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorData">
            <summary>Obstacles data.ALArray formatted as follow for each ALValue : [0]:familyName[1]:name[2]:Array containing [x, y] arrays of points in robot frame.Those obstacles are taken from sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorDataAsync">
            <summary>Obstacles data.ALArray formatted as follow for each ALValue : [0]:familyName[1]:name[2]:Array containing [x, y] arrays of points in robot frame.Those obstacles are taken from sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorData(System.String)">
            <summary>Obstacles data.ALArray formatted as follow for each ALValue : [0]:familyName[1]:name[2]:Array containing [x, y] arrays of points in robot frame.Those obstacles are taken from sensors</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorDataAsync(System.String)">
            <summary>Obstacles data.ALArray formatted as follow for each ALValue : [0]:familyName[1]:name[2]:Array containing [x, y] arrays of points in robot frame.Those obstacles are taken from sensors</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Obstacles data.ALArray formatted as follow for each ALValue : [0]:familyName[1]:name[2]:Array containing [x, y] arrays of points in robot frame.Those obstacles are taken from sensors</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorDataAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Obstacles data.ALArray formatted as follow for each ALValue : [0]:familyName[1]:name[2]:Array containing [x, y] arrays of points in robot frame.Those obstacles are taken from sensors</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._subscribeToAll(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._subscribeToAllAsync(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._subscribe(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Start active sensors.The client needs to specify its name to register.If the client is the only one to register, the sensors are turned on, otherwise they are already started.</summary>
            <param name="arg0_clientName">The client name.</param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._subscribeAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Start active sensors.The client needs to specify its name to register.If the client is the only one to register, the sensors are turned on, otherwise they are already started.</summary>
            <param name="arg0_clientName">The client name.</param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._unsubscribeFromAll(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._unsubscribeFromAllAsync(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._unsubscribe(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Stop active sensors.The client needs to specify its name to unregister.The active sensors are actually stopped if not client is registered anymore.</summary>
            <param name="arg0_clientName">The client name.</param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._unsubscribeAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Stop active sensors.The client needs to specify its name to unregister.The active sensors are actually stopped if not client is registered anymore.</summary>
            <param name="arg0_clientName">The client name.</param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._addSensor(System.String)">
            <summary>Add a sensor family or a sensor.</summary>
            <param name="arg0_sensor">The sensor family name or name.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._addSensorAsync(System.String)">
            <summary>Add a sensor family or a sensor.</summary>
            <param name="arg0_sensor">The sensor family name or name.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._removeSensor(System.String)">
            <summary>Remove a sensor family or a sensor.</summary>
            <param name="arg0_sensor">The sensor family name or name.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._removeSensorAsync(System.String)">
            <summary>Remove a sensor family or a sensor.</summary>
            <param name="arg0_sensor">The sensor family name or name.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getTrajectory">
            <summary>Get trajectory from local navigator.ALArray containing successively x, y and theta coordinates.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getTrajectoryAsync">
            <summary>Get trajectory from local navigator.ALArray containing successively x, y and theta coordinates.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setSpeedFactor(System.Single)">
            <summary>Set speed factor for local navigator</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setSpeedFactorAsync(System.Single)">
            <summary>Set speed factor for local navigator</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getObstacleMap(System.String)">
            <summary>Get obstacle Map from localnavigator. ALValue formatted as follow for each sensor :[[SensorName1 [[x1 y1] [x2 y2] [x3 y3] ...]] [SensorName2 [[x1 y1] [x2 y2] [x3 y3] ...]] ... ]</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getObstacleMapAsync(System.String)">
            <summary>Get obstacle Map from localnavigator. ALValue formatted as follow for each sensor :[[SensorName1 [[x1 y1] [x2 y2] [x3 y3] ...]] [SensorName2 [[x1 y1] [x2 y2] [x3 y3] ...]] ... ]</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableSensorDebug(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableSensorDebugAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._useHeadChecking(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._useHeadCheckingAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._usePathChecking(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._usePathCheckingAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableSpeedFactor(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableSpeedFactorAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._clearObstacleMap">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._clearObstacleMapAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._useClearNavigationMap(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._useClearNavigationMapAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._clearNavigationMap">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._clearNavigationMapAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorSubscribers">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorSubscribersAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorList">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorListAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorListBySubscriber(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSensorListBySubscriberAsync(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getActiveSensorList">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getActiveSensorListAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._isSensorEnabled(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._isSensorEnabledAsync(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSecureNavSensors">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSecureNavSensorsAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableLogger(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableLoggerAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setController(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setControllerAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._writeTree">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._writeTreeAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveAlong(System.Object)">
            <summary>.</summary>
            <param name="arg0_trajectory">An ALValue describing a trajectory.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.MoveAlongAsync(System.Object)">
            <summary>.</summary>
            <param name="arg0_trajectory">An ALValue describing a trajectory.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._moveAlong(System.Single,System.Boolean,System.Object)">
            <summary>.</summary>
            <param name="arg0_moveAlongScale">a scale factor</param>
            <param name="arg1_allowMove">true if the robot should do any move at all</param>
            <param name="arg2_trajectory">An ALValue describing a trajectory.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._moveAlongAsync(System.Single,System.Boolean,System.Object)">
            <summary>.</summary>
            <param name="arg0_moveAlongScale">a scale factor</param>
            <param name="arg1_allowMove">true if the robot should do any move at all</param>
            <param name="arg2_trajectory">An ALValue describing a trajectory.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableSafety(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableSafetyAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._isSafetyEnabled">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._isSafetyEnabledAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._isSafetyLoopRunning">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._isSafetyLoopRunningAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._wakeUpCallBack">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._wakeUpCallBackAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._restCallBack(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._restCallBackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getFreeZoneCenter(System.Double)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getFreeZoneCenterAsync(System.Double)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getFreeZoneWithConstraints(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getFreeZoneWithConstraintsAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._updateFreeZone">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._updateFreeZoneAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StartFreeZoneUpdate">
            <summary> Starts a loop to update the mapping of the free space around the robot. </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StartFreeZoneUpdateAsync">
            <summary> Starts a loop to update the mapping of the free space around the robot. </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._startFreeZoneUpdateWithTimeout(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._startFreeZoneUpdateWithTimeoutAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StopAndComputeFreeZone(System.Single,System.Single)">
            <summary>Stops and returns free zone.</summary>
            <param name="arg0_desiredRadius">The radius of the space we want in meters [m].</param>
            <param name="arg1_maximumDisplacement">The max distance we accept to move toreach the found place [m].</param>
            <returns>Returns [errorCode, result radius (m), [worldMotionToRobotCenterX (m), worldMotionToRobotCenterY (m)]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.StopAndComputeFreeZoneAsync(System.Single,System.Single)">
            <summary>Stops and returns free zone.</summary>
            <param name="arg0_desiredRadius">The radius of the space we want in meters [m].</param>
            <param name="arg1_maximumDisplacement">The max distance we accept to move toreach the found place [m].</param>
            <returns>Returns [errorCode, result radius (m), [worldMotionToRobotCenterX (m), worldMotionToRobotCenterY (m)]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._writeFreeZone">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._writeFreeZoneAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._clearFreeZone">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._clearFreeZoneAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getFreeZoneMap">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getFreeZoneMapAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._computeFreeZone(System.Single,System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._computeFreeZoneAsync(System.Single,System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.FindFreeZone(System.Single,System.Single)">
            <summary>Returns [errorCode, result radius[centerWorldMotionX, centerWorldMotionY]]</summary>
            <param name="arg0_desiredRadius">The radius of the space we want in meters [m].</param>
            <param name="arg1_maximumDisplacement">The max distance we accept to move toreach the found place [m].</param>
            <returns>Returns [errorCode, result radius (m), [worldMotionToRobotCenterX (m), worldMotionToRobotCenterY (m)]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation.FindFreeZoneAsync(System.Single,System.Single)">
            <summary>Returns [errorCode, result radius[centerWorldMotionX, centerWorldMotionY]]</summary>
            <param name="arg0_desiredRadius">The radius of the space we want in meters [m].</param>
            <param name="arg1_maximumDisplacement">The max distance we accept to move toreach the found place [m].</param>
            <returns>Returns [errorCode, result radius (m), [worldMotionToRobotCenterX (m), worldMotionToRobotCenterY (m)]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._moveToFreeZoneCenter">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._moveToFreeZoneCenterAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._stopFreeZoneTasks">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._stopFreeZoneTasksAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._writeDilatedMaps">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._writeDilatedMapsAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._startDiagnosis(System.Collections.Generic.IEnumerable{System.String})">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._startDiagnosisAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._stopDiagnosis">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._stopDiagnosisAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._passiveDiagnosisCallBack(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._passiveDiagnosisCallBackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._activeDiagnosisCallBack(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._activeDiagnosisCallBackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setTimeChecking(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setTimeCheckingAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._onTouchChanged(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._onTouchChangedAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setSafetyMemoryTime(System.UInt32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setSafetyMemoryTimeAsync(System.UInt32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSafetyMemoryTime">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getSafetyMemoryTimeAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getCollisionObstacleDistance">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getCollisionObstacleDistanceAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setCollisionObstacleDistance(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setCollisionObstacleDistanceAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getCollisionObstacleRadius">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getCollisionObstacleRadiusAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setCollisionObstacleRadius(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setCollisionObstacleRadiusAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setBlindZoneSensorMode(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setBlindZoneSensorModeAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getBlindZoneSensorMode">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getBlindZoneSensorModeAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._get3DMap">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._get3DMapAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._eventMoveFailedCallback">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._eventMoveFailedCallbackAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setFreeZoneTimeout(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setFreeZoneTimeoutAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setFreeZoneThreshold(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setFreeZoneThresholdAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setObstaclesNumber(System.UInt32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setObstaclesNumberAsync(System.UInt32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getObstaclesNumber">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getObstaclesNumberAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableTouchType(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._enableTouchTypeAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._disableTouchType(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._disableTouchTypeAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getEnabledTouchTypes">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getEnabledTouchTypesAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setDataTooOldThresholdMs(System.UInt32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setDataTooOldThresholdMsAsync(System.UInt32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getDataTooOldThresholdMs">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._getDataTooOldThresholdMsAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setDiagnosisLogEnabled(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._setDiagnosisLogEnabledAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._isDiagnosisLogEnabled">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALNavigation._isDiagnosisLogEnabledAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALRecharge">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRecharge.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRecharge.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRecharge.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALRecharge.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GoToStation">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GoToStationAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.LeaveStation">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.LeaveStationAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetStationPosition">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetStationPositionAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.StopAll">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.StopAllAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Subscribe">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.SubscribeAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.Unsubscribe">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.UnsubscribeAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetStatus">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetStatusAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.LookForStation">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.LookForStationAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.MoveInFrontOfStation">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.MoveInFrontOfStationAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.DockOnStation">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.DockOnStationAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.SetUseTrackerSearcher(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.SetUseTrackerSearcherAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetUseTrackerSearcher">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetUseTrackerSearcherAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.SetMaxNumberOfTries(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.SetMaxNumberOfTriesAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetMaxNumberOfTries">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.GetMaxNumberOfTriesAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.AdjustDockingPosition(System.Object)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge.AdjustDockingPositionAsync(System.Object)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getConfidenceIndex">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getConfidenceIndexAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._allowTrackerNavigateTo(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._allowTrackerNavigateToAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalApproachDistance(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalApproachDistanceAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalApproachDistance">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalApproachDistanceAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalApproachYOffset(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalApproachYOffsetAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalApproachYOffset">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalApproachYOffsetAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalApproachThreshold(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalApproachThresholdAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalApproachThreshold">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalApproachThresholdAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setStationDetectionConfidenceThreshold(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setStationDetectionConfidenceThresholdAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getStationDetectionConfidenceThreshold">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getStationDetectionConfidenceThresholdAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._startLogging">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._startLoggingAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._stopLogging">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._stopLoggingAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalConnectionMoves">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalConnectionMovesAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalConnectionMoves(System.Object)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalConnectionMovesAsync(System.Object)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalConnectionMovesDelay(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setFinalConnectionMovesDelayAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalConnectionMovesDelay">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getFinalConnectionMovesDelayAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setEnableCheckDisconnectionTask(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._setEnableCheckDisconnectionTaskAsync(System.Boolean)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getEnableCheckDisconnectionTask">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._getEnableCheckDisconnectionTaskAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._updateStationDetection(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._updateStationDetectionAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventTrackerSearcherLoopCallback">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventTrackerSearcherLoopCallbackAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventTrackerTargetReachedCallback">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventTrackerTargetReachedCallbackAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventTrackerTargetLostCallback">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventTrackerTargetLostCallbackAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventTrackerActiveTargetChangedCallback(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventTrackerActiveTargetChangedCallbackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventMoveFailedCallback(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventMoveFailedCallbackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventBatteryConnectedToChargingStationCallback(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventBatteryConnectedToChargingStationCallbackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventNavigationStatusChangedCallback(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventNavigationStatusChangedCallbackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventSlopeDetectedChangedCallback(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRecharge._eventSlopeDetectedChangedCallbackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALRobotPosture">
            <summary>Use ALRobotPosture module to make the robot go tothe asked posture.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRobotPosture.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRobotPosture.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRobotPosture.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALRobotPosture.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetPostureFamily">
            <summary>Returns the posture family for example Standing, LyingBelly,...</summary>
            <returns>Returns the posture family, e.g. Standing.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetPostureFamilyAsync">
            <summary>Returns the posture family for example Standing, LyingBelly,...</summary>
            <returns>Returns the posture family, e.g. Standing.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GoToPosture(System.String,System.Single)">
            <summary>Make the robot go to the choosenposture.</summary>
            <param name="arg0_postureName">Name of the desired posture. Use getPostureList to get the list of posture name available.</param>
            <param name="arg1_maxSpeedFraction">A fraction.</param>
            <returns>Returns if the posture was reached or not.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GoToPostureAsync(System.String,System.Single)">
            <summary>Make the robot go to the choosenposture.</summary>
            <param name="arg0_postureName">Name of the desired posture. Use getPostureList to get the list of posture name available.</param>
            <param name="arg1_maxSpeedFraction">A fraction.</param>
            <returns>Returns if the posture was reached or not.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.ApplyPosture(System.String,System.Single)">
            <summary>Set the angle of the joints of the  robot to the choosen posture.</summary>
            <param name="arg0_postureName">Name of the desired posture. Use getPostureList to get the list of posture name available.</param>
            <param name="arg1_maxSpeedFraction">A fraction.</param>
            <returns>Returns if the posture was reached or not.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.ApplyPostureAsync(System.String,System.Single)">
            <summary>Set the angle of the joints of the  robot to the choosen posture.</summary>
            <param name="arg0_postureName">Name of the desired posture. Use getPostureList to get the list of posture name available.</param>
            <param name="arg1_maxSpeedFraction">A fraction.</param>
            <returns>Returns if the posture was reached or not.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.StopMove">
            <summary>Stop the posture move.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.StopMoveAsync">
            <summary>Stop the posture move.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetPostureList">
            <summary>Get the list of posture names available.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetPostureListAsync">
            <summary>Get the list of posture names available.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetPostureFamilyList">
            <summary>Get the list of posture family names available.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetPostureFamilyListAsync">
            <summary>Get the list of posture family names available.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.SetMaxTryNumber(System.Int32)">
            <summary>Set maximum of tries ongoToPosture fail.</summary>
            <param name="arg0_pMaxTryNumber">Number of retry if goToPosture fail.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.SetMaxTryNumberAsync(System.Int32)">
            <summary>Set maximum of tries ongoToPosture fail.</summary>
            <param name="arg0_pMaxTryNumber">Number of retry if goToPosture fail.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetPosture">
            <summary>Determine posture.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture.GetPostureAsync">
            <summary>Determine posture.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._isRobotInPosture(System.String,System.Single,System.Single)">
            <summary>Articular distance</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._isRobotInPostureAsync(System.String,System.Single,System.Single)">
            <summary>Articular distance</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._isRobotInPostureId(System.Int32,System.Single,System.Single)">
            <summary>Articular distance</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._isRobotInPostureIdAsync(System.Int32,System.Single,System.Single)">
            <summary>Articular distance</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getPosture">
            <summary>Determine posture id.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getPostureAsync">
            <summary>Determine posture id.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setPostureId(System.Int32,System.Single)">
            <summary>Set the angle of the joints.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setPostureIdAsync(System.Int32,System.Single)">
            <summary>Set the angle of the joints.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._goToPostureId(System.Int32,System.Single)">
            <summary>Set the angle of thejoints and of the inertial unit</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._goToPostureIdAsync(System.Int32,System.Single)">
            <summary>Set the angle of thejoints and of the inertial unit</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._namePosture(System.Int32,System.String)">
            <summary>Name posture from id.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._namePostureAsync(System.Int32,System.String)">
            <summary>Name posture from id.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._renamePosture(System.String,System.String)">
            <summary>Rename posture from name.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._renamePostureAsync(System.String,System.String)">
            <summary>Rename posture from name.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._resavePosture(System.Int32)">
            <summary>Resave posture joints, inertial, family. Keep neighbours.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._resavePostureAsync(System.Int32)">
            <summary>Resave posture joints, inertial, family. Keep neighbours.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setSlowFactor(System.Int32,System.Int32,System.Single)">
            <summary>Set slow factorbetween two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setSlowFactorAsync(System.Int32,System.Int32,System.Single)">
            <summary>Set slow factorbetween two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setAntiCollision(System.Int32,System.Boolean)">
            <summary>Set anti collisionbetween two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setAntiCollisionAsync(System.Int32,System.Boolean)">
            <summary>Set anti collisionbetween two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setUseAntiCollision(System.Boolean)">
            <summary>Enables/Disables anti collision management by RobotPosture.</summary>
            <param name="arg0_enable">A bool that enable anticollision management.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setUseAntiCollisionAsync(System.Boolean)">
            <summary>Enables/Disables anti collision management by RobotPosture.</summary>
            <param name="arg0_enable">A bool that enable anticollision management.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setUseAutoBalance(System.Boolean)">
            <summary>Enables/Disables auto balance management by RobotPosture.</summary>
            <param name="arg0_enable">A bool that enable auto balance management.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setUseAutoBalanceAsync(System.Boolean)">
            <summary>Enables/Disables auto balance management by RobotPosture.</summary>
            <param name="arg0_enable">A bool that enable auto balance management.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setCost(System.Int32,System.Single)">
            <summary>Set cost between two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._setCostAsync(System.Int32,System.Single)">
            <summary>Set cost between two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._saveCurrentPosture(System.Int32)">
            <summary>Save current posture.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._saveCurrentPostureAsync(System.Int32)">
            <summary>Save current posture.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._saveCurrentPostureWithName(System.Int32,System.String)">
            <summary>Save with a namecurrent posture.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._saveCurrentPostureWithNameAsync(System.Int32,System.String)">
            <summary>Save with a namecurrent posture.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._applyPostures(System.Collections.Generic.IEnumerable{System.Int32},System.Single,System.Boolean,System.Boolean)">
            <summary>Apply postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._applyPosturesAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Single,System.Boolean,System.Boolean)">
            <summary>Apply postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._eraseAllPostures">
            <summary>Erase all postures.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._eraseAllPosturesAsync">
            <summary>Erase all postures.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._bindPostures(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>Bind two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._bindPosturesAsync(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>Bind two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._addNeighbourToPosture(System.Int32,System.Int32,System.Single)">
            <summary>Add a neighbour to a postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._addNeighbourToPostureAsync(System.Int32,System.Int32,System.Single)">
            <summary>Add a neighbour to a postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._removeNeighbourFromPosture(System.Int32,System.Int32)">
            <summary>Remove a neighbour from postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._removeNeighbourFromPostureAsync(System.Int32,System.Int32)">
            <summary>Remove a neighbour from postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._unBindPostures(System.Int32,System.Int32)">
            <summary>Unbind two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._unBindPosturesAsync(System.Int32,System.Int32)">
            <summary>Unbind two postures.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._erasePosture(System.Int32)">
            <summary>Erase the posture and unBind theneighbours.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._erasePostureAsync(System.Int32)">
            <summary>Erase the posture and unBind theneighbours.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getLibrarySize">
            <summary>Get library size.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getLibrarySizeAsync">
            <summary>Get library size.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._loadPostureLibraryFromName(System.String)">
            <summary>Load a new library file.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._loadPostureLibraryFromNameAsync(System.String)">
            <summary>Load a new library file.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getCurrentPath">
            <summary>Get current graph path.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getCurrentPathAsync">
            <summary>Get current graph path.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._isStandCallBack(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._isStandCallBackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._savePostureLibrary(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._savePostureLibraryAsync(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getArticularDistanceToPosture(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getArticularDistanceToPostureAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getCartesianDistanceToPosture(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getCartesianDistanceToPostureAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getCartesianDistanceVector(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getCartesianDistanceVectorAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getPostureIdList">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getPostureIdListAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._isReachable(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._isReachableAsync(System.Int32)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._generateCartesianMap">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._generateCartesianMapAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getPostureZ(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getPostureZAsync(System.Single)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getPostureNoZ">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getPostureNoZAsync">
            <summary>.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getIdFromName(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._getIdFromNameAsync(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._activeDiagnosisCallBack(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._activeDiagnosisCallBackAsync(System.String,System.Object,System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._eraseFamily(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRobotPosture._eraseFamilyAsync(System.String)">
            <summary>.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALTracker">
            <summary>Use ALTracker module to make the robot track an object or a person with head and arms or not.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTracker.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTracker.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTracker.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALTracker.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTargetPosition(System.Int32)">
            <summary>Returns the [x, y, z] position of the target in FRAME_TORSO. This is done assuming an average target size, so it might not be very accurate.</summary>
            <param name="arg0_pFrame">target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <returns>Vector of 3 floats corresponding to the target position 3D. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTargetPositionAsync(System.Int32)">
            <summary>Returns the [x, y, z] position of the target in FRAME_TORSO. This is done assuming an average target size, so it might not be very accurate.</summary>
            <param name="arg0_pFrame">target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <returns>Vector of 3 floats corresponding to the target position 3D. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetRobotPosition">
            <summary>Only work with LandMarks target name. Returns the [x, y, z, wx, wy, wz] position of the robot in coordinate system setted with setMap API. This is done assuming an average target size, so it might not be very accurate.</summary>
            <returns>Vector of 6 floats corresponding to the robot position 6D.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetRobotPositionAsync">
            <summary>Only work with LandMarks target name. Returns the [x, y, z, wx, wy, wz] position of the robot in coordinate system setted with setMap API. This is done assuming an average target size, so it might not be very accurate.</summary>
            <returns>Vector of 6 floats corresponding to the robot position 6D.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsActive">
            <summary>Return true if Tracker is running.</summary>
            <returns>True if Tracker is running.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsActiveAsync">
            <summary>Return true if Tracker is running.</summary>
            <returns>True if Tracker is running.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsNewTargetDetected">
            <summary>Return true if a new target was detected.</summary>
            <returns>True if a new target was detected since the last getTargetPosition().</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsNewTargetDetectedAsync">
            <summary>Return true if a new target was detected.</summary>
            <returns>True if a new target was detected since the last getTargetPosition().</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetRelativePosition(System.Object)">
            <summary>Set the robot position relative to target in Move mode.</summary>
            <param name="arg0_target">Set the final goal of the tracking. Could be [distance, thresholdX, thresholdY] or with LandMarks target name [coordX, coordY, coordWz, thresholdX, thresholdY, thresholdWz].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetRelativePositionAsync(System.Object)">
            <summary>Set the robot position relative to target in Move mode.</summary>
            <param name="arg0_target">Set the final goal of the tracking. Could be [distance, thresholdX, thresholdY] or with LandMarks target name [coordX, coordY, coordWz, thresholdX, thresholdY, thresholdWz].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetRelativePosition">
            <summary>Get the robot position relative to target in Move mode.</summary>
            <returns>The final goal of the tracking. Could be [distance, thresholdX, thresholdY] or with LandMarks target name [coordX, coordY, coordWz, thresholdX, thresholdY, thresholdWz].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetRelativePositionAsync">
            <summary>Get the robot position relative to target in Move mode.</summary>
            <returns>The final goal of the tracking. Could be [distance, thresholdX, thresholdY] or with LandMarks target name [coordX, coordY, coordWz, thresholdX, thresholdY, thresholdWz].</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetTargetCoordinates(System.Object)">
            <summary>Only work with LandMarks target name. Set objects coordinates. Could be [[first object coordinate], [second object coordinate]] [[x1, y1, z1], [x2, y2, z2]]</summary>
            <param name="arg0_pCoord">objects coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetTargetCoordinatesAsync(System.Object)">
            <summary>Only work with LandMarks target name. Set objects coordinates. Could be [[first object coordinate], [second object coordinate]] [[x1, y1, z1], [x2, y2, z2]]</summary>
            <param name="arg0_pCoord">objects coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTargetCoordinates">
            <summary>Only work with LandMarks target name. Get objects coordinates. Could be [[first object coordinate], [second object coordinate]] [[x1, y1, z1], [x2, y2, z2]]</summary>
            <returns>objects coordinates.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTargetCoordinatesAsync">
            <summary>Only work with LandMarks target name. Get objects coordinates. Could be [[first object coordinate], [second object coordinate]] [[x1, y1, z1], [x2, y2, z2]]</summary>
            <returns>objects coordinates.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMode(System.String)">
            <summary>Set the tracker in the predefined mode.Could be &quot;Head&quot;, &quot;WholeBody&quot; or &quot;Move&quot;.</summary>
            <param name="arg0_pMode">a predefined mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetModeAsync(System.String)">
            <summary>Set the tracker in the predefined mode.Could be &quot;Head&quot;, &quot;WholeBody&quot; or &quot;Move&quot;.</summary>
            <param name="arg0_pMode">a predefined mode.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMode">
            <summary>Get the tracker current mode.</summary>
            <returns>The current tracker mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetModeAsync">
            <summary>Get the tracker current mode.</summary>
            <returns>The current tracker mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetAvailableModes">
            <summary>Get the list of predefined mode.</summary>
            <returns>List of predefined mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetAvailableModesAsync">
            <summary>Get the list of predefined mode.</summary>
            <returns>List of predefined mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.ToggleSearch(System.Boolean)">
            <summary>Enables/disables the target search process. Target search process occurs only when the target is lost.</summary>
            <param name="arg0_pSearch">If true and if the target is lost, the robot moves the head in order to find the target. If false and if the target is lost the robot does not move.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.ToggleSearchAsync(System.Boolean)">
            <summary>Enables/disables the target search process. Target search process occurs only when the target is lost.</summary>
            <param name="arg0_pSearch">If true and if the target is lost, the robot moves the head in order to find the target. If false and if the target is lost the robot does not move.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetSearchFractionMaxSpeed(System.Single)">
            <summary>Set search process fraction max speed.</summary>
            <param name="arg0_pFractionMaxSpeed">a fraction max speed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetSearchFractionMaxSpeedAsync(System.Single)">
            <summary>Set search process fraction max speed.</summary>
            <param name="arg0_pFractionMaxSpeed">a fraction max speed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetSearchFractionMaxSpeed">
            <summary>Get search process fraction max speed.</summary>
            <returns>a fraction max speed.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetSearchFractionMaxSpeedAsync">
            <summary>Get search process fraction max speed.</summary>
            <returns>a fraction max speed.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsSearchEnabled">
            <summary>Return true if the target search process is enabled.</summary>
            <returns>If true the target search process is enabled.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsSearchEnabledAsync">
            <summary>Return true if the target search process is enabled.</summary>
            <returns>If true the target search process is enabled.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.StopTracker">
            <summary>Stop the tracker.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.StopTrackerAsync">
            <summary>Stop the tracker.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsTargetLost">
            <summary>Return true if the target was lost.</summary>
            <returns>True if the target was lost.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.IsTargetLostAsync">
            <summary>Return true if the target was lost.</summary>
            <returns>True if the target was lost.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Track(System.String)">
            <summary>Set the predefided target to track and start the tracking process if not started.</summary>
            <param name="arg0_pTarget">a predefined target to track.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.TrackAsync(System.String)">
            <summary>Set the predefided target to track and start the tracking process if not started.</summary>
            <param name="arg0_pTarget">a predefined target to track.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.TrackEvent(System.String)">
            <summary>Track event and start the tracking process if not started.</summary>
            <param name="arg0_pEventName">a event name to track.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.TrackEventAsync(System.String)">
            <summary>Track event and start the tracking process if not started.</summary>
            <param name="arg0_pEventName">a event name to track.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RegisterTarget(System.String,System.Object)">
            <summary>Register a predefined target. Subscribe to corresponding extractor if Tracker is running..</summary>
            <param name="arg0_pTarget">a predefined target to track.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <param name="arg1_pParams">a target parameters. (RedBall : set diameter of ball.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RegisterTargetAsync(System.String,System.Object)">
            <summary>Register a predefined target. Subscribe to corresponding extractor if Tracker is running..</summary>
            <param name="arg0_pTarget">a predefined target to track.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <param name="arg1_pParams">a target parameters. (RedBall : set diameter of ball.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetExtractorPeriod(System.String,System.Int32)">
            <summary>Set a period for the corresponding target name extractor.</summary>
            <param name="arg0_pTarget">a predefined target name.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <param name="arg1_pPeriod">a period in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetExtractorPeriodAsync(System.String,System.Int32)">
            <summary>Set a period for the corresponding target name extractor.</summary>
            <param name="arg0_pTarget">a predefined target name.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <param name="arg1_pPeriod">a period in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetExtractorPeriod(System.String)">
            <summary>Get the period of corresponding target name extractor.</summary>
            <param name="arg0_pTarget">a predefined target name.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns>a period in milliseconds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetExtractorPeriodAsync(System.String)">
            <summary>Get the period of corresponding target name extractor.</summary>
            <param name="arg0_pTarget">a predefined target name.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns>a period in milliseconds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.UnregisterTarget(System.String)">
            <summary>Unregister target name and stop corresponding extractor.</summary>
            <param name="arg0_pTarget">a predefined target to remove.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.UnregisterTargetAsync(System.String)">
            <summary>Unregister target name and stop corresponding extractor.</summary>
            <param name="arg0_pTarget">a predefined target to remove.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.UnregisterTargets(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Unregister a list of target names and stop corresponding extractor.</summary>
            <param name="arg0_pTarget">a predefined target list to remove.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.UnregisterTargetsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Unregister a list of target names and stop corresponding extractor.</summary>
            <param name="arg0_pTarget">a predefined target list to remove.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.UnregisterAllTargets">
            <summary>Unregister all targets except active target and stop corresponding extractor.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.UnregisterAllTargetsAsync">
            <summary>Unregister all targets except active target and stop corresponding extractor.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetActiveTarget">
            <summary>Return active target name.</summary>
            <returns>Tracked target name.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetActiveTargetAsync">
            <summary>Return active target name.</summary>
            <returns>Tracked target name.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetSupportedTargets">
            <summary>Return a list of supported targets names.</summary>
            <returns>Supported targets names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetSupportedTargetsAsync">
            <summary>Return a list of supported targets names.</summary>
            <returns>Supported targets names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetRegisteredTargets">
            <summary>Return a list of registered targets names.</summary>
            <returns>Registered targets names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetRegisteredTargetsAsync">
            <summary>Return a list of registered targets names.</summary>
            <returns>Registered targets names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.LookAt(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Single,System.Boolean)">
            <summary>Look at the target position with head.</summary>
            <param name="arg0_pPosition">position 3D [x, y, z] x position must be striclty positif.</param>
            <param name="arg1_pFrame">target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <param name="arg3_pUseWholeBody">If true, use whole body constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.LookAtAsync(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Single,System.Boolean)">
            <summary>Look at the target position with head.</summary>
            <param name="arg0_pPosition">position 3D [x, y, z] x position must be striclty positif.</param>
            <param name="arg1_pFrame">target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <param name="arg3_pUseWholeBody">If true, use whole body constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PointAt(System.String,System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Single)">
            <summary>Point at the target position with arms.</summary>
            <param name="arg0_pEffector">effector name. Could be &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;.</param>
            <param name="arg1_pPosition">position 3D [x, y, z] to point in FRAME_TORSO. x position must be striclty positif.</param>
            <param name="arg2_pFrame">target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg3_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PointAtAsync(System.String,System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Single)">
            <summary>Point at the target position with arms.</summary>
            <param name="arg0_pEffector">effector name. Could be &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;.</param>
            <param name="arg1_pPosition">position 3D [x, y, z] to point in FRAME_TORSO. x position must be striclty positif.</param>
            <param name="arg2_pFrame">target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg3_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMoveConfig">
            <summary>Get the config for move modes.</summary>
            <returns>ALMotion GaitConfig</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMoveConfigAsync">
            <summary>Get the config for move modes.</summary>
            <returns>ALMotion GaitConfig</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMoveConfig(System.Object)">
            <summary>set a config for move modes.</summary>
            <param name="arg0_config">ALMotion GaitConfig</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMoveConfigAsync(System.Object)">
            <summary>set a config for move modes.</summary>
            <param name="arg0_config">ALMotion GaitConfig</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTimeOut">
            <summary>get the timeout parameter for target lost.</summary>
            <returns>time in milliseconds.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTimeOutAsync">
            <summary>get the timeout parameter for target lost.</summary>
            <returns>time in milliseconds.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetTimeOut(System.Int32)">
            <summary>set the timeout parameter for target lost.</summary>
            <param name="arg0_pTimeMs">time in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetTimeOutAsync(System.Int32)">
            <summary>set the timeout parameter for target lost.</summary>
            <param name="arg0_pTimeMs">time in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMaximumDistanceDetection">
            <summary>get the maximum distance for target detection in meter.</summary>
            <returns>The maximum distance for target detection in meter.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMaximumDistanceDetectionAsync">
            <summary>get the maximum distance for target detection in meter.</summary>
            <returns>The maximum distance for target detection in meter.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMaximumDistanceDetection(System.Single)">
            <summary>set the maximum target detection distance in meter.</summary>
            <param name="arg0_pMaxDistance">The maximum distance for target detection in meter.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMaximumDistanceDetectionAsync(System.Single)">
            <summary>set the maximum target detection distance in meter.</summary>
            <param name="arg0_pMaxDistance">The maximum distance for target detection in meter.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetEffector">
            <summary>Get active effector.</summary>
            <returns>Active effector name. Could be: &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot; or &quot;None&quot;. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetEffectorAsync">
            <summary>Get active effector.</summary>
            <returns>Active effector name. Could be: &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot; or &quot;None&quot;. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetEffector(System.String)">
            <summary>Set an end-effector to move for tracking.</summary>
            <param name="arg0_pEffector">Name of effector. Could be: &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot; or &quot;None&quot;. </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetEffectorAsync(System.String)">
            <summary>Set an end-effector to move for tracking.</summary>
            <param name="arg0_pEffector">Name of effector. Could be: &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot; or &quot;None&quot;. </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.Initialize">
            <summary>Initialize tracker parameters with default values.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.InitializeAsync">
            <summary>Initialize tracker parameters with default values.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMaximumVelocity(System.Single)">
            <summary>Set the maximum velocity for tracking.</summary>
            <param name="arg0_pVelocity">The maximum velocity in rad.s-1 .</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMaximumVelocityAsync(System.Single)">
            <summary>Set the maximum velocity for tracking.</summary>
            <param name="arg0_pVelocity">The maximum velocity in rad.s-1 .</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMaximumVelocity">
            <summary>Get the maximum velocity for tracking.</summary>
            <returns>The maximum velocity in rad.s-1 .</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMaximumVelocityAsync">
            <summary>Get the maximum velocity for tracking.</summary>
            <returns>The maximum velocity in rad.s-1 .</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMaximumAcceleration(System.Single)">
            <summary>Set the maximum acceleration for tracking.</summary>
            <param name="arg0_pAcceleration">The maximum acceleration in rad.s-2 .</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.SetMaximumAccelerationAsync(System.Single)">
            <summary>Set the maximum acceleration for tracking.</summary>
            <param name="arg0_pAcceleration">The maximum acceleration in rad.s-2 .</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMaximumAcceleration">
            <summary>Get the maximum acceleration for tracking.</summary>
            <returns>The maximum acceleration in rad.s-2 .</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetMaximumAccelerationAsync">
            <summary>Get the maximum acceleration for tracking.</summary>
            <returns>The maximum acceleration in rad.s-2 .</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.LookAt(System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Boolean)">
            <summary>DEPRECATED. Use lookAt with frame instead. Look at the target position with head.</summary>
            <param name="arg0_pPosition">position 3D [x, y, z] to look in FRAME_TORSO. x position must be striclty positif.</param>
            <param name="arg1_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <param name="arg2_pUseWholeBody">If true, use whole body constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.LookAtAsync(System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Boolean)">
            <summary>DEPRECATED. Use lookAt with frame instead. Look at the target position with head.</summary>
            <param name="arg0_pPosition">position 3D [x, y, z] to look in FRAME_TORSO. x position must be striclty positif.</param>
            <param name="arg1_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <param name="arg2_pUseWholeBody">If true, use whole body constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PointAt(System.String,System.Collections.Generic.IEnumerable{System.Single},System.Single)">
            <summary>DEPRECATED. Use pointAt with frame instead. Point at the target position with arms.</summary>
            <param name="arg0_pEffector">effector name. Could be &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;.</param>
            <param name="arg1_pPosition">position 3D [x, y, z] to point in FRAME_TORSO. x position must be striclty positif.</param>
            <param name="arg2_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.PointAtAsync(System.String,System.Collections.Generic.IEnumerable{System.Single},System.Single)">
            <summary>DEPRECATED. Use pointAt with frame instead. Point at the target position with arms.</summary>
            <param name="arg0_pEffector">effector name. Could be &quot;Arms&quot;, &quot;LArm&quot;, &quot;RArm&quot;.</param>
            <param name="arg1_pPosition">position 3D [x, y, z] to point in FRAME_TORSO. x position must be striclty positif.</param>
            <param name="arg2_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTargetPosition">
            <summary>DEPRECATED. Use pointAt with frame instead. Returns the [x, y, z] position of the target in FRAME_TORSO. This is done assuming an average target size, so it might not be very accurate.</summary>
            <returns>Vector of 3 floats corresponding to the target position 3D. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTargetPositionAsync">
            <summary>DEPRECATED. Use pointAt with frame instead. Returns the [x, y, z] position of the target in FRAME_TORSO. This is done assuming an average target size, so it might not be very accurate.</summary>
            <returns>Vector of 3 floats corresponding to the target position 3D. </returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTargetNames">
            <summary>DEPRECATED. Use getSupportedTargets() instead. Return a list of targets names.</summary>
            <returns>Valid targets names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetTargetNamesAsync">
            <summary>DEPRECATED. Use getSupportedTargets() instead. Return a list of targets names.</summary>
            <returns>Valid targets names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetManagedTargets">
            <summary>DEPRECATED. Use getRegisteredTargets() instead. Return a list of managed targets names.</summary>
            <returns>Managed targets names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.GetManagedTargetsAsync">
            <summary>DEPRECATED. Use getRegisteredTargets() instead. Return a list of managed targets names.</summary>
            <returns>Managed targets names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.AddTarget(System.String,System.Object)">
            <summary>DEPRECATED. Use registerTarget() instead. Add a predefined target. Subscribe to corresponding extractor if Tracker is running..</summary>
            <param name="arg0_pTarget">a predefined target to track.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <param name="arg1_pParams">a target parameters. (RedBall : set diameter of ball.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.AddTargetAsync(System.String,System.Object)">
            <summary>DEPRECATED. Use registerTarget() instead. Add a predefined target. Subscribe to corresponding extractor if Tracker is running..</summary>
            <param name="arg0_pTarget">a predefined target to track.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <param name="arg1_pParams">a target parameters. (RedBall : set diameter of ball.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RemoveTarget(System.String)">
            <summary>DEPRECATED. Use unregisterTarget() instead. Remove target name and stop corresponding extractor.</summary>
            <param name="arg0_pTarget">a predefined target to remove.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RemoveTargetAsync(System.String)">
            <summary>DEPRECATED. Use unregisterTarget() instead. Remove target name and stop corresponding extractor.</summary>
            <param name="arg0_pTarget">a predefined target to remove.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RemoveTargets(System.Collections.Generic.IEnumerable{System.String})">
            <summary>DEPRECATED. Use unregisterTargets() instead. Remove a list of target names and stop corresponding extractor.</summary>
            <param name="arg0_pTarget">a predefined target list to remove.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RemoveTargetsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>DEPRECATED. Use unregisterTargets() instead. Remove a list of target names and stop corresponding extractor.</summary>
            <param name="arg0_pTarget">a predefined target list to remove.Could be &quot;RedBall&quot;, &quot;Face&quot;, &quot;LandMark&quot;, &quot;LandMarks&quot;, &quot;People&quot; or &quot;Sound&quot;.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RemoveAllTargets">
            <summary>DEPRECATED. Use unregisterAllTargets() instead. Remove all managed targets except active target and stop corresponding extractor.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RemoveAllTargetsAsync">
            <summary>DEPRECATED. Use unregisterAllTargets() instead. Remove all managed targets except active target and stop corresponding extractor.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.AddEffector(System.String)">
            <summary>DEPRECATED. Use setEffector instead. Add an end-effector to move for tracking.</summary>
            <param name="arg0_pEffector">Name of effector. Could be: &quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;. </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.AddEffectorAsync(System.String)">
            <summary>DEPRECATED. Use setEffector instead. Add an end-effector to move for tracking.</summary>
            <param name="arg0_pEffector">Name of effector. Could be: &quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;. </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RemoveEffector(System.String)">
            <summary>DEPRECATED. Use setEffector(&quot;None&quot;) instead. Remove an end-effector from tracking.</summary>
            <param name="arg0_pEffector">Name of effector. Could be: &quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;. </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker.RemoveEffectorAsync(System.String)">
            <summary>DEPRECATED. Use setEffector(&quot;None&quot;) instead. Remove an end-effector from tracking.</summary>
            <param name="arg0_pEffector">Name of effector. Could be: &quot;Arms&quot;, &quot;LArm&quot; or &quot;RArm&quot;. </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._pause">
            <summary>Pause the tracking process.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._pauseAsync">
            <summary>Pause the tracking process.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._restart">
            <summary>Restart the tracking process.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._restartAsync">
            <summary>Restart the tracking process.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._setTrackerConfig(System.Object)">
            <summary>Internal Use.</summary>
            <param name="arg0_config">Internal: An array of ALValues [i][0]: name, [i][1]: value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._setTrackerConfigAsync(System.Object)">
            <summary>Internal Use.</summary>
            <param name="arg0_config">Internal: An array of ALValues [i][0]: name, [i][1]: value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._getTrackerConfig">
            <summary>Get the tracker configuration.</summary>
            <returns>map contraining all the information.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._getTrackerConfigAsync">
            <summary>Get the tracker configuration.</summary>
            <returns>map contraining all the information.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._getTrackerConfigStr">
            <summary>Get the tracker configuration.</summary>
            <returns>string contraining all the information.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._getTrackerConfigStrAsync">
            <summary>Get the tracker configuration.</summary>
            <returns>string contraining all the information.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._lostEvent">
            <summary>Lost event callback.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._lostEventAsync">
            <summary>Lost event callback.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._detectedEvent(System.String,System.Object)">
            <summary>Detected event callback.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._detectedEventAsync(System.String,System.Object)">
            <summary>Detected event callback.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._setDebugInView3D(System.Boolean)">
            <summary>Active debug in choregraphe 3D view.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._setDebugInView3DAsync(System.Boolean)">
            <summary>Active debug in choregraphe 3D view.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._debugCallbackEvent(System.String,System.Object)">
            <summary>debug event callback.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._debugCallbackEventAsync(System.String,System.Object)">
            <summary>debug event callback.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._lookAtWithMove(System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Boolean,System.Boolean)">
            <summary>Look at the target position with head.</summary>
            <param name="arg0_pPosition">position 3D [x, y, z] to look in FRAME_TORSO.x position must be striclty positif.</param>
            <param name="arg1_pFractionMaxSpeed">The fraction of maximum speed to use.Must be between 0 and 1.</param>
            <param name="arg2_pUseWholeBody">If true, use whole body constraints.</param>
            <param name="arg3_pUseMove">If true, use move to look at target behind.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._lookAtWithMoveAsync(System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Boolean,System.Boolean)">
            <summary>Look at the target position with head.</summary>
            <param name="arg0_pPosition">position 3D [x, y, z] to look in FRAME_TORSO.x position must be striclty positif.</param>
            <param name="arg1_pFractionMaxSpeed">The fraction of maximum speed to use.Must be between 0 and 1.</param>
            <param name="arg2_pUseWholeBody">If true, use whole body constraints.</param>
            <param name="arg3_pUseMove">If true, use move to look at target behind.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._lookAtWithEffector(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>Look at the target position with head.</summary>
            <param name="arg0_pPosition">position 3D [x, y, z] x position must be striclty positif.</param>
            <param name="arg1_pFrame">target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pEffectorId">effector id {Middle of eyes = 0, Camera Top = 1, Camera Bottom = 2}.</param>
            <param name="arg3_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <param name="arg4_pUseWholeBody">If true, use whole body constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._lookAtWithEffectorAsync(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>Look at the target position with head.</summary>
            <param name="arg0_pPosition">position 3D [x, y, z] x position must be striclty positif.</param>
            <param name="arg1_pFrame">target frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}.</param>
            <param name="arg2_pEffectorId">effector id {Middle of eyes = 0, Camera Top = 1, Camera Bottom = 2}.</param>
            <param name="arg3_pFractionMaxSpeed">The fraction of maximum speed to use. Must be between 0 and 1.</param>
            <param name="arg4_pUseWholeBody">If true, use whole body constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._stopLookAt">
            <summary>Stop current look at</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._stopLookAtAsync">
            <summary>Stop current look at</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._stopPointAt">
            <summary>Stop current point at</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._stopPointAtAsync">
            <summary>Stop current point at</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._searcherSetUseWholeBodyLookAt(System.Boolean)">
            <summary>Enable whole body look at during search</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._searcherSetUseWholeBodyLookAtAsync(System.Boolean)">
            <summary>Enable whole body look at during search</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._setMoveEvent(System.String)">
            <summary>Set a specific event for move.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._setMoveEventAsync(System.String)">
            <summary>Set a specific event for move.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._setMoveHysteresis(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Set move hysteresis.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._setMoveHysteresisAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Set move hysteresis.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._getMoveHysteresis">
            <summary>Get move hysteresis.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTracker._getMoveHysteresisAsync">
            <summary>Get move hysteresis.</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALEngagementZones">
            <summary>This module enables to compue the engagement zones of detected people or detected movements</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALEngagementZones.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALEngagementZones.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALEngagementZones.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALEngagementZones.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SetLimitAngle(System.Single)">
            <summary>Set the angle used for the delimitation of the engagement zones</summary>
            <param name="arg0_angle">New angle (in degrees) for delimitation, it should be below 180</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SetLimitAngleAsync(System.Single)">
            <summary>Set the angle used for the delimitation of the engagement zones</summary>
            <param name="arg0_angle">New angle (in degrees) for delimitation, it should be below 180</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetLimitAngle">
            <summary>Get the angle used for the delimitation of the engagement zones</summary>
            <returns>Current angle used for delimitation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetLimitAngleAsync">
            <summary>Get the angle used for the delimitation of the engagement zones</summary>
            <returns>Current angle used for delimitation</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SetFirstLimitDistance(System.Single)">
            <summary>Set the first distance used for the delimitation of the engagement zones (nearest limit)</summary>
            <param name="arg0_distance">New first distance (in meters) for delimitation (nearest limit), it should be positive and smaller than the second distance</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SetFirstLimitDistanceAsync(System.Single)">
            <summary>Set the first distance used for the delimitation of the engagement zones (nearest limit)</summary>
            <param name="arg0_distance">New first distance (in meters) for delimitation (nearest limit), it should be positive and smaller than the second distance</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetFirstLimitDistance">
            <summary>Get the first distance used for the delimitation of the engagement zones (nearest limit)</summary>
            <returns>Current first distance (in meters) used for delimitation (nearest limit)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetFirstLimitDistanceAsync">
            <summary>Get the first distance used for the delimitation of the engagement zones (nearest limit)</summary>
            <returns>Current first distance (in meters) used for delimitation (nearest limit)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SetSecondLimitDistance(System.Single)">
            <summary>Set the second distance used for the delimitation of the engagement zones (furthest limit)</summary>
            <param name="arg0_distance">New second distance (in meters) for delimitation (furthest limit), it should be positive and bigger than the first distance</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.SetSecondLimitDistanceAsync(System.Single)">
            <summary>Set the second distance used for the delimitation of the engagement zones (furthest limit)</summary>
            <param name="arg0_distance">New second distance (in meters) for delimitation (furthest limit), it should be positive and bigger than the first distance</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetSecondLimitDistance">
            <summary>Get the second distance used for the delimitation of the engagement zones (furthest limit)</summary>
            <returns>Current second distance (in meters) used for delimitation (furthest limit)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.GetSecondLimitDistanceAsync">
            <summary>Get the second distance used for the delimitation of the engagement zones (furthest limit)</summary>
            <returns>Current second distance (in meters) used for delimitation (furthest limit)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.ComputeEngagementZone(System.Single,System.Single,System.Single)">
            <summary>Computes the engagement zone in which an object is from its position in FRAME_ROBOT</summary>
            <param name="arg0_x">X coordinate of the object in FRAME_ROBOT</param>
            <param name="arg1_y">Y coordinate of the object in FRAME_ROBOT</param>
            <param name="arg2_z">Z coordinate of the object in FRAME_ROBOT</param>
            <returns>Engagement zone of the object</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.ComputeEngagementZoneAsync(System.Single,System.Single,System.Single)">
            <summary>Computes the engagement zone in which an object is from its position in FRAME_ROBOT</summary>
            <param name="arg0_x">X coordinate of the object in FRAME_ROBOT</param>
            <param name="arg1_y">Y coordinate of the object in FRAME_ROBOT</param>
            <param name="arg2_z">Z coordinate of the object in FRAME_ROBOT</param>
            <returns>Engagement zone of the object</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.ComputeEngagementZone(System.Single,System.Single,System.Single,System.Object)">
            <summary>Computes the engagement zone in which an object is from its anglular position in the camera image, its distance from the robot, and the position of the camera in FRAME_ROBOT</summary>
            <param name="arg0_xAngle">X angular coordinate of the object in the image</param>
            <param name="arg1_yAngle">Y angular coordinate of the object in the image</param>
            <param name="arg2_distance">distance of the object from the robot</param>
            <param name="arg3_cameraPositionRobot">camera position in FRAME_ROBOT</param>
            <returns>Engagement zone of the object</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALEngagementZones.ComputeEngagementZoneAsync(System.Single,System.Single,System.Single,System.Object)">
            <summary>Computes the engagement zone in which an object is from its anglular position in the camera image, its distance from the robot, and the position of the camera in FRAME_ROBOT</summary>
            <param name="arg0_xAngle">X angular coordinate of the object in the image</param>
            <param name="arg1_yAngle">Y angular coordinate of the object in the image</param>
            <param name="arg2_distance">distance of the object from the robot</param>
            <param name="arg3_cameraPositionRobot">camera position in FRAME_ROBOT</param>
            <returns>Engagement zone of the object</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALFaceCharacteristics">
            <summary>This module enables to extract information from the characteristics of the faces of detected people.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFaceCharacteristics.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.AnalyzeFaceCharacteristics(System.Int32)">
            <summary>Runs face analysis for a given person ID.</summary>
            <param name="arg0_id">Person ID.</param>
            <returns>True if the face analysis succeeded, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.AnalyzeFaceCharacteristicsAsync(System.Int32)">
            <summary>Runs face analysis for a given person ID.</summary>
            <param name="arg0_id">Person ID.</param>
            <returns>True if the face analysis succeeded, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.SetSmilingThreshold(System.Single)">
            <summary>Sets the smile degree threshold above which an event is raised.</summary>
            <param name="arg0_threshold">New threshold (must be between 0.0 and 1.0.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.SetSmilingThresholdAsync(System.Single)">
            <summary>Sets the smile degree threshold above which an event is raised.</summary>
            <param name="arg0_threshold">New threshold (must be between 0.0 and 1.0.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetSmilingThreshold">
            <summary>Gets the smile degree threshold above which an event is raised.</summary>
            <returns>Threshold for Smiling event</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceCharacteristics.GetSmilingThresholdAsync">
            <summary>Gets the smile degree threshold above which an event is raised.</summary>
            <returns>Threshold for Smiling event</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALFaceDetection">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFaceDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFaceDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFaceDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALFaceDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetFrameRate(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetFrameRateAsync(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetFrameRate(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetFrameRateAsync(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetParameter(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetParameterAsync(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._run">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._runAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.EnableRecognition(System.Boolean)">
            <summary>deprecated</summary>
            <param name="arg0_enable">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.EnableRecognitionAsync(System.Boolean)">
            <summary>deprecated</summary>
            <param name="arg0_enable">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetRecognitionEnabled(System.Boolean)">
            <summary>enable/disable the recognition stageProcess will be faster when disabled when you don't need to recognize people</summary>
            <param name="arg0_enable">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetRecognitionEnabledAsync(System.Boolean)">
            <summary>enable/disable the recognition stageProcess will be faster when disabled when you don't need to recognize people</summary>
            <param name="arg0_enable">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsRecognitionEnabled">
            <summary>Returns if recognition is enabled.</summary>
            <returns>True/False</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsRecognitionEnabledAsync">
            <summary>Returns if recognition is enabled.</summary>
            <returns>True/False</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetRecognitionConfidenceThreshold">
            <summary>Get the current confidence threshold for face recognition.</summary>
            <returns>Confidence threshold</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetRecognitionConfidenceThresholdAsync">
            <summary>Get the current confidence threshold for face recognition.</summary>
            <returns>Confidence threshold</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetRecognitionConfidenceThreshold(System.Single)">
            <summary>Set the current confidence threshold for face recognition. Matches with lower confidence value will not be considered.</summary>
            <param name="arg0_confThreshold">New confidence threshold between 0.0 and 1.0 (default 0.4).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetRecognitionConfidenceThresholdAsync(System.Single)">
            <summary>Set the current confidence threshold for face recognition. Matches with lower confidence value will not be considered.</summary>
            <param name="arg0_confThreshold">New confidence threshold between 0.0 and 1.0 (default 0.4).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.EnableTracking(System.Boolean)">
            <summary>deprecated</summary>
            <param name="arg0_enable">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.EnableTrackingAsync(System.Boolean)">
            <summary>deprecated</summary>
            <param name="arg0_enable">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetTrackingEnabled(System.Boolean)">
            <summary>(BETA) Choose to enable or disable tracking. Enabling tracking usually allows you to follow a face for a longer period of time. However, it can lead to more false detections. </summary>
            <param name="arg0_enable">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.SetTrackingEnabledAsync(System.Boolean)">
            <summary>(BETA) Choose to enable or disable tracking. Enabling tracking usually allows you to follow a face for a longer period of time. However, it can lead to more false detections. </summary>
            <param name="arg0_enable">True/False</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsTrackingEnabled">
            <summary>(BETA) Returns if tracking is enabled.</summary>
            <returns>True/False</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.IsTrackingEnabledAsync">
            <summary>(BETA) Returns if tracking is enabled.</summary>
            <returns>True/False</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.LearnFace(System.String)">
            <summary>Add a new face in the database.</summary>
            <param name="arg0_pId">The name of the person to save</param>
            <returns>true if the operation succeeds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.LearnFaceAsync(System.String)">
            <summary>Add a new face in the database.</summary>
            <param name="arg0_pId">The name of the person to save</param>
            <returns>true if the operation succeeds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ReLearnFace(System.String)">
            <summary>use in a new learning process the latest images where a face has been wrongly recognized </summary>
            <param name="arg0_pId">The name of the person to save</param>
            <returns>true if the operation succeeds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ReLearnFaceAsync(System.String)">
            <summary>use in a new learning process the latest images where a face has been wrongly recognized </summary>
            <param name="arg0_pId">The name of the person to save</param>
            <returns>true if the operation succeeds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ForgetPerson(System.String)">
            <summary>Delete from the database all faces instances of a person.</summary>
            <param name="arg0_pId">The name of the person to forget</param>
            <returns>true if the operation succeeds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ForgetPersonAsync(System.String)">
            <summary>Delete from the database all faces instances of a person.</summary>
            <param name="arg0_pId">The name of the person to forget</param>
            <returns>true if the operation succeeds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ClearDatabase">
            <summary>Remove all faces from the database.</summary>
            <returns>true if the operation succeeds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ClearDatabaseAsync">
            <summary>Remove all faces from the database.</summary>
            <returns>true if the operation succeeds</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._setDetectionMode(System.Int32)">
            <summary>Changes the mode of detection</summary>
            <param name="arg0_mode">0 - Still Image,Motion mode:1 - Whole search mode,2 - 3 Partition search mode,3 - Gradual progress search mode.</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._setDetectionModeAsync(System.Int32)">
            <summary>Changes the mode of detection</summary>
            <param name="arg0_mode">0 - Still Image,Motion mode:1 - Whole search mode,2 - 3 Partition search mode,3 - Gradual progress search mode.</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._getDetectionMode">
            <summary>Returns the current mode of detection</summary>
            <returns>current mode of detection (0, 1, 2 or 3)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._getDetectionModeAsync">
            <summary>Returns the current mode of detection</summary>
            <returns>current mode of detection (0, 1, 2 or 3)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._isFaceAnalysisEnabled">
            <summary>Returns the current face analysis state</summary>
            <returns>True/False</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._isFaceAnalysisEnabledAsync">
            <summary>Returns the current face analysis state</summary>
            <returns>True/False</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._setFaceAnalysisEnabled(System.Boolean)">
            <summary>Enables or disables the full face analysis</summary>
            <param name="arg0_enabled">True to enable, False to disable</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection._setFaceAnalysisEnabledAsync(System.Boolean)">
            <summary>Enables or disables the full face analysis</summary>
            <param name="arg0_enabled">True to enable, False to disable</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ImportOldDatabase(System.String)">
            <summary>Imports the content of an old face reco DB</summary>
            <param name="arg0_policy">Merging policy if an imported entry has the same name as an existing one.It can be either:&quot;overwrite&quot; to replace the existing entry by the imported one,&quot;merge&quot; to merge data from both entries (if they don't relate to the same person, face recognition may fail),&quot;keep&quot; to keep the existing entry and skip the imported one.</param>
            <returns>True if the import succeeded, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.ImportOldDatabaseAsync(System.String)">
            <summary>Imports the content of an old face reco DB</summary>
            <param name="arg0_policy">Merging policy if an imported entry has the same name as an existing one.It can be either:&quot;overwrite&quot; to replace the existing entry by the imported one,&quot;merge&quot; to merge data from both entries (if they don't relate to the same person, face recognition may fail),&quot;keep&quot; to keep the existing entry and skip the imported one.</param>
            <returns>True if the import succeeded, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetLearnedFacesList">
            <summary>Returns the list of learned faces.</summary>
            <returns>List of names</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFaceDetection.GetLearnedFacesListAsync">
            <summary>Returns the list of learned faces.</summary>
            <returns>List of names</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALGazeAnalysis">
            <summary>This module computes the direction of the look of a person from the orientation of his/her face. It is then possible to know if the person looks at the robot or not.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALGazeAnalysis.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALGazeAnalysis.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALGazeAnalysis.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.SetFaceAnalysisEnabled(System.Boolean)">
            <summary>Turns face analysis on or off.</summary>
            <param name="arg0_status">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.SetFaceAnalysisEnabledAsync(System.Boolean)">
            <summary>Turns face analysis on or off.</summary>
            <param name="arg0_status">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsFaceAnalysisEnabled">
            <summary>Gets the current status of face analysis.</summary>
            <returns>True if face analysis is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.IsFaceAnalysisEnabledAsync">
            <summary>Gets the current status of face analysis.</summary>
            <returns>True if face analysis is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.SetTolerance(System.Single)">
            <summary>Sets the tolerance (between 0 and 1) for deciding whether or not a person is looking at the robot after face analysis. This tolerance is used only when face analysis is enabled.</summary>
            <param name="arg0_tolerance">New value of the tolerance (between 0 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.SetToleranceAsync(System.Single)">
            <summary>Sets the tolerance (between 0 and 1) for deciding whether or not a person is looking at the robot after face analysis. This tolerance is used only when face analysis is enabled.</summary>
            <param name="arg0_tolerance">New value of the tolerance (between 0 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetTolerance">
            <summary>Gets the tolerance used to decide whether or not a person is looking at the robot after face analysis.</summary>
            <returns>Current value of the tolerance.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALGazeAnalysis.GetToleranceAsync">
            <summary>Gets the tolerance used to decide whether or not a person is looking at the robot after face analysis.</summary>
            <returns>Current value of the tolerance.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALPeoplePerception">
            <summary>This module controls the People Perception flow and pushes information about detected people in ALMemory.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPeoplePerception.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPeoplePerception.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPeoplePerception.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALPeoplePerception.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMaximumDetectionRange">
            <summary>Gets the current maximum detection and tracking range.</summary>
            <returns>Maximum range in meters.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMaximumDetectionRangeAsync">
            <summary>Gets the current maximum detection and tracking range.</summary>
            <returns>Maximum range in meters.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMinimumBodyHeight">
            <summary>Gets the current minimum body height used for human detection (3D mode only).</summary>
            <returns>Minimum height in meters.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMinimumBodyHeightAsync">
            <summary>Gets the current minimum body height used for human detection (3D mode only).</summary>
            <returns>Minimum height in meters.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMaximumBodyHeight">
            <summary>Gets the current maximum body height used for human detection (3D mode only).</summary>
            <returns>Maximum height in meters.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetMaximumBodyHeightAsync">
            <summary>Gets the current maximum body height used for human detection (3D mode only).</summary>
            <returns>Maximum height in meters.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetTimeBeforePersonDisappears">
            <summary>Gets the time after which a person, supposed not to be in the field of view of the camera disappears if it has not been detected.</summary>
            <returns>Time in seconds.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetTimeBeforePersonDisappearsAsync">
            <summary>Gets the time after which a person, supposed not to be in the field of view of the camera disappears if it has not been detected.</summary>
            <returns>Time in seconds.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetTimeBeforeVisiblePersonDisappears">
            <summary>Gets the time after which a person, supposed to be in the field of view of the camera disappears if it has not been detected.</summary>
            <returns>Time in seconds.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.GetTimeBeforeVisiblePersonDisappearsAsync">
            <summary>Gets the time after which a person, supposed to be in the field of view of the camera disappears if it has not been detected.</summary>
            <returns>Time in seconds.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsFaceDetectionEnabled">
            <summary>Gets the current status of face detection.</summary>
            <returns>True if face detection is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsFaceDetectionEnabledAsync">
            <summary>Gets the current status of face detection.</summary>
            <returns>True if face detection is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsFastModeEnabled">
            <summary>Gets the current status of fast mode.</summary>
            <returns>True if fast mode is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsFastModeEnabledAsync">
            <summary>Gets the current status of fast mode.</summary>
            <returns>True if fast mode is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsGraphicalDisplayEnabled">
            <summary>Gets the current status of graphical display in Choregraphe.</summary>
            <returns>True if graphical display is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsGraphicalDisplayEnabledAsync">
            <summary>Gets the current status of graphical display in Choregraphe.</summary>
            <returns>True if graphical display is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsMovementDetectionEnabled">
            <summary>Gets the current status of movement detection in Choregraphe.</summary>
            <returns>True if movement detection is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.IsMovementDetectionEnabledAsync">
            <summary>Gets the current status of movement detection in Choregraphe.</summary>
            <returns>True if movement detection is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.ResetPopulation">
            <summary>Empties the tracked population.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.ResetPopulationAsync">
            <summary>Empties the tracked population.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetFastModeEnabled(System.Boolean)">
            <summary>Turns fast mode on or off.</summary>
            <param name="arg0_enable">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetFastModeEnabledAsync(System.Boolean)">
            <summary>Turns fast mode on or off.</summary>
            <param name="arg0_enable">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetGraphicalDisplayEnabled(System.Boolean)">
            <summary>Turns graphical display in Choregraphe on or off.</summary>
            <param name="arg0_enable">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetGraphicalDisplayEnabledAsync(System.Boolean)">
            <summary>Turns graphical display in Choregraphe on or off.</summary>
            <param name="arg0_enable">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetMaximumDetectionRange(System.Single)">
            <summary>Sets the maximum range for human detection and tracking.</summary>
            <param name="arg0_range">Maximum range in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetMaximumDetectionRangeAsync(System.Single)">
            <summary>Sets the maximum range for human detection and tracking.</summary>
            <param name="arg0_range">Maximum range in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetMinimumBodyHeight(System.Single)">
            <summary>Sets the minimum human body height (3D mode only).</summary>
            <param name="arg0_height">Minimum height in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetMinimumBodyHeightAsync(System.Single)">
            <summary>Sets the minimum human body height (3D mode only).</summary>
            <param name="arg0_height">Minimum height in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetMaximumBodyHeight(System.Single)">
            <summary>Sets the maximum human body height (3D mode only).</summary>
            <param name="arg0_height">Maximum height in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetMaximumBodyHeightAsync(System.Single)">
            <summary>Sets the maximum human body height (3D mode only).</summary>
            <param name="arg0_height">Maximum height in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetMovementDetectionEnabled(System.Boolean)">
            <summary>Turns movement detection on or off.</summary>
            <param name="arg0_enable">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetMovementDetectionEnabledAsync(System.Boolean)">
            <summary>Turns movement detection on or off.</summary>
            <param name="arg0_enable">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetTimeBeforePersonDisappears(System.Single)">
            <summary>Sets the time after which a person, supposed not to be in the field of view of the camera disappears if it has not been detected.</summary>
            <param name="arg0_seconds">Time in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetTimeBeforePersonDisappearsAsync(System.Single)">
            <summary>Sets the time after which a person, supposed not to be in the field of view of the camera disappears if it has not been detected.</summary>
            <param name="arg0_seconds">Time in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetTimeBeforeVisiblePersonDisappears(System.Single)">
            <summary>Sets the time after which a person, supposed to be in the field of view of the camera disappears if it has not been detected.</summary>
            <param name="arg0_seconds">Time in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetTimeBeforeVisiblePersonDisappearsAsync(System.Single)">
            <summary>Sets the time after which a person, supposed to be in the field of view of the camera disappears if it has not been detected.</summary>
            <param name="arg0_seconds">Time in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception._getDetectionMode">
            <summary>Gets the mode (2D/3D) used for the people detection.</summary>
            <returns>Current mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception._getDetectionModeAsync">
            <summary>Gets the mode (2D/3D) used for the people detection.</summary>
            <returns>Current mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception._setDetectionMode(System.String)">
            <summary>Sets the mode (2D/3D) used for the people detection.</summary>
            <param name="arg0_mode">Mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception._setDetectionModeAsync(System.String)">
            <summary>Sets the mode (2D/3D) used for the people detection.</summary>
            <param name="arg0_mode">Mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetFaceDetectionEnabled(System.Boolean)">
            <summary>Turns face detection on or off.</summary>
            <param name="arg0_enable">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPeoplePerception.SetFaceDetectionEnabledAsync(System.Boolean)">
            <summary>Turns face detection on or off.</summary>
            <param name="arg0_enable">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSittingPeopleDetection">
            <summary>This module contains ...</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.SetSittingThreshold(System.Single)">
            <summary>Sets sitting threshold</summary>
            <param name="arg0_threshold">float, face height (in meter) from the ground under which we consider thatsomeone is sitting.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.SetSittingThresholdAsync(System.Single)">
            <summary>Sets sitting threshold</summary>
            <param name="arg0_threshold">float, face height (in meter) from the ground under which we consider thatsomeone is sitting.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetSittingThreshold">
            <summary>Gets sitting threshold</summary>
            <returns>Maximum face height in meter</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSittingPeopleDetection.GetSittingThresholdAsync">
            <summary>Gets sitting threshold</summary>
            <returns>Maximum face height in meter</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALWavingDetection">
            <summary>This module enables to detect if a person is waving at the robot. To be detected as waving, a person must be looking at the robot.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALWavingDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALWavingDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALWavingDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALWavingDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.SetMaxDistance(System.Single)">
            <summary>Set maximum distance for waving detection</summary>
            <param name="arg0_maxDistance">New maximum distance (in meters), between 0.5m and 3m</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.SetMaxDistanceAsync(System.Single)">
            <summary>Set maximum distance for waving detection</summary>
            <param name="arg0_maxDistance">New maximum distance (in meters), between 0.5m and 3m</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMaxDistance">
            <summary>Get maximum distance for waving detection</summary>
            <returns>Current maximum distance (in meters)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMaxDistanceAsync">
            <summary>Get maximum distance for waving detection</summary>
            <returns>Current maximum distance (in meters)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.SetMinSize(System.Single)">
            <summary>Set minimum size of movement for waving detection</summary>
            <param name="arg0_sensitivity">New minimum size (in meters), between 0.05m and 0.3m</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.SetMinSizeAsync(System.Single)">
            <summary>Set minimum size of movement for waving detection</summary>
            <param name="arg0_sensitivity">New minimum size (in meters), between 0.05m and 0.3m</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMinSize">
            <summary>Get minimum size of movement for waving detection</summary>
            <returns>Current minimum size (in meters)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALWavingDetection.GetMinSizeAsync">
            <summary>Get minimum size of movement for waving detection</summary>
            <returns>Current minimum size (in meters)</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALBattery">
            <summary>Deals with Battery informations.A event name BatteryChargeCellVoltageMinChanged is raised when the cell voltage Min (int) of the battery changed.A event name BatteryChargingFlagChanged is raised when the flag battery is charging (bool) changed.A event name BatteryFullChargedFlagChanged is raised when the flag battery is full charged (bool) changed.A event name BatteryDisChargingFlagChanged is raised when the flag battery is disCharging (bool) changed.A event name BatteryChargeChanged is raised when the battery level percentage (int) changed.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBattery.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBattery.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBattery.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALBattery.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.EnablePowerMonitoring(System.Boolean)">
            <summary>Enable power monitoring</summary>
            <param name="arg0_Enable">True activate power monitoring</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.EnablePowerMonitoringAsync(System.Boolean)">
            <summary>Enable power monitoring</summary>
            <param name="arg0_Enable">True activate power monitoring</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetBatteryCharge">
            <summary>Get the battery charge in percents</summary>
            <returns>the percentage of remaining power</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery.GetBatteryChargeAsync">
            <summary>Get the battery charge in percents</summary>
            <returns>the percentage of remaining power</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setFirstWarningPercent(System.Int32)">
            <summary>Internal set the battery level for the first warning.</summary>
            <param name="arg0_Percent">Percentage of battery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setFirstWarningPercentAsync(System.Int32)">
            <summary>Internal set the battery level for the first warning.</summary>
            <param name="arg0_Percent">Percentage of battery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setWarningPercent(System.Int32)">
            <summary>Internal set the battery level for the second warning.</summary>
            <param name="arg0_Percent">Percentage of battery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setWarningPercentAsync(System.Int32)">
            <summary>Internal set the battery level for the second warning.</summary>
            <param name="arg0_Percent">Percentage of battery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setLastWarningPercent(System.Int32)">
            <summary>Internal set the battery level for the last warning.</summary>
            <param name="arg0_Percent">Percentage of battery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setLastWarningPercentAsync(System.Int32)">
            <summary>Internal set the battery level for the last warning.</summary>
            <param name="arg0_Percent">Percentage of battery.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._hasBattery">
            <summary>Is battery detected.</summary>
            <returns>Return true if battery is detected.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._hasBatteryAsync">
            <summary>Is battery detected.</summary>
            <returns>Return true if battery is detected.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._getBatteryMode">
            <summary>Get current battery mode.</summary>
            <returns>Return the current battery mode. (Local = 0, robot = 1, simulation = 2)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._getBatteryModeAsync">
            <summary>Get current battery mode.</summary>
            <returns>Return the current battery mode. (Local = 0, robot = 1, simulation = 2)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._getFullyChargedThreshold">
            <summary>Get current battery fully charged threshold.</summary>
            <returns>the percentage of threshold for fully charged event.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._getFullyChargedThresholdAsync">
            <summary>Get current battery fully charged threshold.</summary>
            <returns>the percentage of threshold for fully charged event.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setFullyChargedThreshold(System.Int32)">
            <summary>Set battery fully charged threshold.</summary>
            <param name="arg0_threshold">the percentage of threshold for fully charged event.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setFullyChargedThresholdAsync(System.Int32)">
            <summary>Set battery fully charged threshold.</summary>
            <param name="arg0_threshold">the percentage of threshold for fully charged event.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setModeSlave(System.Boolean)">
            <summary>Set mode slave status.</summary>
            <param name="arg0_status">Enables or disables mode slave.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBattery._setModeSlaveAsync(System.Boolean)">
            <summary>Set mode slave status.</summary>
            <param name="arg0_status">Enables or disables mode slave.</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALBodyTemperature">
            <summary>Deals with motor temperature.A event name HotJointDetected is raised when at least one motor has higher temperature.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBodyTemperature.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBodyTemperature.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBodyTemperature.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALBodyTemperature.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetTemperatureDiagnosis">
            <summary>The actual state of the temperature diagnosis.</summary>
            <returns>Return the current temperature diagnosis.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.GetTemperatureDiagnosisAsync">
            <summary>The actual state of the temperature diagnosis.</summary>
            <returns>Return the current temperature diagnosis.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.SetEnableNotifications(System.Boolean)">
            <summary>Enables / Disables temperature notifications.</summary>
            <param name="arg0_enable">If True enable temperature notifications. If False disable temperature notifications.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.SetEnableNotificationsAsync(System.Boolean)">
            <summary>Enables / Disables temperature notifications.</summary>
            <param name="arg0_enable">If True enable temperature notifications. If False disable temperature notifications.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.AreNotificationsEnabled">
            <summary>Return true if notifications are active.</summary>
            <returns>Return True if notifications are active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature.AreNotificationsEnabledAsync">
            <summary>Return true if notifications are active.</summary>
            <returns>Return True if notifications are active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._getDeviceTemperature(System.String)">
            <summary>Return the current temperature of deviceName.</summary>
            <param name="arg0_deviceName">A joint, actuator or sensor name.</param>
            <returns>Return the current temperature in degree celsius.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._getDeviceTemperatureAsync(System.String)">
            <summary>Return the current temperature of deviceName.</summary>
            <param name="arg0_deviceName">A joint, actuator or sensor name.</param>
            <returns>Return the current temperature in degree celsius.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._getDeviceStatus(System.String)">
            <summary>Return the current temperature status of deviceName.</summary>
            <param name="arg0_deviceName">A joint, actuator or sensor name.</param>
            <returns>Return the current temperature status.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._getDeviceStatusAsync(System.String)">
            <summary>Return the current temperature status of deviceName.</summary>
            <param name="arg0_deviceName">A joint, actuator or sensor name.</param>
            <returns>Return the current temperature status.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._getTemperatureStatus">
            <summary>The actual state of the temperature status.</summary>
            <returns>Return the current temperature status.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._getTemperatureStatusAsync">
            <summary>The actual state of the temperature status.</summary>
            <returns>Return the current temperature status.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._setEnableDump(System.Boolean)">
            <summary>Enabled or disables file dump at temperature error.</summary>
            <param name="arg0_status">Enables or disables dump.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._setEnableDumpAsync(System.Boolean)">
            <summary>Enabled or disables file dump at temperature error.</summary>
            <param name="arg0_status">Enables or disables dump.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._isDumpEnabled">
            <summary>Return true if dump to file is active.</summary>
            <returns>Return true if dump is enable.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBodyTemperature._isDumpEnabledAsync">
            <summary>Return true if dump to file is active.</summary>
            <returns>Return true if dump is enable.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALChestButton">
            <summary>Handle chest button activity.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALChestButton.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALChestButton.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALChestButton.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALChestButton.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton._setEnableNotifications(System.Boolean)">
            <summary>Enables / Disables notifications.</summary>
            <param name="arg0_enable">If True enable notifications. If False disable notifications.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton._setEnableNotificationsAsync(System.Boolean)">
            <summary>Enables / Disables notifications.</summary>
            <param name="arg0_enable">If True enable notifications. If False disable notifications.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton._areNotificationsEnabled">
            <summary>Return true if notifications are active.</summary>
            <returns>Return True if notifications are active.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALChestButton._areNotificationsEnabledAsync">
            <summary>Return true if notifications are active.</summary>
            <returns>Return True if notifications are active.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALFsr">
            <summary>Deals with FSR sensors. A MicroEvent is generated when the foot contact changed.The ALMemory Key is footContactChanged, its a boolean which is set to &quot;True&quot; if one of the foot touched the groundAlso some fast access Memory key are available :  footContact (1.0f if one of the foot touched the ground) leftFootContact (1.0f if the left foot touched the ground) rightFootContact (1.0f if the right foot touched the ground) leftFootTotalWeight (the average weight on the left foot in Kg) rightFootTotalWeight (the average weight on the right foot in Kg)</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFsr.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFsr.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALFsr.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALFsr.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALFsr.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALLaser">
            <summary>Allow control over Hokuyo laser when available on Nao's head.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLaser.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLaser.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLaser.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALLaser.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.LaserOFF">
            <summary>Disable laser light</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.LaserOFFAsync">
            <summary>Disable laser light</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.LaserON">
            <summary>Enable laser light and sampling</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.LaserONAsync">
            <summary>Enable laser light and sampling</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.SetOpeningAngle(System.Single,System.Single)">
            <summary>Set openning angle of the laser</summary>
            <param name="arg0_angle_min_f">float containing the min value in rad, this value must be upper than -2.35619449 </param>
            <param name="arg1_angle_max_f">float containing the max value in rad, this value must be lower than 2.092349795 </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.SetOpeningAngleAsync(System.Single,System.Single)">
            <summary>Set openning angle of the laser</summary>
            <param name="arg0_angle_min_f">float containing the min value in rad, this value must be upper than -2.35619449 </param>
            <param name="arg1_angle_max_f">float containing the max value in rad, this value must be lower than 2.092349795 </param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.SetDetectingLength(System.Int32,System.Int32)">
            <summary>Set detection threshold of the laser</summary>
            <param name="arg0_length_min_l">int containing the min length that the laser will detect(mm), this value must be upper than 20 mm</param>
            <param name="arg1_length_max_l">int containing the max length that the laser will detect(mm), this value must be lower than 5600 mm</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLaser.SetDetectingLengthAsync(System.Int32,System.Int32)">
            <summary>Set detection threshold of the laser</summary>
            <param name="arg0_length_min_l">int containing the min length that the laser will detect(mm), this value must be upper than 20 mm</param>
            <param name="arg1_length_max_l">int containing the max length that the laser will detect(mm), this value must be lower than 5600 mm</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALLeds">
            <summary>This module allows you to control NAO's LEDs. It provides simple ways of setting or fading the intensity of single LEDs and groups of LEDs. Groups of LEDs typically include face LEDs, ear LEDs etc. It is also possible to control each LED separately (for example, each of the 8 LEDs in one NAO's eyes).There are three primary colors of LEDs available - red, green and blue, so it is possible to combine them to obtain different colors. The ears contain blue LEDs only.It is possible to control the LED's intensity (between 0 and 100%).</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLeds.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLeds.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLeds.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALLeds.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.CreateGroup(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Makes a group name for ease of setting multiple LEDs.</summary>
            <param name="arg0_groupName">The name of the group.</param>
            <param name="arg1_ledNames">A vector of the names of the LEDs in the group.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.CreateGroupAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Makes a group name for ease of setting multiple LEDs.</summary>
            <param name="arg0_groupName">The name of the group.</param>
            <param name="arg1_ledNames">A vector of the names of the LEDs in the group.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.EarLedsSetAngle(System.Int32,System.Single,System.Boolean)">
            <summary>An animation to show a direction with the ears.</summary>
            <param name="arg0_degrees">The angle you want to show in degrees (int). 0 is up, 90 is forwards, 180 is down and 270 is back.</param>
            <param name="arg1_duration">The duration in seconds of the animation.</param>
            <param name="arg2_leaveOnAtEnd">If true the last led is left on at the end of the animation.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.EarLedsSetAngleAsync(System.Int32,System.Single,System.Boolean)">
            <summary>An animation to show a direction with the ears.</summary>
            <param name="arg0_degrees">The angle you want to show in degrees (int). 0 is up, 90 is forwards, 180 is down and 270 is back.</param>
            <param name="arg1_duration">The duration in seconds of the animation.</param>
            <param name="arg2_leaveOnAtEnd">If true the last led is left on at the end of the animation.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Fade(System.String,System.Single,System.Single)">
            <summary>Sets the intensity of a LED or Group of LEDs within a given time.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_intensity">The intensity of the LED or Group (a value between 0 and 1).</param>
            <param name="arg2_duration">The duration of the fade in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeAsync(System.String,System.Single,System.Single)">
            <summary>Sets the intensity of a LED or Group of LEDs within a given time.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_intensity">The intensity of the LED or Group (a value between 0 and 1).</param>
            <param name="arg2_duration">The duration of the fade in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeListRGB(System.String,System.Object,System.Object)">
            <summary>Chain a list of color for a device, as the motion.doMove command.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_rgbList">List of RGB led value, RGB as seen in hexa-decimal: 0x00RRGGBB.</param>
            <param name="arg2_timeList">List of time to go to given intensity.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeListRGBAsync(System.String,System.Object,System.Object)">
            <summary>Chain a list of color for a device, as the motion.doMove command.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_rgbList">List of RGB led value, RGB as seen in hexa-decimal: 0x00RRGGBB.</param>
            <param name="arg2_timeList">List of time to go to given intensity.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeRGB(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>Sets the color of an RGB led.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_red">the intensity of red channel (0-1).</param>
            <param name="arg2_green">the intensity of green channel (0-1).</param>
            <param name="arg3_blue">the intensity of blue channel (0-1).</param>
            <param name="arg4_duration">Time used to fade in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeRGBAsync(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>Sets the color of an RGB led.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_red">the intensity of red channel (0-1).</param>
            <param name="arg2_green">the intensity of green channel (0-1).</param>
            <param name="arg3_blue">the intensity of blue channel (0-1).</param>
            <param name="arg4_duration">Time used to fade in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeRGB(System.String,System.String,System.Single)">
            <summary>Sets the color of an RGB led.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_colorName">the name of the color (supported colors: &quot;white&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;magenta&quot;, &quot;cyan&quot;)</param>
            <param name="arg2_duration">Time used to fade in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeRGBAsync(System.String,System.String,System.Single)">
            <summary>Sets the color of an RGB led.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_colorName">the name of the color (supported colors: &quot;white&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;magenta&quot;, &quot;cyan&quot;)</param>
            <param name="arg2_duration">Time used to fade in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeRGB(System.String,System.Int32,System.Single)">
            <summary>Sets the color of an RGB led.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_rgb">The RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB.</param>
            <param name="arg2_duration">Time used to fade in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.FadeRGBAsync(System.String,System.Int32,System.Single)">
            <summary>Sets the color of an RGB led.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_rgb">The RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB.</param>
            <param name="arg2_duration">Time used to fade in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Reset(System.String)">
            <summary>Resets the state of the leds to default (for ex, eye LEDs are white and fully on by default).</summary>
            <param name="arg0_name">The name of the LED or Group (for now, only &quot;AllLeds&quot; are implemented).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ResetAsync(System.String)">
            <summary>Resets the state of the leds to default (for ex, eye LEDs are white and fully on by default).</summary>
            <param name="arg0_name">The name of the LED or Group (for now, only &quot;AllLeds&quot; are implemented).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._setIntensityRatio(System.String,System.Single)">
            <summary>Sets an intensity ratio for the leds. If the leds are asked to be set to a specific intensity, the real intensity applied on the leds will be the specific intensity multiplied by this ratio.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_intensity">The intensity ratio between 0.6 and 1.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._setIntensityRatioAsync(System.String,System.Single)">
            <summary>Sets an intensity ratio for the leds. If the leds are asked to be set to a specific intensity, the real intensity applied on the leds will be the specific intensity multiplied by this ratio.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_intensity">The intensity ratio between 0.6 and 1.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetIntensity(System.String)">
            <summary>Gets the intensity of a LED or device</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <returns>The intensity of the LED or Group.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.GetIntensityAsync(System.String)">
            <summary>Gets the intensity of a LED or device</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <returns>The intensity of the LED or Group.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ListLEDs">
            <summary>Lists the short LED names.</summary>
            <returns>A vector of LED names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ListLEDsAsync">
            <summary>Lists the short LED names.</summary>
            <returns>A vector of LED names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ListLED(System.String)">
            <summary>Lists the devices aliased by a short LED name.</summary>
            <param name="arg0_name">The name of the LED to list</param>
            <returns>A vector of device names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ListLEDAsync(System.String)">
            <summary>Lists the devices aliased by a short LED name.</summary>
            <param name="arg0_name">The name of the LED to list</param>
            <returns>A vector of device names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ListGroup(System.String)">
            <summary>Lists the devices in the group.</summary>
            <param name="arg0_groupName">The name of the Group.</param>
            <returns>A vector of string device names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ListGroupAsync(System.String)">
            <summary>Lists the devices in the group.</summary>
            <param name="arg0_groupName">The name of the Group.</param>
            <returns>A vector of string device names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ListGroups">
            <summary>Lists available group names.</summary>
            <returns>A vector of group names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.ListGroupsAsync">
            <summary>Lists available group names.</summary>
            <returns>A vector of group names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Off(System.String)">
            <summary>Switch to a minimum intensity a LED or Group of LEDs.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.OffAsync(System.String)">
            <summary>Switch to a minimum intensity a LED or Group of LEDs.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.On(System.String)">
            <summary>Switch to a maximum intensity a LED or Group of LEDs.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.OnAsync(System.String)">
            <summary>Switch to a maximum intensity a LED or Group of LEDs.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.Rasta(System.Single)">
            <summary>Launch a green/yellow/red rasta animation on all body.</summary>
            <param name="arg0_duration">Approximate duration of the animation in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RastaAsync(System.Single)">
            <summary>Launch a green/yellow/red rasta animation on all body.</summary>
            <param name="arg0_duration">Approximate duration of the animation in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RotateEyes(System.Int32,System.Single,System.Single)">
            <summary>Launch a rotation using the leds of the eyes.</summary>
            <param name="arg0_rgb">the RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB.</param>
            <param name="arg1_timeForRotation">Approximate time to make one turn.</param>
            <param name="arg2_totalDuration">Approximate duration of the animation in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RotateEyesAsync(System.Int32,System.Single,System.Single)">
            <summary>Launch a rotation using the leds of the eyes.</summary>
            <param name="arg0_rgb">the RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB.</param>
            <param name="arg1_timeForRotation">Approximate time to make one turn.</param>
            <param name="arg2_totalDuration">Approximate duration of the animation in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RandomEyes(System.Single)">
            <summary>Launch a random animation in eyes</summary>
            <param name="arg0_duration">Approximate duration of the animation in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.RandomEyesAsync(System.Single)">
            <summary>Launch a random animation in eyes</summary>
            <param name="arg0_duration">Approximate duration of the animation in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.SetIntensity(System.String,System.Single)">
            <summary>Sets the intensity of a LED or Group of LEDs.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_intensity">The intensity of the LED or Group (a value between 0 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds.SetIntensityAsync(System.String,System.Single)">
            <summary>Sets the intensity of a LED or Group of LEDs.</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_intensity">The intensity of the LED or Group (a value between 0 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._blink">
            <summary>Make the eyes blink once.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._blinkAsync">
            <summary>Make the eyes blink once.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._blink(System.Int32)">
            <summary>Make the eyes blink once with a eyeshadow color.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._blinkAsync(System.Int32)">
            <summary>Make the eyes blink once with a eyeshadow color.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._setAnyLedIntensity(System.String,System.Single)">
            <summary>Sets the intensity of a LED or Group of LEDs (even chest LED).</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_intensity">The intensity of the LED or Group (a value between 0 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._setAnyLedIntensityAsync(System.String,System.Single)">
            <summary>Sets the intensity of a LED or Group of LEDs (even chest LED).</summary>
            <param name="arg0_name">The name of the LED or Group.</param>
            <param name="arg1_intensity">The intensity of the LED or Group (a value between 0 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._startPassiveBlinking">
            <summary>Start passive blinking.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._startPassiveBlinkingAsync">
            <summary>Start passive blinking.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._startPassiveBlinking(System.Int32)">
            <summary>Start passive blinking with a eyeshadow color.</summary>
            <param name="arg0_eyeShadow">The color of the eye shadow during and after the blink.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._startPassiveBlinkingAsync(System.Int32)">
            <summary>Start passive blinking with a eyeshadow color.</summary>
            <param name="arg0_eyeShadow">The color of the eye shadow during and after the blink.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._stopPassiveBlinking">
            <summary>Stop passive blinking.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._stopPassiveBlinkingAsync">
            <summary>Stop passive blinking.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._setTimeBetweenTwoBlinks(System.Single,System.Single)">
            <summary>Set values for minimum and maximum time waited between two passive blinks.</summary>
            <param name="arg0_min">The minimum (should be &gt;= 0)</param>
            <param name="arg1_max">The maximum (should be &gt;= min)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLeds._setTimeBetweenTwoBlinksAsync(System.Single,System.Single)">
            <summary>Set values for minimum and maximum time waited between two passive blinks.</summary>
            <param name="arg0_min">The minimum (should be &gt;= 0)</param>
            <param name="arg1_max">The maximum (should be &gt;= min)</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSensors">
            <summary>Deals with sensors.  Activate the events : &quot;BodyStiffnessChanged&quot;.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSensors.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSensors.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSensors.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSensors.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.Run">
            <summary>Monitors sensors.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSensors.RunAsync">
            <summary>Monitors sensors.</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSonar">
            <summary>Deals with ultrasonic sensors.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSonar.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSonar.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSonar.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSonar.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetFilteredValues">
            <summary>Returns a vector with rightand left filtered sonar values (in this order). Theses valuesare the distances to the nearest detected obstacle.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSonar.GetFilteredValuesAsync">
            <summary>Returns a vector with rightand left filtered sonar values (in this order). Theses valuesare the distances to the nearest detected obstacle.</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALTactileGesture">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTactileGesture.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTactileGesture.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTactileGesture.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALTactileGesture.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._bit_distance(System.Object)">
            <summary>        Computes 'Hamming distance' between the binary representations of        numbers in pair        </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._bit_distanceAsync(System.Object)">
            <summary>        Computes 'Hamming distance' between the binary representations of        numbers in pair        </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._cancel_futures">
            <summary>Cancel all futures</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._cancel_futuresAsync">
            <summary>Cancel all futures</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._check_sequence(System.Object,System.Object,System.Object,System.Object)">
            <summary>        Given a gesture, check if the active sequence matches it.        Algorithm:        1. Create a list of overlapping pairs from each gesture's sequence        2. Loop through each pair (a,b):           3. If the active sequence matches 'a' in the pair:              4. Check if the active sequence contains the 'b' in the pair                 5a. If True, check if it is within n-1 positions from where 'a'                     was (Where 'n' is the number of bits changed between 'a'                     and 'b')                     6a. If True: goto Step 2 [if last pair; goto Step 7)                     6b. Else: break; fullfill promise as None                 5b. Else: break; fullfill promise as None        7. If all pairs check out and they used all of the active sequence           8. Fullfill promise with the gesture and the difference in length between the              inputted sequence and the matched sequence (i.e. the number of              excess frames)        </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._check_sequenceAsync(System.Object,System.Object,System.Object,System.Object)">
            <summary>        Given a gesture, check if the active sequence matches it.        Algorithm:        1. Create a list of overlapping pairs from each gesture's sequence        2. Loop through each pair (a,b):           3. If the active sequence matches 'a' in the pair:              4. Check if the active sequence contains the 'b' in the pair                 5a. If True, check if it is within n-1 positions from where 'a'                     was (Where 'n' is the number of bits changed between 'a'                     and 'b')                     6a. If True: goto Step 2 [if last pair; goto Step 7)                     6b. Else: break; fullfill promise as None                 5b. Else: break; fullfill promise as None        7. If all pairs check out and they used all of the active sequence           8. Fullfill promise with the gesture and the difference in length between the              inputted sequence and the matched sequence (i.e. the number of              excess frames)        </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._clean_up">
            <summary>Clean up/reset after a sequence has been completed</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._clean_upAsync">
            <summary>Clean up/reset after a sequence has been completed</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._clean_up_hold">
            <summary>Clean up/reset after a hold sequence has been completed</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._clean_up_holdAsync">
            <summary>Clean up/reset after a hold sequence has been completed</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._connect_services">
            <summary>Connect to all services required by ALTactileGesture</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._connect_servicesAsync">
            <summary>Connect to all services required by ALTactileGesture</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._connect_signals">
            <summary>Init qi.Signals and memory events (for compatibility)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._connect_signalsAsync">
            <summary>Init qi.Signals and memory events (for compatibility)</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._create_gesture_name(System.Object)">
            <summary>Create gesture name from sequence</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._create_gesture_nameAsync(System.Object)">
            <summary>Create gesture name from sequence</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._eval_hold">
            <summary>        Once the hold time has expired:          - Evaluate if the current sequence is a valid hold gesture          - Fire gesture signal (if valid)          - Reset for next touch input        </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._eval_holdAsync">
            <summary>        Once the hold time has expired:          - Evaluate if the current sequence is a valid hold gesture          - Fire gesture signal (if valid)          - Reset for next touch input        </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._eval_sequence">
            <summary>        Once the sequence time has expired:          - Evaluate if the current sequence is a valid gesture          - Fire gesture signal (if valid)          - Reset for next touch input        </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._eval_sequenceAsync">
            <summary>        Once the sequence time has expired:          - Evaluate if the current sequence is a valid gesture          - Fire gesture signal (if valid)          - Reset for next touch input        </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._fire_gesture_signal(System.Object)">
            <summary>Fire signal linked to gesture</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._fire_gesture_signalAsync(System.Object)">
            <summary>Fire signal linked to gesture</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._fire_release_signal">
            <summary>Fire signal linked to release of sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._fire_release_signalAsync">
            <summary>Fire signal linked to release of sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._on_sensor_change(System.Object)">
            <summary>        On any head sensor change, acquire lock and starts e_sim (settling)        timer.        Note: Only the first signal starts the timer and all others are        debounced.        </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._on_sensor_changeAsync(System.Object)">
            <summary>        On any head sensor change, acquire lock and starts e_sim (settling)        timer.        Note: Only the first signal starts the timer and all others are        debounced.        </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._read_sensors">
            <summary>        Once the settling time (e_sim) is over:          - Read from head sensors.          - Store pattern          - Start hold and sequential timers        </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._read_sensorsAsync">
            <summary>        Once the settling time (e_sim) is over:          - Read from head sensors.          - Store pattern          - Start hold and sequential timers        </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._search_gestures">
            <summary>        Compare inputted sequence to all gestures to find match        Algorithm:        1. async call _check_sequence on for all gestures           (i.e. gestures that match the current hold status and are not unset custom gestures)              -&gt; _check_sequence() will fullfill promise with the gesture if matched; else None        2. Build list of all futures whose value is a matched sequence        3. Return the gesture whose match is the closest the sequence prototype           it matched (i.e. smallest difference)        </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._search_gesturesAsync">
            <summary>        Compare inputted sequence to all gestures to find match        Algorithm:        1. async call _check_sequence on for all gestures           (i.e. gestures that match the current hold status and are not unset custom gestures)              -&gt; _check_sequence() will fullfill promise with the gesture if matched; else None        2. Build list of all futures whose value is a matched sequence        3. Return the gesture whose match is the closest the sequence prototype           it matched (i.e. smallest difference)        </summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._set_hold_time(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._set_hold_timeAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._set_sequence_time(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._set_sequence_timeAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._set_settle_time(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._set_settle_timeAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._start">
            <summary>Start subscriptions to head sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._startAsync">
            <summary>Start subscriptions to head sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._start_d_hold_timer">
            <summary>Starts a timer that waits for the hold period to evaluate if there is a        valid hold sequence</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._start_d_hold_timerAsync">
            <summary>Starts a timer that waits for the hold period to evaluate if there is a        valid hold sequence</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._start_e_seq_timer">
            <summary>Starts a timer that determines if events in a sequence happen soon        enough for them to be considered in teh current sequence.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._start_e_seq_timerAsync">
            <summary>Starts a timer that determines if events in a sequence happen soon        enough for them to be considered in teh current sequence.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._start_e_sim_timer">
            <summary>Starts timer that waits for a setteling time before reading the sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._start_e_sim_timerAsync">
            <summary>Starts timer that waits for a setteling time before reading the sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._stop">
            <summary>Unsubscribe from head sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._stopAsync">
            <summary>Unsubscribe from head sensors</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._sync_preferences">
            <summary>Sync with preferences. This includes: Settle Time, Hold Time and Sequence Time</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._sync_preferencesAsync">
            <summary>Sync with preferences. This includes: Settle Time, Hold Time and Sequence Time</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._validate_sequence(System.Object)">
            <summary>Validate a requested gesture sequence</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture._validate_sequenceAsync(System.Object)">
            <summary>Validate a requested gesture sequence</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.CreateGesture(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Define touch gesture.        :param sensor_sequence: List of strings that represent the        sequence of the desired gesture. For example, SingleFront        would be the following: ['000', '100', '000']. NOTE: All        sequences must start with '000' and all non-hold sequences        must end with '000'. Hold gestures should end with the touch        sequence you will be holding. For example, a SingleFrontHold        would be the following: ['000', '100'].        :returns: If sequence is valid, the name of gesture to listen        for, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.CreateGestureAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Define touch gesture.        :param sensor_sequence: List of strings that represent the        sequence of the desired gesture. For example, SingleFront        would be the following: ['000', '100', '000']. NOTE: All        sequences must start with '000' and all non-hold sequences        must end with '000'. Hold gestures should end with the touch        sequence you will be holding. For example, a SingleFrontHold        would be the following: ['000', '100'].        :returns: If sequence is valid, the name of gesture to listen        for, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.CreateGesture(System.String)">
            <summary>Define touch gesture.        :param sensor_sequence: Comma-separated string that represents        the sequence of the desired gesture. For example, SingleFront        would be the following: &quot;000,100,000&quot;. NOTE: All sequences        must start with '000' and all non-hold sequences must end with        '000'. Hold gestures should end with the touch sequence you        will be holding. For example, a SingleFrontHold would be the        following: &quot;000,100&quot;.        :returns: If sequence is valid, the name of gesture to listen        for, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.CreateGestureAsync(System.String)">
            <summary>Define touch gesture.        :param sensor_sequence: Comma-separated string that represents        the sequence of the desired gesture. For example, SingleFront        would be the following: &quot;000,100,000&quot;. NOTE: All sequences        must start with '000' and all non-hold sequences must end with        '000'. Hold gestures should end with the touch sequence you        will be holding. For example, a SingleFrontHold would be the        following: &quot;000,100&quot;.        :returns: If sequence is valid, the name of gesture to listen        for, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.GetGesture(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Get the sequence associated with a gesture name        :param sequence: Sequence you want the gesture name of        :returns: Sequence (as list of strings) if it exists, None otherwise</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.GetGestureAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Get the sequence associated with a gesture name        :param sequence: Sequence you want the gesture name of        :returns: Sequence (as list of strings) if it exists, None otherwise</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.GetGesture(System.String)">
            <summary>Get the sequence associated with a gesture name        :param sequence: Sequence you want the gesture name of        :returns: Sequence (as list of strings) if it exists, None otherwise</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.GetGestureAsync(System.String)">
            <summary>Get the sequence associated with a gesture name        :param sequence: Sequence you want the gesture name of        :returns: Sequence (as list of strings) if it exists, None otherwise</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.GetGestures">
            <summary>Get all gestures that have been defined in the system        :returns: Dictionary (Map&lt;String, List&lt;String&gt;&gt;) of all gestures</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.GetGesturesAsync">
            <summary>Get all gestures that have been defined in the system        :returns: Dictionary (Map&lt;String, List&lt;String&gt;&gt;) of all gestures</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.GetSequence(System.String)">
            <summary>Get the sequence associated with a gesture name        :param gesture_name: Name of gesture you want the sequence of        :returns: Sequence (as list of strings) if it exists, None otherwise        </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.GetSequenceAsync(System.String)">
            <summary>Get the sequence associated with a gesture name        :param gesture_name: Name of gesture you want the sequence of        :returns: Sequence (as list of strings) if it exists, None otherwise        </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetHoldTime(System.Single)">
            <summary>Set length of hold time.        :param hold_time: Desired hold time, in seconds (Default: 0.8s)        :returns: True if hold time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetHoldTimeAsync(System.Single)">
            <summary>Set length of hold time.        :param hold_time: Desired hold time, in seconds (Default: 0.8s)        :returns: True if hold time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetHoldTime(System.String)">
            <summary>Set length of hold time.        :param hold_time: Desired hold time, in seconds (Default: 0.8s)        :returns: True if hold time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetHoldTimeAsync(System.String)">
            <summary>Set length of hold time.        :param hold_time: Desired hold time, in seconds (Default: 0.8s)        :returns: True if hold time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetSequenceTime(System.Single)">
            <summary>Update length of sequence time.        :param sequence_time: Desired sequence time, in seconds (Default: 0.2s)        :returns: True if sequence time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetSequenceTimeAsync(System.Single)">
            <summary>Update length of sequence time.        :param sequence_time: Desired sequence time, in seconds (Default: 0.2s)        :returns: True if sequence time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetSequenceTime(System.String)">
            <summary>Set length of sequence time.        :param sequence_time: Desired sequence time, in seconds (Default: 0.2s)        :returns: True if sequence time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetSequenceTimeAsync(System.String)">
            <summary>Set length of sequence time.        :param sequence_time: Desired sequence time, in seconds (Default: 0.2s)        :returns: True if sequence time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetSettleTime(System.Single)">
            <summary>Update length of settling time.        :param settle_time: Desired settling time, in seconds (Default: 0.04s)        :returns: True if settle time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetSettleTimeAsync(System.Single)">
            <summary>Update length of settling time.        :param settle_time: Desired settling time, in seconds (Default: 0.04s)        :returns: True if settle time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetSettleTime(System.String)">
            <summary>Update length of settling time.        :param settle_time: Desired settling time, in seconds (Default: 0.04s)        :returns: True if settle time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTactileGesture.SetSettleTimeAsync(System.String)">
            <summary>Update length of settling time.        :param settle_time: Desired settling time, in seconds (Default: 0.04s)        :returns: True if settle time successfully updated, RuntimeError otherwise.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALTouch">
            <summary>This module is dedicated to inform if the robot is touched [joints or button]</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTouch.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTouch.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALTouch.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALTouch.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._setTouchConfig(System.Object)">
            <summary>Internal Use.</summary>
            <param name="arg0_config">Internal: An array of ALValues [i][0]: name, [i][1]: value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._setTouchConfigAsync(System.Object)">
            <summary>Internal Use.</summary>
            <param name="arg0_config">Internal: An array of ALValues [i][0]: name, [i][1]: value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetSensorList">
            <summary>Return the list of sensors managed by touch module and return by TouchChangedevent.</summary>
            <returns>A vector&lt;std::string&gt; of sensor names manage by ALTouch.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetSensorListAsync">
            <summary>Return the list of sensors managed by touch module and return by TouchChangedevent.</summary>
            <returns>A vector&lt;std::string&gt; of sensor names manage by ALTouch.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetStatus">
            <summary>Return the current status of all Touch groups.</summary>
            <returns>A vector of pair [name, bool], similar to TouchChanged event.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch.GetStatusAsync">
            <summary>Return the current status of all Touch groups.</summary>
            <returns>A vector of pair [name, bool], similar to TouchChanged event.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._createGroup(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Internal Use.</summary>
            <param name="arg0_groupName">The name of the group to create.</param>
            <param name="arg1_jointNames">A vector of joint and actuator names constituting the group.</param>
            <returns>true if the group was created, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._createGroupAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Internal Use.</summary>
            <param name="arg0_groupName">The name of the group to create.</param>
            <param name="arg1_jointNames">A vector of joint and actuator names constituting the group.</param>
            <returns>true if the group was created, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._deleteGroup(System.String)">
            <summary>Internal Use.</summary>
            <param name="arg0_groupName">The name of the group to delete</param>
            <returns>true if the group was deleted, false otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._deleteGroupAsync(System.String)">
            <summary>Internal Use.</summary>
            <param name="arg0_groupName">The name of the group to delete</param>
            <returns>true if the group was deleted, false otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._getGroupList">
            <summary>Internal Use.</summary>
            <returns>The list of groups used for sending touch events</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._getGroupListAsync">
            <summary>Internal Use.</summary>
            <returns>The list of groups used for sending touch events</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._getDetectionTypeName(System.Int32)">
            <summary>Internal Use.</summary>
            <param name="arg0_type">Touch detection type enum</param>
            <returns>The name of a touch detection type</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._getDetectionTypeNameAsync(System.Int32)">
            <summary>Internal Use.</summary>
            <param name="arg0_type">Touch detection type enum</param>
            <returns>The name of a touch detection type</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._triggerMotionReflex(System.String)">
            <summary>Internal Use.</summary>
            <param name="arg0_groupName">The name of the touched group</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._triggerMotionReflexAsync(System.String)">
            <summary>Internal Use.</summary>
            <param name="arg0_groupName">The name of the touched group</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._notifyTouchStopped(System.String)">
            <summary>Internal Use.</summary>
            <param name="arg0_groupName">The name of the touched group</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._notifyTouchStoppedAsync(System.String)">
            <summary>Internal Use.</summary>
            <param name="arg0_groupName">The name of the touched group</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._robotFallingCallback(System.String,System.Object,System.Object)">
            <summary>Callback when robot is falling</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._robotFallingCallbackAsync(System.String,System.Object,System.Object)">
            <summary>Callback when robot is falling</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._robotFallenCallback(System.String,System.Object,System.Object)">
            <summary>Callback when robot has fallen</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._robotFallenCallbackAsync(System.String,System.Object,System.Object)">
            <summary>Callback when robot has fallen</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._diagnosisCallback(System.String,System.Object,System.Object)">
            <summary>Callback when diagnosis change.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._diagnosisCallbackAsync(System.String,System.Object,System.Object)">
            <summary>Callback when diagnosis change.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._temperatureCallback(System.String,System.Object,System.Object)">
            <summary>Callback when temperature diagnosis change.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALTouch._temperatureCallbackAsync(System.String,System.Object,System.Object)">
            <summary>Callback when temperature diagnosis change.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALBacklightingDetection">
            <summary>This module enables to check if the image of the camera is backlit</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBacklightingDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBacklightingDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALBacklightingDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetFrameRate(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetFrameRateAsync(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetFrameRate(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetFrameRateAsync(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetParameter(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.SetParameterAsync(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection._run">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBacklightingDetection._runAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALBarcodeReader">
            <summary>This module allows the search for barcodes in the camera image.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBarcodeReader.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBarcodeReader.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALBarcodeReader.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALBarcodeReader.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SetFrameRate(System.Int32)">
            <summary>Sets extractor framerate</summary>
            <param name="arg0_value">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SetFrameRateAsync(System.Int32)">
            <summary>Sets extractor framerate</summary>
            <param name="arg0_value">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALBarcodeReader.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALCloseObjectDetection">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALCloseObjectDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALCloseObjectDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALColorBlobDetection">
            <summary>ALColorBlobDetection is a module which can detect blobs of a certain color.  The output value is written in ALMemory has a Tracker microEvent. </summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALColorBlobDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALColorBlobDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALColorBlobDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetFrameRate(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetFrameRateAsync(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetFrameRate(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetFrameRateAsync(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetParameter(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetParameterAsync(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection._run">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection._runAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Color parameter setting</summary>
            <param name="arg0_r">The R component in RGB of the color to find</param>
            <param name="arg1_g">The G component in RGB of the color to find</param>
            <param name="arg2_b">The B component in RGB of the color to find</param>
            <param name="arg3_colorThres">The color threshold</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetColorAsync(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Color parameter setting</summary>
            <param name="arg0_r">The R component in RGB of the color to find</param>
            <param name="arg1_g">The G component in RGB of the color to find</param>
            <param name="arg2_b">The B component in RGB of the color to find</param>
            <param name="arg3_colorThres">The color threshold</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetObjectProperties(System.Int32,System.Single)">
            <summary>Object parameter setting</summary>
            <param name="arg0_minSize">The minimum size of the cluster to find</param>
            <param name="arg1_span">The span of the object in meters</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetObjectPropertiesAsync(System.Int32,System.Single)">
            <summary>Object parameter setting</summary>
            <param name="arg0_minSize">The minimum size of the cluster to find</param>
            <param name="arg1_span">The span of the object in meters</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetObjectProperties(System.Int32,System.Single,System.String)">
            <summary>Object parameter setting</summary>
            <param name="arg0_minSize">The minimum size of the cluster to find</param>
            <param name="arg1_span">The span of the object in meters</param>
            <param name="arg2_shape">The shape of the object</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetObjectPropertiesAsync(System.Int32,System.Single,System.String)">
            <summary>Object parameter setting</summary>
            <param name="arg0_minSize">The minimum size of the cluster to find</param>
            <param name="arg1_span">The span of the object in meters</param>
            <param name="arg2_shape">The shape of the object</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetCircle">
            <summary>Send back the x,y,radius of the circle if any</summary>
            <returns>The circle as x,y,radius in image relative coordinates (x,radius divided by rows and y by cols)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetCircleAsync">
            <summary>Send back the x,y,radius of the circle if any</summary>
            <returns>The circle as x,y,radius in image relative coordinates (x,radius divided by rows and y by cols)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetAutoExposure">
            <summary>Get the camera auto exposure mode</summary>
            <returns>A flag saying the exposure is auto or not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.GetAutoExposureAsync">
            <summary>Get the camera auto exposure mode</summary>
            <returns>A flag saying the exposure is auto or not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetAutoExposure(System.Boolean)">
            <summary>Set the camera auto exposure to on</summary>
            <param name="arg0_mode">Whether the exposure is auto or not</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALColorBlobDetection.SetAutoExposureAsync(System.Boolean)">
            <summary>Set the camera auto exposure to on</summary>
            <param name="arg0_mode">Whether the exposure is auto or not</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALDarknessDetection">
            <summary>This module enables to detect if the robot is in a dark environment</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDarknessDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDarknessDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALDarknessDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALDarknessDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetFrameRate(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetFrameRateAsync(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetFrameRate(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetFrameRateAsync(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetParameter(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetParameterAsync(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection._run">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection._runAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetDarknessThreshold(System.Int32)">
            <summary>Enables to change the DarknessThreshold for isItDark</summary>
            <param name="arg0_threshold">New darkness threshold (between 0 and 100)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.SetDarknessThresholdAsync(System.Int32)">
            <summary>Enables to change the DarknessThreshold for isItDark</summary>
            <param name="arg0_threshold">New darkness threshold (between 0 and 100)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetDarknessThreshold">
            <summary>Returns the current DarknessThreshold for isItDark</summary>
            <returns>Current darkness threshold value</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALDarknessDetection.GetDarknessThresholdAsync">
            <summary>Returns the current DarknessThreshold for isItDark</summary>
            <returns>Current darkness threshold value</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALLandMarkDetection">
            <summary>ALLandMarkDetection is a module which detects and recognizes Naomarks. The output value is written in ALMemory in the LandmarkDetected variable. It contains an array of tags, with the following format:  [ [timestamp_seconds, timestamp_microseconds], [mark_info_0, mark_info_1, .. , mark_info_N] ]  with as many mark_info tags as marks currently detected. mark_info_x = [ [shape, alpha, beta, sizeX, sizeY, heading], [markID] ]. - alpha and beta represent the Naomark's location in terms of camera angles - sizeX and sizeY are the mark's size in camera angles - the heading angle describes how the Naomark is oriented about the vertical axis with regards to Nao's head. - Mark ID is the number written on the naomark and which corresponds to its pattern. </summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLandMarkDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLandMarkDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALLandMarkDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetFrameRate(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetFrameRateAsync(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetFrameRate(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetFrameRateAsync(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetParameter(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.SetParameterAsync(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection._run">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLandMarkDetection._runAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALLocalization">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLocalization.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLocalization.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALLocalization.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALLocalization.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetMessageFromErrorCode(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetMessageFromErrorCodeAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.StopAll">
            <summary>Stop all robot movements.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.StopAllAsync">
            <summary>Stop all robot movements.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._safetyStop">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._safetyStopAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.LearnHome">
            <summary>Learn the robot home.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.LearnHomeAsync">
            <summary>Learn the robot home.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsInCurrentHome">
            <summary>Is the robot in its home?</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsInCurrentHomeAsync">
            <summary>Is the robot in its home?</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetCurrentPanoramaDescriptor">
            <summary>Get some information about the current panorama.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetCurrentPanoramaDescriptorAsync">
            <summary>Get some information about the current panorama.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetFrame(System.Int32,System.String)">
            <summary>Get a frame buffer.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetFrameAsync(System.Int32,System.String)">
            <summary>Get a frame buffer.</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Clear(System.String)">
            <summary>Delete all panoramas in a directory.</summary>
            <param name="arg0_pDirectory">Name of the directory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.ClearAsync(System.String)">
            <summary>Delete all panoramas in a directory.</summary>
            <param name="arg0_pDirectory">Name of the directory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Load(System.String)">
            <summary>Loads panoramas from a directory in the default one.</summary>
            <param name="arg0_pDirectory">Name of the directory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.LoadAsync(System.String)">
            <summary>Loads panoramas from a directory in the default one.</summary>
            <param name="arg0_pDirectory">Name of the directory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.Save(System.String)">
            <summary>Save the temporary panoramas in a directory from the default one.</summary>
            <param name="arg0_pDirectory">Name of the directory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.SaveAsync(System.String)">
            <summary>Save the temporary panoramas in a directory from the default one.</summary>
            <param name="arg0_pDirectory">Name of the directory</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsRelocalizationRequired">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsRelocalizationRequiredAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetDriftPercentages">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetDriftPercentagesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsDataAvailable">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsDataAvailableAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetRobotPosition">
            <summary>Get the robot position in world navigation.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetRobotPositionAsync">
            <summary>Get the robot position in world navigation.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetRobotPosition(System.Boolean)">
            <summary>Get the robot position in world navigation.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetRobotPositionAsync(System.Boolean)">
            <summary>Get the robot position in world navigation.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetRobotOrientation(System.Boolean)">
            <summary>Get the robot orientation.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetRobotOrientationAsync(System.Boolean)">
            <summary>Get the robot orientation.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetRobotOrientation">
            <summary>Get the robot orientation.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GetRobotOrientationAsync">
            <summary>Get the robot orientation.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsInGivenZone(System.Single,System.Single,System.Single,System.Single)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.IsInGivenZoneAsync(System.Single,System.Single,System.Single,System.Single)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._launchLocalization">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._launchLocalizationAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GoToHome">
            <summary>Go to the robot home.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GoToHomeAsync">
            <summary>Go to the robot home.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GoToPosition(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Go to a given position.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization.GoToPositionAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Go to a given position.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._getSavingDirectories">
            <summary>Return the list of saving directories</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._getSavingDirectoriesAsync">
            <summary>Return the list of saving directories</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._getLoadedDirectory">
            <summary>Return the current loaded directory name. Will be empty if there is no active panorama or if it has not been saved to a directory yet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._getLoadedDirectoryAsync">
            <summary>Return the current loaded directory name. Will be empty if there is no active panorama or if it has not been saved to a directory yet</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._handlePush">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALLocalization._handlePushAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALMovementDetection">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMovementDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMovementDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALMovementDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALMovementDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetFrameRate(System.Int32)">
            <summary>Sets extractor framerate</summary>
            <param name="arg0_value">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetFrameRateAsync(System.Int32)">
            <summary>Sets extractor framerate</summary>
            <param name="arg0_value">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.ResetDetection">
            <summary>Enables to reset the movement detection when desired</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.ResetDetectionAsync">
            <summary>Enables to reset the movement detection when desired</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetColorSensitivity(System.Single)">
            <summary>Sets the value of the color sensitivity used for the 2D detection  of moving pixels in the image.</summary>
            <param name="arg0_sensitivity">New color sensitivity (between 0 and 1)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetColorSensitivityAsync(System.Single)">
            <summary>Sets the value of the color sensitivity used for the 2D detection  of moving pixels in the image.</summary>
            <param name="arg0_sensitivity">New color sensitivity (between 0 and 1)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetColorSensitivity">
            <summary>Gets the value of the color sensitivity</summary>
            <returns>Current color sensitivity (between 0 and 1)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetColorSensitivityAsync">
            <summary>Gets the value of the color sensitivity</summary>
            <returns>Current color sensitivity (between 0 and 1)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetDepthSensitivity(System.Single)">
            <summary>Sets the value of the depth sensitivity (in meters) used for the detection 3D of moving pixels in the image.</summary>
            <param name="arg0_sensitivity">New depth sensitivity (in meters)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.SetDepthSensitivityAsync(System.Single)">
            <summary>Sets the value of the depth sensitivity (in meters) used for the detection 3D of moving pixels in the image.</summary>
            <param name="arg0_sensitivity">New depth sensitivity (in meters)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetDepthSensitivity">
            <summary>gets the value of the depth sensitivity (in meters)</summary>
            <returns>Current depth sensitivity (in meters)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection.GetDepthSensitivityAsync">
            <summary>gets the value of the depth sensitivity (in meters)</summary>
            <returns>Current depth sensitivity (in meters)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection._setDetectionMode(System.String)">
            <summary>Sets the mode (2D/3D) used for the tracking.</summary>
            <param name="arg0_mode">Mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection._setDetectionModeAsync(System.String)">
            <summary>Sets the mode (2D/3D) used for the tracking.</summary>
            <param name="arg0_mode">Mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection._getDetectionMode">
            <summary>Gets the mode (2D/3D) used for the tracking.</summary>
            <returns>Current mode.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALMovementDetection._getDetectionModeAsync">
            <summary>Gets the mode (2D/3D) used for the tracking.</summary>
            <returns>Current mode.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALPhotoCapture">
            <summary>This module provides methods to take pictures and store them on disk.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPhotoCapture.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPhotoCapture.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALPhotoCapture.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALPhotoCapture.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetHalfPressEnabled(System.Boolean)">
            <summary>Enables or disables the half-press mode.</summary>
            <param name="arg0_enable">True to enable, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetHalfPressEnabledAsync(System.Boolean)">
            <summary>Enables or disables the half-press mode.</summary>
            <param name="arg0_enable">True to enable, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.HalfPress">
            <summary>Manually (un)subscribes to ALVideoDevice.</summary>
            <returns>True if eveything went well, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.HalfPressAsync">
            <summary>Manually (un)subscribes to ALVideoDevice.</summary>
            <returns>True if eveything went well, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TakePicture(System.String,System.String)">
            <summary>Takes one picture.</summary>
            <param name="arg0_folderPath">Folder where the picture is saved.</param>
            <param name="arg1_fileName">Filename used to save the picture.</param>
            <returns>Full file name of the picture saved on the disk: [filename]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TakePictureAsync(System.String,System.String)">
            <summary>Takes one picture.</summary>
            <param name="arg0_folderPath">Folder where the picture is saved.</param>
            <param name="arg1_fileName">Filename used to save the picture.</param>
            <returns>Full file name of the picture saved on the disk: [filename]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TakePicture(System.String,System.String,System.Boolean)">
            <summary>Takes one picture.</summary>
            <param name="arg0_folderPath">Folder where the picture is saved.</param>
            <param name="arg1_fileName">Filename used to save the picture.</param>
            <param name="arg2_overwrite">If false and the filename already exists, an error is thrown.</param>
            <returns>Full file name of the picture saved on the disk: [filename]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TakePictureAsync(System.String,System.String,System.Boolean)">
            <summary>Takes one picture.</summary>
            <param name="arg0_folderPath">Folder where the picture is saved.</param>
            <param name="arg1_fileName">Filename used to save the picture.</param>
            <param name="arg2_overwrite">If false and the filename already exists, an error is thrown.</param>
            <returns>Full file name of the picture saved on the disk: [filename]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TakePictures(System.Int32,System.String,System.String)">
            <summary>Takes several pictures as quickly as possible</summary>
            <param name="arg0_numberOfPictures">Number of pictures to take</param>
            <param name="arg1_folderPath">Folder where the pictures are saved.</param>
            <param name="arg2_fileName">Filename used to save the pictures.</param>
            <returns>List of all saved files: [[filename1, filename2...]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TakePicturesAsync(System.Int32,System.String,System.String)">
            <summary>Takes several pictures as quickly as possible</summary>
            <param name="arg0_numberOfPictures">Number of pictures to take</param>
            <param name="arg1_folderPath">Folder where the pictures are saved.</param>
            <param name="arg2_fileName">Filename used to save the pictures.</param>
            <returns>List of all saved files: [[filename1, filename2...]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TakePictures(System.Int32,System.String,System.String,System.Boolean)">
            <summary>Takes several pictures as quickly as possible</summary>
            <param name="arg0_numberOfPictures">Number of pictures to take</param>
            <param name="arg1_folderPath">Folder where the pictures are saved.</param>
            <param name="arg2_fileName">Filename used to save the pictures.</param>
            <param name="arg3_overwrite">If false and the filename already exists, an error is thrown.</param>
            <returns>List of all saved files: [[filename1, filename2...]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.TakePicturesAsync(System.Int32,System.String,System.String,System.Boolean)">
            <summary>Takes several pictures as quickly as possible</summary>
            <param name="arg0_numberOfPictures">Number of pictures to take</param>
            <param name="arg1_folderPath">Folder where the pictures are saved.</param>
            <param name="arg2_fileName">Filename used to save the pictures.</param>
            <param name="arg3_overwrite">If false and the filename already exists, an error is thrown.</param>
            <returns>List of all saved files: [[filename1, filename2...]]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetCameraID(System.Int32)">
            <summary>Sets camera ID.</summary>
            <param name="arg0_cameraID">ID of the camera to use.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetCameraIDAsync(System.Int32)">
            <summary>Sets camera ID.</summary>
            <param name="arg0_cameraID">ID of the camera to use.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetResolution(System.Int32)">
            <summary>Sets resolution.</summary>
            <param name="arg0_resolution">New frame resolution.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetResolutionAsync(System.Int32)">
            <summary>Sets resolution.</summary>
            <param name="arg0_resolution">New frame resolution.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetColorSpace(System.Int32)">
            <summary>Sets color space.</summary>
            <param name="arg0_colorSpace">New color space.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetColorSpaceAsync(System.Int32)">
            <summary>Sets color space.</summary>
            <param name="arg0_colorSpace">New color space.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetCaptureInterval(System.Int32)">
            <summary>Sets delay between two captures.</summary>
            <param name="arg0_captureInterval">New delay (in ms) between two pictures.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetCaptureIntervalAsync(System.Int32)">
            <summary>Sets delay between two captures.</summary>
            <param name="arg0_captureInterval">New delay (in ms) between two pictures.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetPictureFormat(System.String)">
            <summary>Sets picture extension.</summary>
            <param name="arg0_pictureFormat">New extension used to save pictures.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.SetPictureFormatAsync(System.String)">
            <summary>Sets picture extension.</summary>
            <param name="arg0_pictureFormat">New extension used to save pictures.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetCameraID">
            <summary>Returns current camera ID.</summary>
            <returns>Current camera ID.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetCameraIDAsync">
            <summary>Returns current camera ID.</summary>
            <returns>Current camera ID.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetResolution">
            <summary>Returns current resolution.</summary>
            <returns>Current frame resolution.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetResolutionAsync">
            <summary>Returns current resolution.</summary>
            <returns>Current frame resolution.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetColorSpace">
            <summary>Returns current color space.</summary>
            <returns>Current color space.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetColorSpaceAsync">
            <summary>Returns current color space.</summary>
            <returns>Current color space.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetCaptureInterval">
            <summary>Returns current delay between captures.</summary>
            <returns>Current delay (in ms) between two pictures.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetCaptureIntervalAsync">
            <summary>Returns current delay between captures.</summary>
            <returns>Current delay (in ms) between two pictures.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetPictureFormat">
            <summary>Returns current picture format.</summary>
            <returns>Current picture format.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.GetPictureFormatAsync">
            <summary>Returns current picture format.</summary>
            <returns>Current picture format.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsHalfPressEnabled">
            <summary>Returns True if the &quot;half press&quot; mode is on.</summary>
            <returns>True or False.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsHalfPressEnabledAsync">
            <summary>Returns True if the &quot;half press&quot; mode is on.</summary>
            <returns>True or False.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsHalfPressed">
            <summary>Returns True if the &quot;half press&quot; mode is on.</summary>
            <returns>True or False.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALPhotoCapture.IsHalfPressedAsync">
            <summary>Returns True if the &quot;half press&quot; mode is on.</summary>
            <returns>True or False.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALRedBallDetection">
            <summary>ALRedBallDetection is a module which can detect red ball based on color saturation.  The output value is written in ALMemory in the redBallDetected microEvent.   It contains an array of tags, with the following format.  [ [time_info], [ball_info], [camera_info_torsoFrame] [camera_info_robotFrame] [camera_id] ]    Tag time_info = [timestamp_seconds, timestamp_microseconds]  The time Stamp when image was taken.   Tag ball_info = [ballAngleWz, ballAngleWy, ballSizeInRadianX, ballSizeInRadianY]  ballAngleWz and ballAngleWy are the angular coordinates in camera angles  (in radians), corresponding to the direct (counter-clokwise) rotations along  the Z axis and the Y axis.  ballSizeInRadianX and ballSizeInRadianY correspond to the size of the ball in camera angles.   Tag camera_info_torsoFrame = [x, y, z, wx, wy, wz] in FRAME_TORSO (see motion documentation)  Tag camera_info_robotFrame = [x, y, z, wx, wy, wz] in FRAME_ROBOT (see motion documentation)  Tag camera_id = id of the active camera (see videodevice documentation)</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRedBallDetection.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRedBallDetection.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALRedBallDetection.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALRedBallDetection.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection._run">
            <summary>Main method.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALRedBallDetection._runAsync">
            <summary>Main method.</summary>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALSegmentation3D">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSegmentation3D.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSegmentation3D.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALSegmentation3D.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALSegmentation3D.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_status">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetFrameRate(System.Int32)">
            <summary>Sets extractor framerate</summary>
            <param name="arg0_value">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetFrameRateAsync(System.Int32)">
            <summary>Sets extractor framerate</summary>
            <param name="arg0_value">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetTopOfBlob(System.Single,System.Int32,System.Boolean)">
            <summary>Returns the position of the top of the blob most in the center of the depth image, at the given distance, in the given frame.</summary>
            <param name="arg0_distance">Estimation of the distance (in meters) of the blob or -1 for the nearest blob</param>
            <param name="arg1_frame">Frame in which to return the position (-1: FRAME_IMAGE, 0: FRAME_TORSO, 1: FRAME_WORLD, 2: FRAME_ROBOT</param>
            <param name="arg2_applyVerticalOffset">True to apply the VerticalOffset when computing the position, False otherwise</param>
            <returns>Position of the top of the corresponding blob (if one is found) in the given frame (Format: [yaw,pitch,distance] in FRAME_IMAGE, [x,y,z] in the other frame).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetTopOfBlobAsync(System.Single,System.Int32,System.Boolean)">
            <summary>Returns the position of the top of the blob most in the center of the depth image, at the given distance, in the given frame.</summary>
            <param name="arg0_distance">Estimation of the distance (in meters) of the blob or -1 for the nearest blob</param>
            <param name="arg1_frame">Frame in which to return the position (-1: FRAME_IMAGE, 0: FRAME_TORSO, 1: FRAME_WORLD, 2: FRAME_ROBOT</param>
            <param name="arg2_applyVerticalOffset">True to apply the VerticalOffset when computing the position, False otherwise</param>
            <returns>Position of the top of the corresponding blob (if one is found) in the given frame (Format: [yaw,pitch,distance] in FRAME_IMAGE, [x,y,z] in the other frame).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetBlobTrackingEnabled(System.Boolean)">
            <summary>Turn the blob tracker on or off. When the blob tracker is running, events containing the position of the top of the tracked blob are raised.</summary>
            <param name="arg0_status">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetBlobTrackingEnabledAsync(System.Boolean)">
            <summary>Turn the blob tracker on or off. When the blob tracker is running, events containing the position of the top of the tracked blob are raised.</summary>
            <param name="arg0_status">True to turn it on, False to turn it off.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsBlobTrackingEnabled">
            <summary>Gets the current status of the blob tracker. When the blob tracker is running, events containing the position of the top of the tracked blob are raised.</summary>
            <returns>True if the blob tracker is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.IsBlobTrackingEnabledAsync">
            <summary>Gets the current status of the blob tracker. When the blob tracker is running, events containing the position of the top of the tracked blob are raised.</summary>
            <returns>True if the blob tracker is enabled, False otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetBlobTrackingDistance(System.Single)">
            <summary>Sets the distance (in meters) for the blob tracker</summary>
            <param name="arg0_distance">New value (in meters)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetBlobTrackingDistanceAsync(System.Single)">
            <summary>Sets the distance (in meters) for the blob tracker</summary>
            <param name="arg0_distance">New value (in meters)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetBlobTrackingDistance">
            <summary>Gets the distance (in meters) for the blob tracker</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetBlobTrackingDistanceAsync">
            <summary>Gets the distance (in meters) for the blob tracker</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetVerticalOffset(System.Single)">
            <summary>Sets the value of vertical offset (in meters) for the blob tracker</summary>
            <param name="arg0_value">New vertical offset (in meters), added if positive, substracted if negative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetVerticalOffsetAsync(System.Single)">
            <summary>Sets the value of vertical offset (in meters) for the blob tracker</summary>
            <param name="arg0_value">New vertical offset (in meters), added if positive, substracted if negative</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetVerticalOffset">
            <summary>Sets the value of vertical offset (in meters) for the blob tracker</summary>
            <returns>Current vertical offset of the blob tracker</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetVerticalOffsetAsync">
            <summary>Sets the value of vertical offset (in meters) for the blob tracker</summary>
            <returns>Current vertical offset of the blob tracker</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetDeltaDepthThreshold(System.Single)">
            <summary>Sets the value of the depth threshold (in meters) used for the segmentation</summary>
            <param name="arg0_value">New depth threshold (in meters) for the segmentation</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.SetDeltaDepthThresholdAsync(System.Single)">
            <summary>Sets the value of the depth threshold (in meters) used for the segmentation</summary>
            <param name="arg0_value">New depth threshold (in meters) for the segmentation</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetDeltaDepthThreshold">
            <summary>Gets the value of the depth threshold (in meters) used for the segmentation</summary>
            <returns>Current depth threshold (in meters)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALSegmentation3D.GetDeltaDepthThresholdAsync">
            <summary>Gets the value of the depth threshold (in meters) used for the segmentation</summary>
            <returns>Current depth threshold (in meters)</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALVideoDevice">
            <summary>ALVideoDevice, formerly called Video Input systemis architectured in order to provide every module related to vision, called vision module, a direct access to raw images from video source, or an access to images transformed in the requested format.  Extension name of the methods providing images depends on wether modules are local (dynamic library) or remote (executable).</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVideoDevice.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVideoDevice.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVideoDevice.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALVideoDevice.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SubscribeCamera(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_cameraIndex">Camera requested.</param>
            <param name="arg2_resolution">Resolution requested.{0=kQQVGA, 1=kQVGA, 2=kVGA, 3=k4VGA}</param>
            <param name="arg3_colorSpace">Colorspace requested.{0=kYuv, 9=kYUV422, 10=kYUV, 11=kRGB, 12=kHSY, 13=kBGR}</param>
            <param name="arg4_fps">Fps (frames per second) requested.{5, 10, 15, 30}</param>
            <returns>Name under which the vision module is known from ALVideoDevice</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SubscribeCameraAsync(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_cameraIndex">Camera requested.</param>
            <param name="arg2_resolution">Resolution requested.{0=kQQVGA, 1=kQVGA, 2=kVGA, 3=k4VGA}</param>
            <param name="arg3_colorSpace">Colorspace requested.{0=kYuv, 9=kYUV422, 10=kYUV, 11=kRGB, 12=kHSY, 13=kBGR}</param>
            <param name="arg4_fps">Fps (frames per second) requested.{5, 10, 15, 30}</param>
            <returns>Name under which the vision module is known from ALVideoDevice</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SubscribeCameras(System.String,System.Object,System.Object,System.Object,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_cameraIndexes">Cameras requested.</param>
            <param name="arg2_resolutions">Resolutions requested.{0=kQQVGA, 1=kQVGA, 2=kVGA, 3=k4VGA}</param>
            <param name="arg3_colorSpaces">Colorspaces requested.{0=kYuv, 9=kYUV422, 10=kYUV, 11=kRGB, 12=kHSY, 13=kBGR}</param>
            <param name="arg4_fps">Fps (frames per second) requested.{5, 10, 15, 30}</param>
            <returns>Name under which the vision module is known from ALVideoDevice</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SubscribeCamerasAsync(System.String,System.Object,System.Object,System.Object,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_cameraIndexes">Cameras requested.</param>
            <param name="arg2_resolutions">Resolutions requested.{0=kQQVGA, 1=kQVGA, 2=kVGA, 3=k4VGA}</param>
            <param name="arg3_colorSpaces">Colorspaces requested.{0=kYuv, 9=kYUV422, 10=kYUV, 11=kRGB, 12=kHSY, 13=kBGR}</param>
            <param name="arg4_fps">Fps (frames per second) requested.{5, 10, 15, 30}</param>
            <returns>Name under which the vision module is known from ALVideoDevice</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Unsubscribe(System.String)">
            <summary></summary>
            <param name="arg0_nameId">Name under which the vision module is known from ALVideoDevice.</param>
            <returns>True if success, false otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.UnsubscribeAsync(System.String)">
            <summary></summary>
            <param name="arg0_nameId">Name under which the vision module is known from ALVideoDevice.</param>
            <returns>True if success, false otherwise</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetSubscribers">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetSubscribersAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraIndexes">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraIndexesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetActiveCamera">
            <summary>Tells which camera is the default one</summary>
            <returns> 0: top camera - 1: bottom camera</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetActiveCameraAsync">
            <summary>Tells which camera is the default one</summary>
            <returns> 0: top camera - 1: bottom camera</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetActiveCamera(System.Int32)">
            <summary>Set the active camera</summary>
            <param name="arg0_activeCamera"> 0: top camera - 1: bottom camera</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetActiveCameraAsync(System.Int32)">
            <summary>Set the active camera</summary>
            <param name="arg0_activeCamera"> 0: top camera - 1: bottom camera</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraModel(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns> 1(kOV7670): VGA camera - 2(kMT9M114): HD camera</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraModelAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns> 1(kOV7670): VGA camera - 2(kMT9M114): HD camera</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraName(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns>CameraTop - CameraBottom - CameraDepth</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraNameAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns>CameraTop - CameraBottom - CameraDepth</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetFrameRate(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetFrameRateAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetResolution(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetResolutionAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetColorSpace(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetColorSpaceAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetHorizontalFOV(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetHorizontalFOVAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVerticalFOV(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVerticalFOVAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParameter(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParameterAsync(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParameterRange(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParameterRangeAsync(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParameterInfo(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParameterInfoAsync(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParameter(System.Int32,System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <param name="arg2_value">value requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParameterAsync(System.Int32,System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <param name="arg2_value">value requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParameterToDefault(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParameterToDefaultAsync(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetAllParametersToDefault(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetAllParametersToDefaultAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.OpenCamera(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.OpenCameraAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.CloseCamera(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.CloseCameraAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsCameraOpen(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsCameraOpenAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StartCamera(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StartCameraAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopCamera(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopCameraAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsCameraStarted(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsCameraStartedAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ResetCamera(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ResetCameraAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StartFrameGrabber(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StartFrameGrabberAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopFrameGrabber(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopFrameGrabberAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsFrameGrabberOff(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsFrameGrabberOffAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.HasDepthCamera">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.HasDepthCameraAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetFrameRate(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetFrameRateAsync(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetFrameRate(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_frameRate">Frame Rate requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetFrameRateAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_frameRate">Frame Rate requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetActiveCamera(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetActiveCameraAsync(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetActiveCamera(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetActiveCameraAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetResolution(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetResolutionAsync(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetResolution(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_resolution">Resolution requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetResolutionAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_resolution">Resolution requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetColorSpace(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetColorSpaceAsync(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetColorSpace(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_colorSpace">Color Space requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetColorSpaceAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_colorSpace">Color Space requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraParameter(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraParameterAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraParameterRange(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraParameterRangeAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraParameterInfo(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraParameterInfoAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetCameraParameter(System.String,System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <param name="arg2_value">value requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetCameraParameterAsync(System.String,System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <param name="arg2_value">value requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetCameraParameterToDefault(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetCameraParameterToDefaultAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetAllCameraParametersToDefault(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetAllCameraParametersToDefaultAsync(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetDirectRawImageLocal(System.String)">
            <summary>Retrieves the latest image from the video source and returns a pointer to the locked ALImage, with data array pointing directly to raw data. There is no format conversion and no copy of the raw buffer.Warning: When image is not necessary anymore, a call to releaseDirectRawImage() is requested.Warning: When using this mode for several vision module, if they need raw data for more than 25ms check that you have strictly less modules in this mode than the amount of kernel buffers!!Warning: Release all kernel buffers before any action requesting a modification in camera running mode (e.g. resolution, switch between cameras).</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Pointer to the locked image buffer, NULL if error.Warning, image pointer is valid only for C++ dynamic library.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetDirectRawImageLocalAsync(System.String)">
            <summary>Retrieves the latest image from the video source and returns a pointer to the locked ALImage, with data array pointing directly to raw data. There is no format conversion and no copy of the raw buffer.Warning: When image is not necessary anymore, a call to releaseDirectRawImage() is requested.Warning: When using this mode for several vision module, if they need raw data for more than 25ms check that you have strictly less modules in this mode than the amount of kernel buffers!!Warning: Release all kernel buffers before any action requesting a modification in camera running mode (e.g. resolution, switch between cameras).</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Pointer to the locked image buffer, NULL if error.Warning, image pointer is valid only for C++ dynamic library.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetDirectRawImageRemote(System.String)">
            <summary>Fills an ALValue with data coming directly from raw buffer (no format conversion).</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array containing image informations :     [0] : width;    [1] : height;    [2] : number of layers;    [3] : ColorSpace;    [4] : time stamp (highest 32 bits);    [5] : time stamp (lowest 32 bits);    [6] : array of size height * width * nblayers containing image data;    [7] : cameraID;    [8] : left angle;    [9] : top angle;    [10] : right angle;    [11] : bottom angle;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetDirectRawImageRemoteAsync(System.String)">
            <summary>Fills an ALValue with data coming directly from raw buffer (no format conversion).</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array containing image informations :     [0] : width;    [1] : height;    [2] : number of layers;    [3] : ColorSpace;    [4] : time stamp (highest 32 bits);    [5] : time stamp (lowest 32 bits);    [6] : array of size height * width * nblayers containing image data;    [7] : cameraID;    [8] : left angle;    [9] : top angle;    [10] : right angle;    [11] : bottom angle;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ReleaseDirectRawImage(System.String)">
            <summary>Release image buffer locked by getDirectRawImageLocal().</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ReleaseDirectRawImageAsync(System.String)">
            <summary>Release image buffer locked by getDirectRawImageLocal().</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageLocal(System.String)">
            <summary>Applies transformations to the last image from video source and returns a pointer to a locked ALImage.When image is not necessary anymore, a call to releaseImage() is requested.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Pointer of the locked image buffer, NULL if error.Warning, image pointer is valid only for C++ dynamic library.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageLocalAsync(System.String)">
            <summary>Applies transformations to the last image from video source and returns a pointer to a locked ALImage.When image is not necessary anymore, a call to releaseImage() is requested.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Pointer of the locked image buffer, NULL if error.Warning, image pointer is valid only for C++ dynamic library.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageRemote(System.String)">
            <summary>Applies transformations to the last image from video source and fills pFrameOut.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array containing image informations :     [0] : width;    [1] : height;    [2] : number of layers;    [3] : ColorSpace;    [4] : time stamp (highest 32 bits);    [5] : time stamp (lowest 32 bits);    [6] : array of size height * width * nblayers containing image data;    [7] : cameraID;    [8] : left angle;    [9] : top angle;    [10] : right angle;    [11] : bottom angle;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageRemoteAsync(System.String)">
            <summary>Applies transformations to the last image from video source and fills pFrameOut.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array containing image informations :     [0] : width;    [1] : height;    [2] : number of layers;    [3] : ColorSpace;    [4] : time stamp (highest 32 bits);    [5] : time stamp (lowest 32 bits);    [6] : array of size height * width * nblayers containing image data;    [7] : cameraID;    [8] : left angle;    [9] : top angle;    [10] : right angle;    [11] : bottom angle;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ReleaseImage(System.String)">
            <summary>Release image buffer locked by getImageLocal().If G.V.M. had no locked image buffer, does nothing.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ReleaseImageAsync(System.String)">
            <summary>Release image buffer locked by getImageLocal().If G.V.M. had no locked image buffer, does nothing.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetActiveCameras(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetActiveCamerasAsync(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetActiveCameras(System.String,System.Object)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_cameraIndexes">Cameras requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetActiveCamerasAsync(System.String,System.Object)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_cameraIndexes">Cameras requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetResolutions(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetResolutionsAsync(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetResolutions(System.String,System.Object)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_resolutions">Resolutions requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetResolutionsAsync(System.String,System.Object)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_resolutions">Resolutions requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetColorSpaces(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetColorSpacesAsync(System.String)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetColorSpaces(System.String,System.Object)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_colorSpaces">Color Spaces requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetColorSpacesAsync(System.String,System.Object)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_colorSpaces">Color Spaces requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCamerasParameter(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCamerasParameterAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetCamerasParameter(System.String,System.Int32,System.Object)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <param name="arg2_values">values requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetCamerasParameterAsync(System.String,System.Int32,System.Object)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <param name="arg2_values">values requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetCamerasParameterToDefault(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetCamerasParameterToDefaultAsync(System.String,System.Int32)">
            <summary></summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <param name="arg1_parameterId">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetDirectRawImagesLocal(System.String)">
            <summary>Retrieves the latest image from the video source and returns a pointer to the locked ALImage, with data array pointing directly to raw data. There is no format conversion and no copy of the raw buffer.Warning: When image is not necessary anymore, a call to releaseDirectRawImage() is requested.Warning: When using this mode for several vision module, if they need raw data for more than 25ms check that you have strictly less modules in this mode than the amount of kernel buffers!!Warning: Release all kernel buffers before any action requesting a modification in camera running mode (e.g. resolution, switch between cameras).</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array of pointer to the locked image buffer, NULL if error.Warning, image pointer is valid only for C++ dynamic library.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetDirectRawImagesLocalAsync(System.String)">
            <summary>Retrieves the latest image from the video source and returns a pointer to the locked ALImage, with data array pointing directly to raw data. There is no format conversion and no copy of the raw buffer.Warning: When image is not necessary anymore, a call to releaseDirectRawImage() is requested.Warning: When using this mode for several vision module, if they need raw data for more than 25ms check that you have strictly less modules in this mode than the amount of kernel buffers!!Warning: Release all kernel buffers before any action requesting a modification in camera running mode (e.g. resolution, switch between cameras).</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array of pointer to the locked image buffer, NULL if error.Warning, image pointer is valid only for C++ dynamic library.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetDirectRawImagesRemote(System.String)">
            <summary>Fills an ALValue with data coming directly from raw buffer (no format conversion).</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array containing image informations :     [0] : width;    [1] : height;    [2] : number of layers;    [3] : ColorSpace;    [4] : time stamp (highest 32 bits);    [5] : time stamp (lowest 32 bits);    [6] : array of size height * width * nblayers containing image data;    [7] : cameraID;    [8] : left angle;    [9] : top angle;    [10] : right angle;    [11] : bottom angle;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetDirectRawImagesRemoteAsync(System.String)">
            <summary>Fills an ALValue with data coming directly from raw buffer (no format conversion).</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array containing image informations :     [0] : width;    [1] : height;    [2] : number of layers;    [3] : ColorSpace;    [4] : time stamp (highest 32 bits);    [5] : time stamp (lowest 32 bits);    [6] : array of size height * width * nblayers containing image data;    [7] : cameraID;    [8] : left angle;    [9] : top angle;    [10] : right angle;    [11] : bottom angle;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ReleaseDirectRawImages(System.String)">
            <summary>Release image buffer locked by getDirectRawImagesLocal().</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ReleaseDirectRawImagesAsync(System.String)">
            <summary>Release image buffer locked by getDirectRawImagesLocal().</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImagesLocal(System.String)">
            <summary>Applies transformations to the last image from video source and returns a pointer to a locked ALImage.When image is not necessary anymore, a call to releaseImage() is requested.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array of pointer of the locked image buffer, NULL if error.Warning, image pointer is valid only for C++ dynamic library.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImagesLocalAsync(System.String)">
            <summary>Applies transformations to the last image from video source and returns a pointer to a locked ALImage.When image is not necessary anymore, a call to releaseImage() is requested.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array of pointer of the locked image buffer, NULL if error.Warning, image pointer is valid only for C++ dynamic library.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImagesRemote(System.String)">
            <summary>Applies transformations to the last image from video source and fills pFrameOut.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array containing image informations :     [0] : width;    [1] : height;    [2] : number of layers;    [3] : ColorSpace;    [4] : time stamp (highest 32 bits);    [5] : time stamp (lowest 32 bits);    [6] : array of size height * width * nblayers containing image data;    [7] : cameraID;    [8] : left angle;    [9] : top angle;    [10] : right angle;    [11] : bottom angle;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImagesRemoteAsync(System.String)">
            <summary>Applies transformations to the last image from video source and fills pFrameOut.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>Array containing image informations :     [0] : width;    [1] : height;    [2] : number of layers;    [3] : ColorSpace;    [4] : time stamp (highest 32 bits);    [5] : time stamp (lowest 32 bits);    [6] : array of size height * width * nblayers containing image data;    [7] : cameraID;    [8] : left angle;    [9] : top angle;    [10] : right angle;    [11] : bottom angle;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ReleaseImages(System.String)">
            <summary>Release image buffer locked by getImageLocal().If G.V.M. had no locked image buffer, does nothing.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ReleaseImagesAsync(System.String)">
            <summary>Release image buffer locked by getImageLocal().If G.V.M. had no locked image buffer, does nothing.</summary>
            <param name="arg0_name">Name of the subscribing vision module</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.RecordVideo(System.String,System.String,System.Int32,System.Int32)">
            <summary>Background record of an .arv raw format video from the images processed by a vision moduleActualy it take picture each time the vision module call getDirectRawImageRemote().</summary>
            <param name="arg0_id">Name under which the G.V.M. is known from the V.I.M.</param>
            <param name="arg1_path">path/name of the video to be recorded</param>
            <param name="arg2_totalNumber">number of images to be recorded. 0xFFFFFFFF for &quot;unlimited&quot;</param>
            <param name="arg3_period">one image recorded every pPeriod images</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.RecordVideoAsync(System.String,System.String,System.Int32,System.Int32)">
            <summary>Background record of an .arv raw format video from the images processed by a vision moduleActualy it take picture each time the vision module call getDirectRawImageRemote().</summary>
            <param name="arg0_id">Name under which the G.V.M. is known from the V.I.M.</param>
            <param name="arg1_path">path/name of the video to be recorded</param>
            <param name="arg2_totalNumber">number of images to be recorded. 0xFFFFFFFF for &quot;unlimited&quot;</param>
            <param name="arg3_period">one image recorded every pPeriod images</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopVideo(System.String)">
            <summary>Stop writing the video sequence</summary>
            <param name="arg0_id">Name under which the G.V.M. is known from ALVideoDevice.</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopVideoAsync(System.String)">
            <summary>Stop writing the video sequence</summary>
            <param name="arg0_id">Name under which the G.V.M. is known from ALVideoDevice.</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetAngularPositionFromImagePosition(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetAngularPositionFromImagePositionAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImagePositionFromAngularPosition(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImagePositionFromAngularPositionAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetAngularSizeFromImageSize(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetAngularSizeFromImageSizeAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageSizeFromAngularSize(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageSizeFromAngularSizeAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageInfoFromAngularInfo(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageInfoFromAngularInfoAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageInfoFromAngularInfoWithResolution(System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImageInfoFromAngularInfoWithResolutionAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PutImage(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>Allow image buffer pushing</summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_width">int width of image among 1280*960, 640*480, 320*240, 240*160</param>
            <param name="arg2_height">int height of image</param>
            <param name="arg3_imageBuffer">Image buffer in bitmap form</param>
            <returns>true if the put succeeded</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PutImageAsync(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>Allow image buffer pushing</summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <param name="arg1_width">int width of image among 1280*960, 640*480, 320*240, 240*160</param>
            <param name="arg2_height">int height of image</param>
            <param name="arg3_imageBuffer">Image buffer in bitmap form</param>
            <returns>true if the put succeeded</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetExpectedImageParameters(System.Int32)">
            <summary>called by the simulator to know expected image parameters</summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns>ALValue of expected parameters, [int resolution, int framerate]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetExpectedImageParametersAsync(System.Int32)">
            <summary>called by the simulator to know expected image parameters</summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns>ALValue of expected parameters, [int resolution, int framerate]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice._getExternalBrightness(System.Int32)">
            <summary>Get average environment luminance.</summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns>The average brightness luminance == (15680-Texposure)*256+AverageLuminance</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice._getExternalBrightnessAsync(System.Int32)">
            <summary>Get average environment luminance.</summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns>The average brightness luminance == (15680-Texposure)*256+AverageLuminance</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.OnClientDisconnected(System.String,System.Object,System.String)">
            <summary>Callback when client is disconnected</summary>
            <param name="arg0_eventName">The echoed event name</param>
            <param name="arg1_eventContents">The name of the client that has disconnected</param>
            <param name="arg2_message">The message give when subscribing.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.OnClientDisconnectedAsync(System.String,System.Object,System.String)">
            <summary>Callback when client is disconnected</summary>
            <param name="arg0_eventName">The echoed event name</param>
            <param name="arg1_eventContents">The name of the client that has disconnected</param>
            <param name="arg2_message">The message give when subscribing.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.Subscribe(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Register to ALVideoDevice (formerly Video Input Module/V.I.M.). When a General Video Module(G.V.M.) registers to ALVideoDevice, a buffer of the requested image format is added to the buffers list.Returns the name under which the G.V.M. is registered to ALVideoDevice (useful when two G.V.M. try to register using the same name</summary>
            <param name="arg0_gvmName">Name of the subscribing G.V.M.</param>
            <param name="arg1_resolution">Resolution requested. { 0 = kQQVGA, 1 = kQVGA, 2 = kVGA } </param>
            <param name="arg2_colorSpace">Colorspace requested. { 0 = kYuv, 9 = kYUV422, 10 = kYUV, 11 = kRGB, 12 = kHSY, 13 = kBGR } </param>
            <param name="arg3_fps">Fps (frames per second) requested. { 5, 10, 15, 30 } </param>
            <returns>Name under which the G.V.M. is known from ALVideoDevice, 0 if failed.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SubscribeAsync(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Register to ALVideoDevice (formerly Video Input Module/V.I.M.). When a General Video Module(G.V.M.) registers to ALVideoDevice, a buffer of the requested image format is added to the buffers list.Returns the name under which the G.V.M. is registered to ALVideoDevice (useful when two G.V.M. try to register using the same name</summary>
            <param name="arg0_gvmName">Name of the subscribing G.V.M.</param>
            <param name="arg1_resolution">Resolution requested. { 0 = kQQVGA, 1 = kQVGA, 2 = kVGA } </param>
            <param name="arg2_colorSpace">Colorspace requested. { 0 = kYuv, 9 = kYUV422, 10 = kYUV, 11 = kRGB, 12 = kHSY, 13 = kBGR } </param>
            <param name="arg3_fps">Fps (frames per second) requested. { 5, 10, 15, 30 } </param>
            <returns>Name under which the G.V.M. is known from ALVideoDevice, 0 if failed.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.UnsubscribeAllInstances(System.String)">
            <summary>Used to unsubscribe all instances for a given G.V.M. (e.g. VisionModule and VisionModule_5) from ALVideoDevice.</summary>
            <param name="arg0_id">Root name of the G.V.M. (e.g. with the example above this will be VisionModule).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.UnsubscribeAllInstancesAsync(System.String)">
            <summary>Used to unsubscribe all instances for a given G.V.M. (e.g. VisionModule and VisionModule_5) from ALVideoDevice.</summary>
            <param name="arg0_id">Root name of the G.V.M. (e.g. with the example above this will be VisionModule).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVIMResolution">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVIMResolutionAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVIMColorSpace">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVIMColorSpaceAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVIMFrameRate">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVIMFrameRateAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetGVMResolution(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetGVMResolutionAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetGVMColorSpace(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetGVMColorSpaceAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetGVMFrameRate(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetGVMFrameRateAsync(System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraModelID">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetCameraModelIDAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParam(System.Int32,System.Int32)">
            <summary>Sets the value of a specific parameter for the video source.</summary>
            <param name="arg0_pParam">Camera parameter requested.</param>
            <param name="arg1_pNewValue">value requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParamAsync(System.Int32,System.Int32)">
            <summary>Sets the value of a specific parameter for the video source.</summary>
            <param name="arg0_pParam">Camera parameter requested.</param>
            <param name="arg1_pNewValue">value requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParam(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the value of a specific parameter for the video source.</summary>
            <param name="arg0_pParam">Camera parameter requested.</param>
            <param name="arg1_pNewValue">value requested.</param>
            <param name="arg2_pCameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParamAsync(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the value of a specific parameter for the video source.</summary>
            <param name="arg0_pParam">Camera parameter requested.</param>
            <param name="arg1_pNewValue">value requested.</param>
            <param name="arg2_pCameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParam(System.Int32)">
            <summary></summary>
            <param name="arg0_pParam">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParamAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_pParam">Camera parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParam(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_pParam">Camera parameter requested.</param>
            <param name="arg1_pCameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetParamAsync(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0_pParam">Camera parameter requested.</param>
            <param name="arg1_pCameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParamDefault(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetParamDefaultAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetAngPosFromImgPos(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetAngPosFromImgPosAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImgPosFromAngPos(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImgPosFromAngPosAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetAngSizeFromImgSize(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetAngSizeFromImgSizeAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImgSizeFromAngSize(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImgSizeFromAngSizeAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImgInfoFromAngInfo(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImgInfoFromAngInfoAsync(System.Collections.Generic.IEnumerable{System.Single})">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImgInfoFromAngInfoWithRes(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetImgInfoFromAngInfoWithResAsync(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ResolutionToSizes(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.ResolutionToSizesAsync(System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SizesToResolution(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SizesToResolutionAsync(System.Int32,System.Int32)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetExpectedImageParameters">
            <summary>called by the simulator to know expected image parameters</summary>
            <returns>ALValue of expected parameters, [int resolution, int framerate]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetExpectedImageParametersAsync">
            <summary>called by the simulator to know expected image parameters</summary>
            <returns>ALValue of expected parameters, [int resolution, int framerate]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetSimCamInputSize(System.Int32,System.Int32)">
            <summary>called by the simulator to know expected image parameters</summary>
            <param name="arg0_width">int width of image among 1280*960, 640*480, 320*240, 240*160</param>
            <param name="arg1_height">int height of image among 1280*960, 640*480, 320*240, 240*160</param>
            <returns>true if setSize worked</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.SetSimCamInputSizeAsync(System.Int32,System.Int32)">
            <summary>called by the simulator to know expected image parameters</summary>
            <param name="arg0_width">int width of image among 1280*960, 640*480, 320*240, 240*160</param>
            <param name="arg1_height">int height of image among 1280*960, 640*480, 320*240, 240*160</param>
            <returns>true if setSize worked</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PutImage(System.Object)">
            <summary>Allow image buffer pushing</summary>
            <param name="arg0_imageBuffer">Image buffer in bitmap form</param>
            <returns>true if the put succeeded</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.PutImageAsync(System.Object)">
            <summary>Allow image buffer pushing</summary>
            <param name="arg0_imageBuffer">Image buffer in bitmap form</param>
            <returns>true if the put succeeded</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StartFrameGrabber">
            <summary>Advanced method that opens and initialize video source device if it was not before.Note that the first module subscribing to ALVideoDevice will launch it automatically.</summary>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StartFrameGrabberAsync">
            <summary>Advanced method that opens and initialize video source device if it was not before.Note that the first module subscribing to ALVideoDevice will launch it automatically.</summary>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopFrameGrabber">
            <summary>Advanced method that close video source device.Note that the last module unsubscribing to ALVideoDevice will launch it automatically.</summary>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.StopFrameGrabberAsync">
            <summary>Advanced method that close video source device.Note that the last module unsubscribing to ALVideoDevice will launch it automatically.</summary>
            <returns>true if success</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsFrameGrabberOff">
            <summary>Advanced method that asks if the framegrabber is off.</summary>
            <returns>true if off</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.IsFrameGrabberOffAsync">
            <summary>Advanced method that asks if the framegrabber is off.</summary>
            <returns>true if off</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetHorizontalAperture(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetHorizontalApertureAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVerticalAperture(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoDevice.GetVerticalApertureAsync(System.Int32)">
            <summary></summary>
            <param name="arg0_cameraIndex">Camera requested.</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALVideoRecorder">
            <summary>This module provides methods to record videos and store them on disk.</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVideoRecorder.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVideoRecorder.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVideoRecorder.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALVideoRecorder.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StartRecording(System.String,System.String)">
            <summary>Starts recording a video. Please note that only one record at a time can be made.</summary>
            <param name="arg0_folderPath">Folder where the video is saved.</param>
            <param name="arg1_fileName">Filename used to save the video.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StartRecordingAsync(System.String,System.String)">
            <summary>Starts recording a video. Please note that only one record at a time can be made.</summary>
            <param name="arg0_folderPath">Folder where the video is saved.</param>
            <param name="arg1_fileName">Filename used to save the video.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StartRecording(System.String,System.String,System.Boolean)">
            <summary>Starts recording a video. Please note that only one record at a time can be made.</summary>
            <param name="arg0_folderPath">Folder where the video is saved.</param>
            <param name="arg1_fileName">Filename used to save the video.</param>
            <param name="arg2_overwrite">If false and the filename already exists, an exception is thrown.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StartRecordingAsync(System.String,System.String,System.Boolean)">
            <summary>Starts recording a video. Please note that only one record at a time can be made.</summary>
            <param name="arg0_folderPath">Folder where the video is saved.</param>
            <param name="arg1_fileName">Filename used to save the video.</param>
            <param name="arg2_overwrite">If false and the filename already exists, an exception is thrown.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StopRecording">
            <summary>Stops a video record that was launched with startRecording(). The function returns the number of frames that were recorded, as well as the video absolute file name.</summary>
            <returns>Array of two elements [numRecordedFrames, recordAbsolutePath]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.StopRecordingAsync">
            <summary>Stops a video record that was launched with startRecording(). The function returns the number of frames that were recorded, as well as the video absolute file name.</summary>
            <returns>Array of two elements [numRecordedFrames, recordAbsolutePath]</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.IsRecording">
            <summary>Are we currently recording a video</summary>
            <returns>True/False</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.IsRecordingAsync">
            <summary>Are we currently recording a video</summary>
            <returns>True/False</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder._recordVideo(System.String)">
            <summary>private</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder._recordVideoAsync(System.String)">
            <summary>private</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetCameraID(System.Int32)">
            <summary>Sets camera ID.</summary>
            <param name="arg0_cameraID">ID of the camera to use.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetCameraIDAsync(System.Int32)">
            <summary>Sets camera ID.</summary>
            <param name="arg0_cameraID">ID of the camera to use.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetResolution(System.Int32)">
            <summary>Sets resolution.</summary>
            <param name="arg0_resolution">New frame resolution.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetResolutionAsync(System.Int32)">
            <summary>Sets resolution.</summary>
            <param name="arg0_resolution">New frame resolution.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetColorSpace(System.Int32)">
            <summary>Sets color space.</summary>
            <param name="arg0_colorSpace">New color space.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetColorSpaceAsync(System.Int32)">
            <summary>Sets color space.</summary>
            <param name="arg0_colorSpace">New color space.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetFrameRate(System.Single)">
            <summary>Sets frame rate.</summary>
            <param name="arg0_frameRate">New frame rate.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetFrameRateAsync(System.Single)">
            <summary>Sets frame rate.</summary>
            <param name="arg0_frameRate">New frame rate.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetVideoFormat(System.String)">
            <summary>Sets video format.</summary>
            <param name="arg0_videoFormat">New video format.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.SetVideoFormatAsync(System.String)">
            <summary>Sets video format.</summary>
            <param name="arg0_videoFormat">New video format.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetCameraID">
            <summary>Returns current camera ID.</summary>
            <returns>Current camera ID.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetCameraIDAsync">
            <summary>Returns current camera ID.</summary>
            <returns>Current camera ID.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetResolution">
            <summary>Returns current resolution.</summary>
            <returns>Current resolution.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetResolutionAsync">
            <summary>Returns current resolution.</summary>
            <returns>Current resolution.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetColorSpace">
            <summary>Returns current color space.</summary>
            <returns>Current color space.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetColorSpaceAsync">
            <summary>Returns current color space.</summary>
            <returns>Current color space.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetFrameRate">
            <summary>Returns current frame rate.</summary>
            <returns>Current frame rate.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetFrameRateAsync">
            <summary>Returns current frame rate.</summary>
            <returns>Current frame rate.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetVideoFormat">
            <summary>Returns current video format.</summary>
            <returns>Current video format.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVideoRecorder.GetVideoFormatAsync">
            <summary>Returns current video format.</summary>
            <returns>Current video format.</returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALVisionRecognition">
            <summary>ALVisionRecognition is a module which detects and recognizes learned pictures, like pages of a comic books, faces of objects or even locations.The learning stage is done using the Choregraphe interface. Follow the steps in the green doc that will explain how to create your own database.The output value is written in ALMemory in the PictureDetected variable.It contains an array of tags, with the following format:  [ [ TimeStampField ] [ Picture_info_0 , Picture _info_1, . . . , Picture_info_N-1 ] ]  with as many Picture_info tags as things currently recognized. Picture_info = [[labels_list], matched_keypoints, ratio, [boundary_points]] with labels_list = [label_0, label_1, ..., label_N-1] and label_n belongs to label_n+1 and boundary_points = [[x0,y0], [x1,y1], ..., [xN,yN]]  - Labels are the names given to the picture (e.g. &quot;cover/my book&quot;, or &quot;fridge corner/kitchen/my flat&quot;). - matched_keypoints corresponds to the number of keypoints retrieved in the current frame. - ratio represents the number of keypoints found for the object in the current frame divided by the number of keypoints found during the learning stage. - boundary_points is a list of points coordinates in angle values representing the reprojection in the current image of the boundaries selected during the learning stage. </summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisionRecognition.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisionRecognition.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisionRecognition.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALVisionRecognition.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetFrameRate(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetFrameRateAsync(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetFrameRate(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetFrameRateAsync(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetParameter(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetParameterAsync(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition._run">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition._runAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.ChangeDatabase(System.String,System.String)">
            <summary>By default the database has the name &quot;current&quot; and is on the robot in /home/nao/naoqi/share/naoqi/vision/visionrecognition/ folder. This bound method allows to choose both another name and another folder for the database. </summary>
            <param name="arg0_databasePath">Absolute path of the database on the robot, or &quot;&quot; to set default path.</param>
            <param name="arg1_databaseName">Name of the database folder, or &quot;&quot; to set default database folder.</param>
            <returns>True if the operation succeded, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.ChangeDatabaseAsync(System.String,System.String)">
            <summary>By default the database has the name &quot;current&quot; and is on the robot in /home/nao/naoqi/share/naoqi/vision/visionrecognition/ folder. This bound method allows to choose both another name and another folder for the database. </summary>
            <param name="arg0_databasePath">Absolute path of the database on the robot, or &quot;&quot; to set default path.</param>
            <param name="arg1_databaseName">Name of the database folder, or &quot;&quot; to set default database folder.</param>
            <returns>True if the operation succeded, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.ClearCurrentDatabase">
            <summary>Clear the current database, the user has to be warned before calling this function.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.ClearCurrentDatabaseAsync">
            <summary>Clear the current database, the user has to be warned before calling this function.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetParam(System.String,System.Object)">
            <summary>Set vision recognition parameters (deprecated in 1.22)</summary>
            <param name="arg0_paramName">Name of the parameter to be changed. Only &quot;resolution&quot; can be used.</param>
            <param name="arg1_paramValue">Value of the resolution as an integer: 0(QQVGA) 1(QVGA) 2(VGA)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetParamAsync(System.String,System.Object)">
            <summary>Set vision recognition parameters (deprecated in 1.22)</summary>
            <param name="arg0_paramName">Name of the parameter to be changed. Only &quot;resolution&quot; can be used.</param>
            <param name="arg1_paramValue">Value of the resolution as an integer: 0(QQVGA) 1(QVGA) 2(VGA)</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetParam(System.String)">
            <summary>Get some vision recognition parameters.</summary>
            <param name="arg0_paramName">The name of the parameter to get. &quot;db_path&quot; and &quot;db_name&quot; can be used.</param>
            <returns>Value of the parameter as a string for &quot;db_path&quot; and &quot;db_name&quot;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetParamAsync(System.String)">
            <summary>Get some vision recognition parameters.</summary>
            <param name="arg0_paramName">The name of the parameter to get. &quot;db_path&quot; and &quot;db_name&quot; can be used.</param>
            <returns>Value of the parameter as a string for &quot;db_path&quot; and &quot;db_name&quot;</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.LearnFromFile(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>Load an image and interpret it as an object.</summary>
            <param name="arg0_filename">The filename of the image that will be interpreted as a planar object.</param>
            <param name="arg1_name">The name of the object (used as a unique identifier).</param>
            <param name="arg2_tags">A list of tags (as strings) containing any met-data about your object.</param>
            <param name="arg3_isWholeImage">indicates if the object occupies the whole image. If set to false, visionrecognition will try to detect the border of the object automatically. This works with unicolor background where object stands out well from the background. By default, this is set to true.</param>
            <param name="arg4_forced">indicates if learned object will replace existing object (having the same original name) if any.</param>
            <returns>True if the operation succeded, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.LearnFromFileAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>Load an image and interpret it as an object.</summary>
            <param name="arg0_filename">The filename of the image that will be interpreted as a planar object.</param>
            <param name="arg1_name">The name of the object (used as a unique identifier).</param>
            <param name="arg2_tags">A list of tags (as strings) containing any met-data about your object.</param>
            <param name="arg3_isWholeImage">indicates if the object occupies the whole image. If set to false, visionrecognition will try to detect the border of the object automatically. This works with unicolor background where object stands out well from the background. By default, this is set to true.</param>
            <param name="arg4_forced">indicates if learned object will replace existing object (having the same original name) if any.</param>
            <returns>True if the operation succeded, false otherwise.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetMaxOutObjs(System.Int32)">
            <summary>Set the maximal number (not more than 10) of detected objects for each detection. By default, this is set to 1.</summary>
            <param name="arg0_iMaxOutObjs">number of desired objects to be detected.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.SetMaxOutObjsAsync(System.Int32)">
            <summary>Set the maximal number (not more than 10) of detected objects for each detection. By default, this is set to 1.</summary>
            <param name="arg0_iMaxOutObjs">number of desired objects to be detected.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMaxOutObjs">
            <summary>Get the maximal number of detected objects for each detection.</summary>
            <returns>number of maximal objects to be detected.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetMaxOutObjsAsync">
            <summary>Get the maximal number of detected objects for each detection.</summary>
            <returns>number of maximal objects to be detected.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetSize">
            <summary>Get number of objects in the current database.</summary>
            <returns>number of objects in the current database.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.GetSizeAsync">
            <summary>Get number of objects in the current database.</summary>
            <returns>number of objects in the current database.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition._removeObject(System.String)">
            <summary>Remove an obbject with a specific hash from the DB (Attention: All files related to this object will be deleted.)</summary>
            <param name="arg0_hash">the hash (as a string) of the object to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition._removeObjectAsync(System.String)">
            <summary>Remove an obbject with a specific hash from the DB (Attention: All files related to this object will be deleted.)</summary>
            <param name="arg0_hash">the hash (as a string) of the object to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.DetectFromFile(System.String)">
            <summary>Load an image and search for known objects.</summary>
            <param name="arg0_image">The image that will be searched for known objects.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisionRecognition.DetectFromFileAsync(System.String)">
            <summary>Load an image and search for known objects.</summary>
            <param name="arg0_image">The image that will be searched for known objects.</param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALVisualCompass">
            <summary></summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisualCompass.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisualCompass.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisualCompass.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALVisualCompass.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetFrameRate(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetFrameRateAsync(System.String,System.Int32)">
            <summary>Sets the extractor framerate for a chosen subscriber</summary>
            <param name="arg0_subscriberName">Name of the subcriber</param>
            <param name="arg1_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetFrameRate(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetFrameRateAsync(System.Int32)">
            <summary>Sets the extractor framerate for all the subscribers</summary>
            <param name="arg0_framerate">New framerate</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetResolution(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetResolutionAsync(System.Int32)">
            <summary>Sets extractor resolution</summary>
            <param name="arg0_resolution">New resolution</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetActiveCamera(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetActiveCameraAsync(System.Int32)">
            <summary>Sets extractor active camera</summary>
            <param name="arg0_cameraId">Id of the camera that will become the active camera</param>
            <returns>True if the update succeeded, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetParameter(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetParameterAsync(System.String,System.Object)">
            <summary>DEPRECATED: Sets pause and resolution</summary>
            <param name="arg0_paramName">Name of the parameter to set</param>
            <param name="arg1_value">New value</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetFrameRate">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetFrameRateAsync">
            <summary>Gets extractor framerate</summary>
            <returns>Current value of the framerate of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetResolution">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetResolutionAsync">
            <summary>Gets extractor resolution</summary>
            <returns>Current value of the resolution of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetActiveCamera">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetActiveCameraAsync">
            <summary>Gets extractor active camera</summary>
            <returns>Id of the current active camera of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsPaused">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsPausedAsync">
            <summary>Gets extractor pause status</summary>
            <returns>True if the extractor is paused, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsProcessing">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.IsProcessingAsync">
            <summary>Gets extractor running status</summary>
            <returns>True if the extractor is currently processing images, False if not</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.Pause(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.PauseAsync(System.Boolean)">
            <summary>Changes the pause status of the extractor</summary>
            <param name="arg0_paused">New pause satus</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._run">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._runAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetReferenceImage">
            <summary>Returns an ALValue containing the image used as a reference.</summary>
            <returns>Reference image (formatted as the ALValue from getImageRemote of ALVideoDevice)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetReferenceImageAsync">
            <summary>Returns an ALValue containing the image used as a reference.</summary>
            <returns>Reference image (formatted as the ALValue from getImageRemote of ALVideoDevice)</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.EnableReferenceRefresh(System.Boolean)">
            <summary></summary>
            <param name="arg0_refresh">True if the reference is automatically refreshed at extractor startup; false to use the manually set reference image.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.EnableReferenceRefreshAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0_refresh">True if the reference is automatically refreshed at extractor startup; false to use the manually set reference image.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMatchingQuality">
            <summary>Returns the reliability of the matching and the compass deviation computations.</summary>
            <returns>[0]: Percentage of the matched keypoints that are used to compute the deviation (significant if over 50%)  [1]: Number of keypoints matching.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.GetMatchingQualityAsync">
            <summary>Returns the reliability of the matching and the compass deviation computations.</summary>
            <returns>[0]: Percentage of the matched keypoints that are used to compute the deviation (significant if over 50%)  [1]: Number of keypoints matching.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetCurrentImageAsReference">
            <summary>Sets the reference image for the compass.</summary>
            <returns>True if the reference image has been successfully set</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.SetCurrentImageAsReferenceAsync">
            <summary>Sets the reference image for the compass.</summary>
            <returns>True if the reference image has been successfully set</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.MoveTo(System.Single,System.Single,System.Single)">
            <summary>Go to input pose (in robot referential).</summary>
            <param name="arg0_x">Distance along the X axis in meters.</param>
            <param name="arg1_y">Distance along the Y axis in meters.</param>
            <param name="arg2_theta">Rotation around the Z axis in radians [-3.1415 to 3.1415].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.MoveToAsync(System.Single,System.Single,System.Single)">
            <summary>Go to input pose (in robot referential).</summary>
            <param name="arg0_x">Distance along the X axis in meters.</param>
            <param name="arg1_y">Distance along the Y axis in meters.</param>
            <param name="arg2_theta">Rotation around the Z axis in radians [-3.1415 to 3.1415].</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.MoveStraightTo(System.Single)">
            <summary>Move along the robot X axis.</summary>
            <param name="arg0_x">Algebric distance along the X axis in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.MoveStraightToAsync(System.Single)">
            <summary>Move along the robot X axis.</summary>
            <param name="arg0_x">Algebric distance along the X axis in meters.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._xOnMoveFailed">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._xOnMoveFailedAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._xOnFootContactChanged(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._xOnFootContactChangedAsync(System.String,System.Object,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._stopControllers">
            <summary>Stops the robot</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._stopControllersAsync">
            <summary>Stops the robot</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._resumeControllers(System.Boolean)">
            <summary>Stops the robot</summary>
            <param name="arg0_resumeControllers">Resume after stopping</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._resumeControllersAsync(System.Boolean)">
            <summary>Stops the robot</summary>
            <param name="arg0_resumeControllers">Resume after stopping</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._resume">
            <summary>Allows the robot to resume after stopping.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._resumeAsync">
            <summary>Allows the robot to resume after stopping.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._setTranslationParameters(System.Single,System.Single,System.Single,System.Single)">
            <summary>Set the rotation controller parameters.</summary>
            <param name="arg0_pCoefficient">Proportional gain of the controller.</param>
            <param name="arg1_thetaThreshold">Threshold to consider the gap on theta as error.</param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._setTranslationParametersAsync(System.Single,System.Single,System.Single,System.Single)">
            <summary>Set the rotation controller parameters.</summary>
            <param name="arg0_pCoefficient">Proportional gain of the controller.</param>
            <param name="arg1_thetaThreshold">Threshold to consider the gap on theta as error.</param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._setRotationParameters(System.Object,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>Set the rotation controller parameters.</summary>
            <param name="arg0_pCoefficient">Proportional gain of the controller.</param>
            <param name="arg1_maxRotationSpeed">Max robot rotation speed.</param>
            <param name="arg2_thetaThreshold">Threshold to consider the gap on theta as an error.</param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._setRotationParametersAsync(System.Object,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>Set the rotation controller parameters.</summary>
            <param name="arg0_pCoefficient">Proportional gain of the controller.</param>
            <param name="arg1_maxRotationSpeed">Max robot rotation speed.</param>
            <param name="arg2_thetaThreshold">Threshold to consider the gap on theta as an error.</param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.WaitUntilTargetReached">
            <summary>Block the current thread until the target is reached.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass.WaitUntilTargetReachedAsync">
            <summary>Block the current thread until the target is reached.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._setOdometryMode(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualCompass._setOdometryModeAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:Baku.LibqiDotNet.Service.ALVisualSpaceHistory">
            <summary>VisualSpaceHistory module</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.CreateService(Baku.LibqiDotNet.IQiSession)">
            <summary>サービスの取得元セッションを指定してサービスを取得します。</summary>
            <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.CreateUninitializedService(Baku.LibqiDotNet.IQiSession)">
             <summary>
             内部情報が未初期化のサービスを取得します。初期化は<see ref="StartInitialize"/>関数で行います。
            </summary>
             <param name="session">サービスの取得元となるセッション</param>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.InitializeService">
            <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.StartInitializeService">
             <summary>
             ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
             初期化の完了は<see ref="IsInitialized"/>プロパティあるいは<see ref="Initialized"/>イベントを通じて行います。
            </summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.SourceService">
            <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Session">
            <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
        </member>
        <member name="P:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.IsInitialized">
            <summary>このサービスが初期化済みであるかを取得します。</summary>
        </member>
        <member name="E:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Initialized">
            <summary>このサービスの初期化が完了すると発生します。</summary>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.RegisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.RegisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.UnregisterEvent(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.UnregisterEventAsync(System.UInt32,System.UInt32,System.UInt64)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.MetaObject(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.MetaObjectAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Terminate(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.TerminateAsync(System.UInt32)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Property(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.PropertyAsync(System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.SetProperty(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.SetPropertyAsync(System.Object,System.Object)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Properties">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.PropertiesAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.RegisterEventWithSignature(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.RegisterEventWithSignatureAsync(System.UInt32,System.UInt32,System.UInt64,System.String)">
            <summary></summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.IsStatsEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.IsStatsEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.EnableStats(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.EnableStatsAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Stats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.StatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.ClearStats">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.ClearStatsAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.IsTraceEnabled">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.IsTraceEnabledAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.EnableTrace(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.EnableTraceAsync(System.Boolean)">
            <summary></summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Exit">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.ExitAsync">
            <summary>Exits and unregisters the module.</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.__pCall(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.__pCallAsync(System.UInt32,System.Object)">
            <summary>Internal function to pCall methods</summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.PCall(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.PCallAsync(System.Object)">
            <summary>NAOqi1 pCall method.</summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Version">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.VersionAsync">
            <summary>Returns the version of the module.</summary>
            <returns>A string containing the version of the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Ping">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.PingAsync">
            <summary>Just a ping. Always returns true</summary>
            <returns>returns true</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMethodList">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMethodListAsync">
            <summary>Retrieves the module's method list.</summary>
            <returns>An array of method names.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMethodHelp(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMethodHelpAsync(System.String)">
            <summary>Retrieves a method's description.</summary>
            <param name="arg0_methodName">The name of the method.</param>
            <returns>A structure containing the method's description.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetModuleHelp">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetModuleHelpAsync">
            <summary>Retrieves the module's description.</summary>
            <returns>A structure describing the module.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Wait(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.WaitAsync(System.Int32,System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post'</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <param name="arg1_timeoutPeriod">The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.</param>
            <returns>True if the timeout period terminated. False if the method returned.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Wait(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.WaitAsync(System.Int32)">
            <summary>Wait for the end of a long running method that was called using 'post', returns a cancelable future</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.IsRunning(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.IsRunningAsync(System.Int32)">
            <summary>Returns true if the method is currently running.</summary>
            <param name="arg0_id">The ID of the method that was returned when calling the method using 'post'</param>
            <returns>True if the method is currently running</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Stop(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.StopAsync(System.Int32)">
            <summary>returns true if the method is currently running</summary>
            <param name="arg0_id">the ID of the method to wait for</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetBrokerName">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetBrokerNameAsync">
            <summary>Gets the name of the parent broker.</summary>
            <returns>The name of the parent broker.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetUsage(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetUsageAsync(System.String)">
            <summary>Gets the method usage string. This summarises how to use the method.</summary>
            <param name="arg0_name">The name of the method.</param>
            <returns>A string that summarises the usage of the method.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Subscribe(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.SubscribeAsync(System.String,System.Int32,System.Single)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <param name="arg1_period">Refresh period (in milliseconds) if relevant.</param>
            <param name="arg2_precision">Precision of the extractor if relevant.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Subscribe(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.SubscribeAsync(System.String)">
            <summary>Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(&quot;keyName&quot;). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.</summary>
            <param name="arg0_name">Name of the module which subscribes.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.Unsubscribe(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.UnsubscribeAsync(System.String)">
            <summary>Unsubscribes from the extractor.</summary>
            <param name="arg0_name">Name of the module which had subscribed.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.UpdatePeriod(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.UpdatePeriodAsync(System.String,System.Int32)">
            <summary>Updates the period if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_period">Refresh period (in milliseconds).</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.UpdatePrecision(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.UpdatePrecisionAsync(System.String,System.Single)">
            <summary>Updates the precision if relevant.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <param name="arg1_precision">Precision of the extractor.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetCurrentPeriod">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetCurrentPeriodAsync">
            <summary>Gets the current period.</summary>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetCurrentPrecision">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetCurrentPrecisionAsync">
            <summary>Gets the current precision.</summary>
            <returns>Precision of the extractor.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMyPeriod(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMyPeriodAsync(System.String)">
            <summary>Gets the period for a specific subscription.</summary>
            <param name="arg0_name">Name of the module which has subscribed.</param>
            <returns>Refresh period (in milliseconds).</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMyPrecision(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMyPrecisionAsync(System.String)">
            <summary>Gets the precision for a specific subscription.</summary>
            <param name="arg0_name">name of the module which has subscribed</param>
            <returns>precision of the extractor</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetSubscribersInfo">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetSubscribersInfoAsync">
            <summary>Gets the parameters given by the module.</summary>
            <returns>Array of names and parameters of all subscribers.</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetOutputNames">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetOutputNamesAsync">
            <summary>Get the list of values updated in ALMemory.</summary>
            <returns>Array of values updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetEventList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetEventListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMemoryKeyList">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetMemoryKeyListAsync">
            <summary>Get the list of events updated in ALMemory.</summary>
            <returns>Array of events updated by this extractor in ALMemory</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.SetGridPrecision(System.Single)">
            <summary>Sets grid precision</summary>
            <param name="arg0_precision">float, ratio between camera field of view and grid cell field of view in each dimension. Setting the grid precision will reset the grid.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.SetGridPrecisionAsync(System.Single)">
            <summary>Sets grid precision</summary>
            <param name="arg0_precision">float, ratio between camera field of view and grid cell field of view in each dimension. Setting the grid precision will reset the grid.</param>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetGridPrecision">
            <summary>Gets grid precision</summary>
            <returns>Grid precision</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.GetGridPrecisionAsync">
            <summary>Gets grid precision</summary>
            <returns>Grid precision</returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.ResetGrid">
            <summary>Resets grid with current timestamp</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory.ResetGridAsync">
            <summary>Resets grid with current timestamp</summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory._run">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Baku.LibqiDotNet.Service.ALVisualSpaceHistory._runAsync">
            <summary></summary>
            <returns></returns>
        </member>
    </members>
</doc>
